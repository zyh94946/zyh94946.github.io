<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ibelieving.io Software Development Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ibelieving.io/"/>
  <updated>2022-07-30T03:01:16.654Z</updated>
  <id>https://ibelieving.io/</id>
  
  <author>
    <name>Zhongyang Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Argo CD 实践 GitOps</title>
    <link href="https://ibelieving.io/2022/07/30/argocd/"/>
    <id>https://ibelieving.io/2022/07/30/argocd/</id>
    <published>2022-07-30T03:00:00.000Z</published>
    <updated>2022-07-30T03:01:16.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>书接上文 <a href="https://ibelieving.io/2022/07/12/onedev/">OneDev 自建 Git 服务和 CI/CD</a>，这次通过 ArgoCD 实现项目部署，项目编译、镜像构建依然通过 OneDev 流水线实现。当然用别的 Git 服务也是可以的。</p><p>Argo CD 被实现为一个 kubernetes 控制器，它持续监控正在运行的应用程序并将当前的活动状态与所需的目标状态（如 Git repo 中指定的）进行比较。Argo CD 报告和可视化差异，同时提供自动或手动将实时状态同步回所需目标状态的工具。</p><p>上次 git 仓库只有一个，这次 git 仓库分为两个</p><p>wx-msg-push 为项目代码<br>gitops 应用部署定义</p><p>整体流程为：</p><ul><li>wx-msg-push 正常开发提交</li><li>当创建 tag 推送时，触发 OneDev 流水线构建</li><li>检出 wx-msg-push 代码，在容器中编译可执行文件，生成多平台可执行文件压缩包制品</li><li>通过 kaniko 构建 wx-msg-push 项目镜像，推送至镜像仓库</li><li>检出 gitops 代码，修改 wx-msg-push 项目 yaml 文件的镜像版本后 push</li><li>在 argocd 中发现 gitops 配置变更</li><li>同步应用最新状态</li></ul><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>高可用配置请参考 <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/" target="_blank" rel="noopener">High Availability</a></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl create namespace argocd</span><br><span class="hljs-meta">$</span><span class="bash"> kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</span><br></code></pre></td></tr></table></figure><p>安装之后默认会启用 <code>TLS</code> 验证和 <code>http</code> 强制跳转至 <code>https</code>。<br>我这里不需要，直接修改 <code>argocd-server</code> 配置 <code>kubectl -n argocd edit deployments.apps argocd-server</code>，增加运行 <code>insecure</code> 运行参数，取消该限制。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">containers:</span><br><span class="hljs-attr">- command:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">argocd-server</span><br><span class="hljs-bullet">  -</span> <span class="hljs-bullet">--insecure</span><br></code></pre></td></tr></table></figure><p>然后来查看服务地址</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl -n argocd get svc</span><br>NAME                                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE<br>argocd-applicationset-controller          ClusterIP   10.98.109.34     &lt;none&gt;        7000/TCP,8080/TCP            18m<br>argocd-dex-server                         ClusterIP   10.108.192.57    &lt;none&gt;        5556/TCP,5557/TCP,5558/TCP   18m<br>argocd-metrics                            ClusterIP   10.103.219.23    &lt;none&gt;        8082/TCP                     18m<br>argocd-notifications-controller-metrics   ClusterIP   10.105.150.33    &lt;none&gt;        9001/TCP                     18m<br>argocd-redis                              ClusterIP   10.96.158.98     &lt;none&gt;        6379/TCP                     18m<br>argocd-repo-server                        ClusterIP   10.111.153.43    &lt;none&gt;        8081/TCP,8084/TCP            18m<br>argocd-server                             ClusterIP   10.98.129.33     &lt;none&gt;        80/TCP,443/TCP               18m<br>argocd-server-metrics                     ClusterIP   10.110.107.116   &lt;none&gt;        8083/TCP                     18m<br></code></pre></td></tr></table></figure><p>获取密码 <code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d; echo</code></p><p>下载 <a href="https://github.com/argoproj/argo-cd/releases/latest" target="_blank" rel="noopener">argocd cli</a> 可以通过命令行直接控制</p><p>cli 登录<br></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> argocd login 10.98.129.33 --username admin</span><br>Password:<br>'admin:login' logged in successfully<br>Context '10.98.129.33' updated<br></code></pre></td></tr></table></figure><p></p><p>cli 修改密码<br></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> argocd account update-password</span><br>*** Enter password of currently logged in user (admin):<br>*** Enter new password for user admin:<br>*** Confirm new password for user admin:<br>Password updated<br>Context '10.98.129.33' updated<br></code></pre></td></tr></table></figure><p></p><p>给 <code>argocd-server Service</code> 加个 <code>Ingress</code> 再配个负载均衡加个二级域名解析，就直接略过了，可以参考之前的文章。也可以通过暴露 <code>Node port</code> 方式访问。</p><p><img src="/images/argocd1.jpg" alt="dashboard"></p><p>登录之后 Applications 还是空的，目前也没有中文界面。</p><h2 id="创建-Projects"><a href="#创建-Projects" class="headerlink" title="创建 Projects"></a>创建 Projects</h2><p>先创建一个 Projects，<code>SOURCE REPOSITORIES</code> 可以限制仓库来源，<code>DESTINATIONS</code> 部署到的目标集群限制，<code>CLUSTER RESOURCE</code>、<code>NAMESPACE RESOURCE</code> 资源权限限制，先都直接给 * 想细分可以直接细化。<br><img src="/images/argocd2.jpg" alt="NEW PROJECT"><br><img src="/images/argocd3.jpg" alt="NEW PROJECT"></p><h2 id="创建-repo"><a href="#创建-repo" class="headerlink" title="创建 repo"></a>创建 repo</h2><p>可以选择 <code>ssh</code>, <code>https</code> 方式，在配置中加上 gitops 仓库地址，Project 选择刚才添加的 nico。<br><img src="/images/argocd9.jpg" alt="Connect Repo using HTTPS"></p><h2 id="创建-App"><a href="#创建-App" class="headerlink" title="创建 App"></a>创建 App</h2><p>在 Applications 中新增 App，可以通过 <code>EDIT AS YAML</code> 直接编辑。<br><img src="/images/argocd4.jpg" alt="NEW APP"><br>SYNC POLICY 同步策略，可以选择自动或手动</p><ul><li>PRUNE RESOURCES 是否清理未定义资源，参考 <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/#no-prune-resources" target="_blank" rel="noopener">No Prune Resources</a></li><li>SELF HEAL 自动修复，当集群中应用与定义不符时自动修复</li></ul><p>SYNC OPTIONS</p><ul><li>SKIP SCHEMA VALIDATION 跳过验证也就是 <code>kubectl apply --validate=false</code></li><li>AUTO-CREATE NAMESPACE 没啥可说的</li><li>PRUNE LAST 对资源进行修剪时建议勾选，参考 <a href="https://github.com/argoproj/argo-cd/issues/5080" target="_blank" rel="noopener">Allow resource pruning to be an implicit final wave of a sync operation</a></li><li>APPLY OUT OF SYNC ONLY 只同步不同步的资源。目前，当使用自动同步 ArgoCD 进行同步时，会应用应用程序中的每个对象。 对于包含数千个对象的应用程序，这需要相当长的时间，并对 api 服务器施加过大的压力。</li><li>RESPECT IGNORE DIFFERENCES 是否在同步的时候也忽略 <code>spec.ignoreDifferences</code> 差异配置。默认情况下 <code>spec.ignoreDifferences</code> 配置仅用于计算实时状态和期望状态之间的差异。</li></ul><p>PRUNE PROPAGATION POLICY 集联删除策略，分为三种。文档上看默认是 <code>background</code> 详情参考 <a href="https://kubernetes.io/docs/concepts/architecture/garbage-collection/#cascading-deletion" target="_blank" rel="noopener">cascading-deletion</a>。</p><ul><li>foreground 前台，先标记删除资源本身，然后删除所有关联子资源，再删除资源本身。</li><li>background 后台，直接删除资源本身，再处理关联子资源。</li><li>orphan 孤儿模式，直接删除资源本身，子资源垃圾回收器处理。</li></ul><p>REPLACE 使用 <code>kubectl replace/create</code> 代替 <code>kubectl apply</code><br>RETRY 重试配置</p><p><img src="/images/argocd5.jpg" alt="NEW APP"><br>Path 可指定要配置文件目录<br>最下面为部署时的工具配置，可以选择 <code>Directory</code>、<code>Helm</code>、<code>Kustomize</code>、<code>Plugin</code>。</p><p><img src="/images/argocd6.jpg" alt="创建完成"></p><h2 id="同步时机"><a href="#同步时机" class="headerlink" title="同步时机"></a>同步时机</h2><p>argocd 默认每三分钟会检查一次仓库是否有新的修改，如果想要实时更新可以通过 webhook 通知 argocd。但是目前 argocd webhook 仅支持 GitHub, Bitbucket, GitLab, Gogs。对于未支持的 git 服务配置 webhook 会返回 <code>Unknown webhook event</code> <a href="https://github.com/argoproj/argo-cd/blob/470176b77a695eea55bf60d20a18b30f99c7625e/util/webhook/webhook.go#L408" target="_blank" rel="noopener">见此</a>，clone 下来可以自己适配下 onedev webhook 也不算太麻烦。当然也可以在页面手动更新。<br>默认轮询间隔配置可以通过 <code>argocd-cm</code> <code>Configmap</code> 的 <code>timeout.reconciliation</code> 修改，如果想禁用设成 0s 即可，这里我改成 30s 看下效果。yaml 参考 <a href="https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml" target="_blank" rel="noopener">argocd-cm.yaml</a><br></p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl edit configmap argocd-cm -n argocd<br></code></pre></td></tr></table></figure><p></p><p>现在我修改下 <code>wx-msg-push</code> 代码，push 一个新 tag，就会触发整个流程。最终通过 argocd 部署新版本应用，在 k8s 中对该应用进行修改导致与配置定义不一致的行为都会自动修复。<br><img src="/images/argocd7.jpg" alt="APP"></p><p>可以看到部署的历史详情，还可以进行回滚，回滚会禁用自动同步，可以再手动开启。<br><img src="/images/argocd8.jpg" alt="History and rollback"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文实践了 <code>Argo CD</code> 全程基本通过 web ui 操作，也可以通过 <code>cli</code> 操作。其中 webhook 只支持几个大牌 git，如果使用未支持的 git 服务，建议自行适配，如果不想侵入修改也可以编写远程脚本执行 <code>argocd cli</code> 来触发，达到同样的效果。<code>timeout.reconciliation</code> 建议直接禁用就好了。<br><code>Argo CD</code> 不止于此，还有更多使用姿势及配置请通过官方文档了解。</p><ul><li><a href="https://argo-cd.readthedocs.io/en/stable/" target="_blank" rel="noopener">Argo CD - Declarative GitOps CD for Kubernetes</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;书接上文 &lt;a href=&quot;https://ibelieving.io/2022/07/12/onedev/&quot;&gt;OneDev 自建 Git 
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://ibelieving.io/tags/k8s/"/>
    
      <category term="devops" scheme="https://ibelieving.io/tags/devops/"/>
    
      <category term="gitops" scheme="https://ibelieving.io/tags/gitops/"/>
    
  </entry>
  
  <entry>
    <title>OneDev 自建 Git 服务和 CI/CD</title>
    <link href="https://ibelieving.io/2022/07/12/onedev/"/>
    <id>https://ibelieving.io/2022/07/12/onedev/</id>
    <published>2022-07-12T14:30:00.000Z</published>
    <updated>2022-07-12T14:44:18.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天介绍一个可以自建的开源 Git 服务 <a href="https://github.com/theonedev/onedev" target="_blank" rel="noopener">OneDev</a>, 功能强大，资源占用少，国人 Java 开发。</p><ul><li>开箱即用的符号跳转、符号搜索</li><li>全功能的 CI/CD，支持 GUI</li><li>强大易用的 Commit/Issue/Build/Pull Request 查询语言</li><li>代码标注和讨论</li><li>更多功能特性看官网说明</li></ul><p>目前不足是全英文，文档简洁，还不知道什么时候支持中文，也不算什么大事。另外小 Bug 多，不过作者修复神速。</p><h2 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h2><p>运行环境 <code>k8s v1.21.5</code>，容器运行时 <code>containerd</code>。</p><p>安装方式直接参考<a href="https://code.onedev.io/projects/162/files/main/pages/installation-guide.md" target="_blank" rel="noopener">官方文档</a> <code>helm</code> 装就完事，除了在 <code>k8s</code> 运行也可以直接 <code>docker run</code> 和裸机跑。<br><code>helm</code> 安装完成会创建一个 <code>onedev</code> 的 <code>service</code> <code>type</code> 是 <code>LoadBalancer</code>，由于我使用 <code>apisix ingress</code> 所以直接改成 <code>ClusterIP</code> 然后外面再套负载均衡走流量。细节不展开了可以参考<a href="https://ibelieving.io/2022/07/06/apache_apisix_ingress/">实践 Apache APISIX Ingress</a>。</p><h2 id="符号跳转、搜索"><a href="#符号跳转、搜索" class="headerlink" title="符号跳转、搜索"></a>符号跳转、搜索</h2><p>支持 Java, JavaScript, C, C++, CSharp, Go, PHP, Python, CSS, SCSS, LESS and R 语言，IDE 级别的功能。<br>据作者说使用 ANTLR 分析主流语言的语法，并提取符号定义进行增量存储，速度快，占用空间小。</p><p><img src="/images/onedev1.jpg" alt="符号搜索"><br><img src="/images/onedev2.jpg" alt="符号跳转"></p><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><p>直接来体验下 CI/CD，测试项目依然是我的 <a href="https://github.com/zyh94946/wx-msg-push" target="_blank" rel="noopener">wx-msg-push</a>。</p><p>先创建一个 yaml 配置文件，在 k8s 中 apply，这个是 onedev 在 k8s 中部署应用使用。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">  name:</span> <span class="hljs-string">gitops-onedev</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-attr">- apiGroups:</span> <span class="hljs-string">[""]</span><br><span class="hljs-attr">  resources:</span> <span class="hljs-string">["services"]</span><br><span class="hljs-attr">  verbs:</span> <span class="hljs-string">["get",</span> <span class="hljs-string">"create"</span><span class="hljs-string">]</span><br><span class="hljs-attr">- apiGroups:</span> <span class="hljs-string">["apps"]</span><br><span class="hljs-attr">  resources:</span> <span class="hljs-string">["deployments"]</span><br><span class="hljs-attr">  verbs:</span> <span class="hljs-string">["get",</span> <span class="hljs-string">"patch"</span><span class="hljs-string">,</span> <span class="hljs-string">"create"</span><span class="hljs-string">]</span><br></code></pre></td></tr></table></figure><p>然后在 <code>Administration</code> -&gt; <code>Job Executors</code> 中创建一个 Build 执行方式。类型可以选远程docker、远程shell、k8s。我这里还是选k8s，也可以指定运行节点，<code>Cluster Role</code> 写上刚才创建的 <code>gitops-onedev</code>，镜像仓库用哪写哪就可以，我这里是阿里云。<br><img src="/images/onedev3.jpg" alt="Job Executors"></p><p>在项目配置中加上镜像仓库的账号信息。这里 ali-repo-auth 通过 <code>echo -n &quot;username:passwd&quot; | base64</code> 生成。<br><img src="/images/onedev4.jpg" alt="Job Secrets"></p><p>然后在项目中点击 <code>.onedev-buildspec.yml</code> 进入 build 配置页面。<br><img src="/images/onedev5.jpg" alt=".onedev-buildspec.ym"></p><p><img src="/images/onedev6.jpg" alt="Job"></p><p>通过这个页面可以一步步配置 CI/CD。 可以设置触发参数、触发逻辑比如<code>push branch</code>或者<code>push tag</code>，可以设置从属关系、重试、超时、缓存等。<br>我这里 CI 阶段由 push tag 触发，具体分为四个 Step</p><ul><li>checkout 代码检出</li><li>make 编译可执行文件</li><li>build &amp; push 构建镜像推送</li><li>publish artifact 发布制品，各平台的可执行文件包</li></ul><p>通过 <code>View Source</code> 可以看到实际生成的配置文件。<br>分享下我现在的配置文件，<code>Job Executor</code> 就是刚才创建的 Build 执行方式。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-number">16</span><br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">- name:</span> <span class="hljs-string">ci</span><br><span class="hljs-attr">  jobExecutor:</span> <span class="hljs-string">k8s</span><br><span class="hljs-attr">  steps:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-type">!CheckoutStep</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">checkout</span><br><span class="hljs-attr">    cloneCredential:</span> <span class="hljs-type">!DefaultCredential</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">    withLfs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    withSubmodules:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    condition:</span> <span class="hljs-string">ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL</span><br><span class="hljs-bullet">  -</span> <span class="hljs-type">!CommandStep</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">make</span><br><span class="hljs-attr">    runInContainer:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">zyh94946/golang:v1.18.3</span><br><span class="hljs-attr">    interpreter:</span> <span class="hljs-type">!ShellInterpreter</span><br><span class="hljs-attr">      shell:</span> <span class="hljs-string">sh</span><br><span class="hljs-attr">      commands:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">make</span> <span class="hljs-string">release</span><br><span class="hljs-attr">    useTTY:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    condition:</span> <span class="hljs-string">ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL</span><br><span class="hljs-bullet">  -</span> <span class="hljs-type">!CommandStep</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">build</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">push</span><br><span class="hljs-attr">    runInContainer:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">zyh94946/kaniko:v1.8.1-debug</span><br><span class="hljs-attr">    interpreter:</span> <span class="hljs-type">!ShellInterpreter</span><br><span class="hljs-attr">      shell:</span> <span class="hljs-string">/busybox/sh</span><br><span class="hljs-attr">      commands:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">echo</span> <span class="hljs-string">"&#123;\"auths\":&#123;\"@secret:ali-repo-url@\":&#123;\"auth\":\"@secret:ali-repo-auth@\"&#125;&#125;&#125;"</span><br>        <span class="hljs-string">&gt; /kaniko/.docker/config.json</span><br><span class="hljs-string">      - /kaniko/executor --context "/onedev-build/workspace" --dockerfile "/onedev-build/workspace/Dockerfile"</span><br><span class="hljs-string">        --destination "@secret:ali-repo-url@/zyh94946/nico:wx-msg-push-@tag@"</span><br><span class="hljs-string"></span><span class="hljs-attr">    useTTY:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    condition:</span> <span class="hljs-string">ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL</span><br><span class="hljs-bullet">  -</span> <span class="hljs-type">!PublishArtifactStep</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">publish</span> <span class="hljs-string">artifact</span><br><span class="hljs-attr">    artifacts:</span> <span class="hljs-string">'*.zip'</span><br><span class="hljs-attr">    condition:</span> <span class="hljs-string">ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL</span><br><span class="hljs-attr">  triggers:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-type">!TagCreateTrigger</span><br><span class="hljs-attr">    tags:</span> <span class="hljs-string">v*</span><br><span class="hljs-attr">  retryCondition:</span> <span class="hljs-string">never</span><br><span class="hljs-attr">  maxRetries:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">  retryDelay:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">  cpuRequirement:</span> <span class="hljs-number">250</span><br><span class="hljs-attr">  memoryRequirement:</span> <span class="hljs-number">256</span><br><span class="hljs-attr">  timeout:</span> <span class="hljs-number">3600</span><br><span class="hljs-attr">- name:</span> <span class="hljs-string">cd</span><br><span class="hljs-attr">  jobExecutor:</span> <span class="hljs-string">k8s</span><br><span class="hljs-attr">  steps:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-type">!CheckoutStep</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">checkout</span><br><span class="hljs-attr">    cloneCredential:</span> <span class="hljs-type">!DefaultCredential</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">    withLfs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    withSubmodules:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    condition:</span> <span class="hljs-string">ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL</span><br><span class="hljs-bullet">  -</span> <span class="hljs-type">!CommandStep</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">deploy</span><br><span class="hljs-attr">    runInContainer:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">zyh94946/kubectl:v1.21.5</span><br><span class="hljs-attr">    interpreter:</span> <span class="hljs-type">!DefaultInterpreter</span><br><span class="hljs-attr">      commands:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">'echo "tag: @tag@"'</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">'if [ "@tag@" != "" ]; then '</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">"\tsed -i \"s/#tag#/@tag@/g\" k8s.deployment.yaml"</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">"\tkubectl apply -f k8s.deployment.yaml"</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">fi;</span><br><span class="hljs-attr">    useTTY:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    condition:</span> <span class="hljs-string">ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL</span><br><span class="hljs-attr">  jobDependencies:</span><br><span class="hljs-attr">  - jobName:</span> <span class="hljs-string">ci</span><br><span class="hljs-attr">    requireSuccessful:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    artifacts:</span> <span class="hljs-string">'**'</span><br><span class="hljs-attr">  retryCondition:</span> <span class="hljs-string">never</span><br><span class="hljs-attr">  maxRetries:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">  retryDelay:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">  cpuRequirement:</span> <span class="hljs-number">250</span><br><span class="hljs-attr">  memoryRequirement:</span> <span class="hljs-number">256</span><br><span class="hljs-attr">  timeout:</span> <span class="hljs-number">3600</span><br></code></pre></td></tr></table></figure><p>由于 k8s 集群容器运行时采用 <code>containerd</code> 所以无法通过 <code>docker</code> 正常构建和推送。这里我通过 google 开源的容器工具 <a href="https://github.com/GoogleContainerTools/kaniko" target="_blank" rel="noopener">kaniko</a> 构建和推送镜像。<br>该工具镜像地址为 <code>gcr.io/kaniko-project/executor:debug</code>，建议用 <code>debug</code> 版可以进入 <code>shell</code>，由于原镜像地址太慢自行下载后传到了 dockerhub 上 <code>zyh94946/kaniko:v1.8.1-debug</code>。使用方式也很简单，一条命令就完成构建和推送了，具体看上面的配置。</p><p>CD 部分只有两个 Step，代码检出和应用部署，部署中的镜像就是 CI 中创建的。CD 附属于 CI，当 CI 执行成功后手动触发 CD，当然也可以在 CI 完成后自动开始 CD 任务。<br><img src="/images/onedev7.jpg" alt="在 build 中可以看到日志"></p><p><img src="/images/onedev8.jpg" alt="在流水线中可以看到当前执行的是哪一个"></p><p><img src="/images/onedev9.jpg" alt="生成的制品"></p><p><img src="/images/onedev10.jpg" alt="CD"></p><p>关于版本回退，可以从 k8s 中执行 <code>Roll Back</code>，或者在 onedev 中单独执行一个指定 tag 的 CD 重新部署。</p><p><img src="/images/onedev11.jpg" alt="Roll Back"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是在 onedev 中的 CI/CD 应用，通过编译可执行文件，构建镜像推送，最后用 kubectl 在 k8s 中部署。<br>其中通过 kubectl 部署应用，赋予了 onedev 对 k8s 的操作权限。另外还有一种方式采用 <code>Argo CD</code> 拉取配置来更新，onedev 只做 CI 的事，这样即使采用在 k8s 集群外的 git 服务也能有较好的安全性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;今天介绍一个可以自建的开源 Git 服务 &lt;a href=&quot;https://github.com/theonedev/onedev&quot; tar
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://ibelieving.io/tags/k8s/"/>
    
      <category term="git" scheme="https://ibelieving.io/tags/git/"/>
    
      <category term="devops" scheme="https://ibelieving.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>实践 Apache APISIX Ingress</title>
    <link href="https://ibelieving.io/2022/07/05/apache_apisix_ingress/"/>
    <id>https://ibelieving.io/2022/07/05/apache_apisix_ingress/</id>
    <published>2022-07-05T02:00:00.000Z</published>
    <updated>2022-07-05T02:28:09.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Apache APISIX 是一个动态、实时、高性能的 API 网关。基于 Nginx 和 Etcd 实现。</p><p>作为 API 网关，APISIX 提供了灵活插件机制、动态上游、动态路由、灰度发布、熔断限流、身份认证、可观测性、Serverless、Wasm等功能。可以处理L4、L7层的流量支持HTTP、HTTPS、TCP、UDP、MQTT、gRPC等协议。</p><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>在 kubesphere 中创建一个 Workspace，添加 APISIX Helm Chart 仓库 <a href="https://charts.apiseven.com/。" target="_blank" rel="noopener">https://charts.apiseven.com/。</a></p><p><img src="/images/apisix1.jpg" alt="Add App Repository"></p><p>然后新建一个 ingress-apisix 的 projects，也就是 namespace。在该 project 下创建一个 apisix App，选择刚才添加的仓库。创建 apisix 会同时创建 APISIX Gateway + Dashboard + Ingress Controller。</p><p><img src="/images/apisix2.jpg" alt="Create App"></p><p>版本选择 0.10.0 [2.14.1]</p><p><img src="/images/apisix3.jpg" alt="Create App"></p><p>我最终的配置：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br><span class="hljs-attr">  imagePullSecrets:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">apisix:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  enableIPv6:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  setIDFromPodUID:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  customLuaSharedDicts:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">  luaModuleHook:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    luaPath:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">    hookPoint:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">    configMapRef:</span><br><span class="hljs-attr">      name:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">      mounts:</span><br><span class="hljs-attr">        - key:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">          path:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  enableCustomizedConfig:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  customizedConfig:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  image:</span><br><span class="hljs-attr">    repository:</span> <span class="hljs-string">apache/apisix</span><br><span class="hljs-attr">    pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><span class="hljs-attr">    tag:</span> <span class="hljs-number">2.14</span><span class="hljs-number">.1</span><span class="hljs-bullet">-alpine</span><br><span class="hljs-attr">  kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">  replicaCount:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">  podAnnotations:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  podSecurityContext:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  securityContext:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  podDisruptionBudget:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    minAvailable:</span> <span class="hljs-number">90</span><span class="hljs-string">%</span><br><span class="hljs-attr">    maxUnavailable:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">  resources:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  nodeSelector:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  tolerations:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">  affinity:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  podAntiAffinity:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  timezone:</span> <span class="hljs-string">Asia/Shanghai</span><br><span class="hljs-attr">  extraEnvVars:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">nameOverride:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">fullnameOverride:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">gateway:</span><br><span class="hljs-attr">  type:</span> <span class="hljs-string">NodePort</span><br><span class="hljs-attr">  externalTrafficPolicy:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">  externalIPs:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">  http:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    servicePort:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">    containerPort:</span> <span class="hljs-number">9080</span><br><span class="hljs-attr">  tls:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    servicePort:</span> <span class="hljs-number">443</span><br><span class="hljs-attr">    containerPort:</span> <span class="hljs-number">9443</span><br><span class="hljs-attr">    existingCASecret:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">    certCAFilename:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">    http2:</span><br><span class="hljs-attr">      enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  stream:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    only:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    tcp:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">    udp:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">  ingress:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    annotations:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">    hosts:</span><br><span class="hljs-attr">      - host:</span> <span class="hljs-string">apisix.local</span><br><span class="hljs-attr">        paths:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">    tls:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">admin:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  type:</span> <span class="hljs-string">ClusterIP</span><br><span class="hljs-attr">  externalIPs:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">  port:</span> <span class="hljs-number">9180</span><br><span class="hljs-attr">  servicePort:</span> <span class="hljs-number">9180</span><br><span class="hljs-attr">  cors:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  credentials:</span><br><span class="hljs-attr">    admin:</span> <span class="hljs-string">edd1c9f034335f136f87ad84b625c8f1</span><br><span class="hljs-attr">    viewer:</span> <span class="hljs-number">4054</span><span class="hljs-string">f7cf07e344346cd3f287985e76a2</span><br><span class="hljs-attr">  allow:</span><br><span class="hljs-attr">    ipList:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/0</span><br><span class="hljs-attr">plugins:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">api-breaker</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">authz-keycloak</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">basic-auth</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">batch-requests</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">consumer-restriction</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">cors</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">echo</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">fault-injection</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">grpc-transcode</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">hmac-auth</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">http-logger</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">ip-restriction</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">ua-restriction</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">jwt-auth</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">kafka-logger</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">key-auth</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">limit-conn</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">limit-count</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">limit-req</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">node-status</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">openid-connect</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">authz-casbin</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">prometheus</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">proxy-cache</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">proxy-mirror</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">proxy-rewrite</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">redirect</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">referer-restriction</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">request-id</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">request-validation</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">response-rewrite</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">serverless-post-function</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">serverless-pre-function</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">sls-logger</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">syslog</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">tcp-logger</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">udp-logger</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">uri-blocker</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">wolf-rbac</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">zipkin</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">traffic-split</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">gzip</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">real-ip</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">ext-plugin-pre-req</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">ext-plugin-post-req</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">server-info</span><br><span class="hljs-attr">stream_plugins:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">mqtt-proxy</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">ip-restriction</span><br><span class="hljs-bullet">  -</span> <span class="hljs-string">limit-conn</span><br><span class="hljs-attr">pluginAttrs:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">extPlugin:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  cmd:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">/path/to/apisix-plugin-runner/runner</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">run</span><br><span class="hljs-attr">customPlugins:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  luaPath:</span> <span class="hljs-string">/opts/custom_plugins/?.lua</span><br><span class="hljs-attr">  plugins:</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">      attrs:</span><br><span class="hljs-attr">        export_addr:</span><br><span class="hljs-attr">          ip:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">          port:</span> <span class="hljs-number">9091</span><br><span class="hljs-attr">      configMap:</span><br><span class="hljs-attr">        name:</span> <span class="hljs-string">prometheus</span><br><span class="hljs-attr">        mounts:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">updateStrategy:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">extraVolumes:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">extraVolumeMounts:</span> <span class="hljs-string">[]</span><br><span class="hljs-attr">discovery:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  registry:</span> <span class="hljs-literal">null</span><br><span class="hljs-attr">logs:</span><br><span class="hljs-attr">  enableAccessLog:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  accessLog:</span> <span class="hljs-string">/dev/stdout</span><br><span class="hljs-attr">  accessLogFormat:</span> <span class="hljs-string">&gt;-</span><br>    <span class="hljs-string">$remote_addr</span> <span class="hljs-bullet">-</span> <span class="hljs-string">$remote_user</span> <span class="hljs-string">[$time_local]</span> <span class="hljs-string">$http_host</span> <span class="hljs-string">\"$request\"</span> <span class="hljs-string">$status</span><br>    <span class="hljs-string">$body_bytes_sent</span> <span class="hljs-string">$request_time</span> <span class="hljs-string">\"$http_referer\"</span> <span class="hljs-string">\"$http_user_agent\"</span><br>    <span class="hljs-string">$upstream_addr</span> <span class="hljs-string">$upstream_status</span> <span class="hljs-string">$upstream_response_time</span><br>    <span class="hljs-string">\"$upstream_scheme://$upstream_host$upstream_uri\"</span><br><span class="hljs-attr">  accessLogFormatEscape:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">  errorLog:</span> <span class="hljs-string">/dev/stderr</span><br><span class="hljs-attr">  errorLogLevel:</span> <span class="hljs-string">warn</span><br><span class="hljs-attr">dns:</span><br><span class="hljs-attr">  resolvers:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br><span class="hljs-attr">  validity:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">  timeout:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">initContainer:</span><br><span class="hljs-attr">  image:</span> <span class="hljs-string">busybox</span><br><span class="hljs-attr">  tag:</span> <span class="hljs-number">1.28</span><br><span class="hljs-attr">autoscaling:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  minReplicas:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">  maxReplicas:</span> <span class="hljs-number">100</span><br><span class="hljs-attr">  targetCPUUtilizationPercentage:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">  targetMemoryUtilizationPercentage:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">configurationSnippet:</span><br><span class="hljs-attr">  main:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  httpStart:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  httpEnd:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  httpSrv:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  httpAdmin:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  stream:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">serviceMonitor:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">  namespace:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  name:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  interval:</span> <span class="hljs-number">15</span><span class="hljs-string">s</span><br><span class="hljs-attr">  path:</span> <span class="hljs-string">/apisix/prometheus/metrics</span><br><span class="hljs-attr">  metricPrefix:</span> <span class="hljs-string">apisix_</span><br><span class="hljs-attr">  containerPort:</span> <span class="hljs-number">9091</span><br><span class="hljs-attr">  labels:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  annotations:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">etcd:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  host:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">'http://etcd.host:2379'</span><br><span class="hljs-attr">  prefix:</span> <span class="hljs-string">/apisix</span><br><span class="hljs-attr">  timeout:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">  auth:</span><br><span class="hljs-attr">    rbac:</span><br><span class="hljs-attr">      create:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">      user:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">      password:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">    tls:</span><br><span class="hljs-attr">      enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">      existingSecret:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">      certFilename:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">      certKeyFilename:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">      verify:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">      sni:</span> <span class="hljs-string">''</span><br><span class="hljs-attr">  service:</span><br><span class="hljs-attr">    port:</span> <span class="hljs-number">2379</span><br><span class="hljs-attr">  replicaCount:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">dashboard:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  service:</span><br><span class="hljs-attr">    type:</span> <span class="hljs-string">NodePort</span><br><span class="hljs-attr">ingress-controller:</span><br><span class="hljs-attr">  enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  config:</span><br><span class="hljs-attr">    apisix:</span><br><span class="hljs-attr">      serviceNamespace:</span> <span class="hljs-string">ingress-apisix</span><br><span class="hljs-attr">  serviceMonitor:</span><br><span class="hljs-attr">    enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    namespace:</span> <span class="hljs-string">ingress-apisix</span><br><span class="hljs-attr">    interval:</span> <span class="hljs-number">15</span><span class="hljs-string">s</span><br></code></pre></td></tr></table></figure><p>慢慢等待相关镜像下载运行完成。找到 <code>apisix-dashboard</code> Service 的 <code>Node port</code> 在浏览器中打开进入 dashboard，默认用户名、密码都是 <code>admin</code>。</p><h2 id="创建一个-Ingress"><a href="#创建一个-Ingress" class="headerlink" title="创建一个 Ingress"></a>创建一个 Ingress</h2><p>举例为我的 <code>wx-msg-push</code> 企业微信消息推送服务创建 <code>Ingress</code>。先创建一个 <code>ClusterIP</code> 类型的 <code>Service</code>，然后创建一个 <code>Ingress</code>。<br><img src="/images/apisix4.jpg" alt="设置 Ingress 路由规则"></p><p><code>kubernetes.io/ingress.class</code> 设为 <code>apisix</code><br><img src="/images/apisix5.jpg" alt="Metadata"></p><p>创建完成，在 <code>apisix-dashboard</code> 上 <code>Route</code>、<code>Upstream</code> 下可以看到对应的条目。<code>apisix-dashboard</code> 也是支持切换中文的。<br><img src="/images/apisix6.jpg" alt="Upstream"><br><code>Upstream</code> 节点直接就到 <code>Pod IP</code>，<code>Pod</code> 有变化 <code>Upstream</code> 会动态更新。</p><p>通过 <code>ingress-apisix</code> Project 下 <code>apisix-gateway</code> Service 的 <code>NodePort</code> 和路由规则里面的域名访问 <code>wx-msg-push</code> 服务。<br>我这里的域名是 <code>msg-push.ibelieving.io</code> 解析到 k8s 节点，然后通过 <code>msg-push.ibelieving.io:31202</code> 访问 <code>wx-msg-push</code> 服务。</p><p>这是一个简陋的 Ingress 使用例子。正经 k8s 环境下集群节点理论是不提供公网访问的，前端应该配置云负载均衡器作为公网入口，或者自行搭建高可用负载均衡，然后流量再进入 Ingress。而且直接访问 <code>Ingress</code> 只能使用高位端口。</p><h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><p>先创建两个 <code>wx-msg-push</code> Deployment、Service，一个 v1、v2。v2 作为新版，定义一个 <code>ApisixRoute</code> yaml，将三分之一流量路由到 v2，将三分之二流量路由到 v1。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apisix.apache.org/v2beta3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ApisixRoute</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">  namespace:</span> <span class="hljs-string">nico</span><br><span class="hljs-attr">  name:</span> <span class="hljs-string">wx-msg-push</span><br><span class="hljs-attr">spec:</span><br><span class="hljs-attr">  http:</span><br><span class="hljs-attr">  - name:</span> <span class="hljs-string">route-rule</span><br><span class="hljs-attr">    match:</span><br><span class="hljs-attr">      hosts:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">msg-push.ibelieving.io</span><br><span class="hljs-attr">      paths:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">/*</span><br><span class="hljs-attr">    backends:</span><br><span class="hljs-attr">    - serviceName:</span> <span class="hljs-string">wx-msg-push-v1</span><br><span class="hljs-attr">      servicePort:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">      weight:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">    - serviceName:</span> <span class="hljs-string">wx-msg-push-v2</span><br><span class="hljs-attr">      servicePort:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">      weight:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl apply -f wx-msg-push-route.yaml</span><br></code></pre></td></tr></table></figure><p>通过 <code>curl</code> 进行测试，查看容器日志可以看到请求以三分之一概率进入到了 v2。正式业务使用时对新版本进行灰度测试，分少部分流量，验证通过后慢慢加大权重比例，直至全量切换。<br>这个路由配置可以从 <code>apisix-dashboard</code> 上看到。这是根据不同权重进行分流，也可以附加自定义规则进行分流。<br><img src="/images/apisix7.jpg" alt="Route"></p><p>可以看到 apisix 对 yaml 中配置进行了处理，使用 <code>traffic-split</code> 插件实现了流量分流，<code>upstream_id</code> 对应着 <code>Upstream</code> 中的上游配置，根据 <code>Service</code> 生成。<br>这个路由规则也可以通过 <code>apisix-dashboard</code> 的交互界面创建，还可以通过 <code>apisix admin api</code> 创建非常方便。<br><img src="/images/apisix8.jpg" alt="Route"></p><p>这篇文章只是 <code>apisix</code> 的一小部分，另外还有很多功能、插件可以使用。通过插件、Consumer 可以实现用户登录、权限认证、对不同的用户进行单独的限制。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>建议阅读</p><ul><li><a href="https://apisix.apache.org/docs/apisix/architecture-design/apisix/" target="_blank" rel="noopener">Apache APISIX : Software Architecture</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Apache APISIX 是一个动态、实时、高性能的 API 网关。基于 Nginx 和 Etcd 实现。&lt;/p&gt;&lt;p&gt;作为 API 网关
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://ibelieving.io/tags/k8s/"/>
    
      <category term="APISIX" scheme="https://ibelieving.io/tags/APISIX/"/>
    
  </entry>
  
  <entry>
    <title>KubeSphere k8s 集群管理</title>
    <link href="https://ibelieving.io/2022/06/25/kubesphere/"/>
    <id>https://ibelieving.io/2022/06/25/kubesphere/</id>
    <published>2022-06-25T12:00:00.000Z</published>
    <updated>2022-06-25T13:52:35.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>KubeSphere 是一个 k8s 集群管理平台，可以管理多云多集群，进行统一的应用分发和运维管理，避免云厂商绑定。提供了运维友好的操作界面，支持多租户，DevOps，服务网格，多种监控纬度。</p><p>目前稳定版是 KubeSphere v3.2.1，我之前装的 k8s 集群是 v1.22.7，KubeSphere 目前对 v1.22 是实验性支持，为了避免踩坑先把 k8s 集群重装了 v1.21.5。</p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>KubeSphere 的安装步骤就省略了，直接按官网的走就可以。记得要给 k8s 配默认 StorageClass，生产环境建议直接上云存储或者 rook+ceph，我为了节省资源直接就用 NFS 了。</p><p>NFS 安装配置参考：<br><a href="https://linuxize.com/post/how-to-install-and-configure-an-nfs-server-on-ubuntu-20-04/" target="_blank" rel="noopener">How to Install and Configure an NFS Server on Ubuntu 20.04</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-20-04/" target="_blank" rel="noopener">How To Set Up an NFS Mount on Ubuntu 20.04</a></p><p>KubeSphere 安装：<br><a href="https://kubesphere.io/zh/docs/installing-on-kubernetes/introduction/overview/" target="_blank" rel="noopener">在 Kubernetes 上安装 KubeSphere</a></p><p>安装完成后随便找个节点访问 30880 端口进入 dashboard。</p><p>登录之后进入 defult 集群，在配置多集群前只有这一个。默认展示当前集群资源用量。</p><p><img src="/images/kk1.jpg" alt="default Nodes"></p><p>界面可以切换中文显示。Projects 等同于 k8s 中的 namespace 概念，Projects 之上还有一层 workspace，用于多租户资源、计费隔离，当然也有用户权限管理。</p><p>Nodes 可以看到集群节点状态<br><img src="/images/kk2.jpg" alt="Nodes"></p><p>看下 Node 详情<br><img src="/images/kk3.jpg" alt="Node detail"></p><p>集群监控<br><img src="/images/kk4.jpg" alt="Cluster Status"></p><p>Workloads<br><img src="/images/kk8.jpg" alt="Workloads"></p><p>尝试在 Workloads 中创建一个 Deployment。<br><img src="/images/kk5.jpg" alt="Create Deployment"></p><p>选择镜像，设置资源限制<br><img src="/images/kk6.jpg" alt="Create Deployment"></p><p>端口暴露，环境变量，健康检查，容器安全设置等等<br><img src="/images/kk7.jpg" alt="Create Deployment"></p><p>滚动更新，调度规则等等，就不过多展示了，可以选择这种引导式配置，也可以直接用 yaml 部署非常方便。</p><p>Deployment 详情<br><img src="/images/kk9.jpg" alt="Deployment"></p><p>扩缩容、版本回滚都很方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;KubeSphere 是一个 k8s 集群管理平台，可以管理多云多集群，进行统一的应用分发和运维管理，避免云厂商绑定。提供了运维友好的操作界
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://ibelieving.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04 下部署 k8s v1.22.7 集群</title>
    <link href="https://ibelieving.io/2022/04/03/ubuntu_k8s/"/>
    <id>https://ibelieving.io/2022/04/03/ubuntu_k8s/</id>
    <published>2022-04-03T06:00:00.000Z</published>
    <updated>2022-03-31T02:06:49.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>虽然是一篇 k8s 的部署文，但也充满了曲折。归其原因也是基础一般。 本文并未涉及 k8s 多主高可用，可参考其它文章通过 ipvs 来实现。</p><p>首先通过上次的文章组网 <a href="https://ibelieving.io/2022/03/13/netmaker/">通过 Netmaker 配置 WireGuard 跨 VPC 组网</a>，组网完成部署 k8s、k3s 都可以，我这三台小弱鸡更适合 k3s。</p><table><thead><tr><th>hostname</th><th>外网ip</th><th>内网ip</th><th>wg ip</th><th>os</th></tr></thead><tbody><tr><td>ten-1</td><td>62.234.xxx.xxx</td><td>172.21.0.1</td><td>10.1.0.1</td><td>Ubuntu 20.04</td></tr><tr><td>ten-2</td><td>82.156.xxx.xxx</td><td>10.0.8.1</td><td>10.1.0.2</td><td>Ubuntu 20.04</td></tr><tr><td>ten-3</td><td>81.70.xxx.xxx</td><td>10.0.24.1</td><td>10.1.0.3</td><td>Ubuntu 20.04</td></tr></tbody></table><p>先说下为何换到了 <code>Ubuntu</code>，之前在 <code>CentOS 7.6</code> 下已经组网完成且部署完 k8s ，使用中发现容器经常报这个错 <code>failed to write 1 to memory.kmem.limit_in_bytes xxxx memory.kmem.limit_in_bytes: operation not supported</code>，内存指令相关错误。</p><p>尝试将容器内存资源限制删除，该错误可消失恢复正常。 这也不是长久之计，网上参考别人经验，我当时内核为 <code>5.16</code>，可以降级内核解决，但是我要用 <code>WireGuard</code> 低版本内核就使不了。</p><p>索性换了系统算了，且 <code>Ubuntu 20.04</code> 的 <code>5.4</code> 内核已经包含了 <code>WireGuard</code>，而且也没见人说 Debian 系有 <code>memory.kmem.limit_in_bytes</code> 的问题。</p><p><code>memory.kmem.limit_in_bytes</code> 报错参考</p><ul><li><a href="https://kubesphere.com.cn/forum/d/6677-310516ks" target="_blank" rel="noopener">https://kubesphere.com.cn/forum/d/6677-310516ks</a></li><li><a href="https://en.pingcap.com/blog/try-to-fix-two-linux-kernel-bugs-while-testing-tidb-operator-in-k8s/" target="_blank" rel="noopener">https://en.pingcap.com/blog/try-to-fix-two-linux-kernel-bugs-while-testing-tidb-operator-in-k8s/</a></li></ul><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><ul><li>k8s 版本 为 v1.22.7</li><li>容器运行时采用 <code>containerd</code></li><li>网络组件采用 <code>calico</code></li></ul><h3 id="所有节点"><a href="#所有节点" class="headerlink" title="所有节点"></a>所有节点</h3><p>修改各个节点 <code>hostname</code></p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hostnamectl <span class="hljs-built_in">set</span>-hostname xxx<br></code></pre></td></tr></table></figure><p>安装脚本，可以保存为 <code>.sh</code> 脚本直接跑。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置各节点 host</span><br>cat &lt;&lt;EOF | sudo tee -a /etc/hosts<br>10.1.0.1 ten-1<br>10.1.0.2 ten-2<br>10.1.0.3 ten-3<br>EOF<br><br>swapoff -a<br>rm -f /swap.img<br><br><span class="hljs-comment"># --- containerd 安装 ---</span><br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<br><br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu/ \</span><br><span class="hljs-string">  <span class="hljs-variable">$(lsb_release -cs)</span> stable"</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><br>sudo apt update &amp;&amp; sudo apt install containerd.io<br><br>cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf<br>overlay<br>br_netfilter<br>EOF<br><br>sudo modprobe overlay<br>sudo modprobe br_netfilter<br><br>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf<br>net.bridge.bridge-nf-call-iptables  = 1<br>net.ipv4.ip_forward                 = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br>EOF<br><br>sudo sysctl --system<br><br>sudo mkdir -p /etc/containerd<br>containerd config default | sudo tee /etc/containerd/config.toml<br><span class="hljs-comment"># sandbox 默认会下 k8s.gcr.io 的，国内网络会有问题，替换下，参考下面问题排查</span><br>sed -i <span class="hljs-string">'s#sandbox_image = ".*"#sandbox_image = "registry.aliyuncs.com/google_containers/pause:3.5"#g'</span> /etc/containerd/config.toml<br>systemctl restart containerd<br><br><br><span class="hljs-comment"># --- kubeadm 安装 ---</span><br>cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf<br>br_netfilter<br>EOF<br><br>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br><br>sudo sysctl --system<br><br>sudo apt-get update<br>sudo apt-get install -y apt-transport-https ca-certificates curl<br>sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main"</span> | sudo tee /etc/apt/sources.list.d/kubernetes.list<br><br>sudo apt-get update<br>sudo apt-get install -y kubelet=1.22.7-00 kubeadm=1.22.7-00 kubectl=1.22.7-00<br>sudo apt-mark hold kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><h3 id="master-节点"><a href="#master-节点" class="headerlink" title="master 节点"></a>master 节点</h3><p><code>kubeadm.yaml</code> 配置如下，注意修改 <code>controlPlaneEndpoint</code>、<code>advertiseAddress</code></p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">networking:</span><br><span class="hljs-attr">  podSubnet:</span> <span class="hljs-number">100.64</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/10</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.22.7</span><br><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">"ten-1:6443"</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/google_containers</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">"ipvs"</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">InitConfiguration</span><br><span class="hljs-attr">localAPIEndpoint:</span><br><span class="hljs-attr">  advertiseAddress:</span> <span class="hljs-number">10.1</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <br><span class="hljs-attr">nodeRegistration:</span><br><span class="hljs-attr">  criSocket:</span> <span class="hljs-string">/run/containerd/containerd.sock</span><br></code></pre></td></tr></table></figure><p><code>calico.yaml</code> 配置直接下载</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget https:<span class="hljs-regexp">//</span>projectcalico.docs.tigera.io<span class="hljs-regexp">/manifests/</span>calico.yaml<br></code></pre></td></tr></table></figure><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># --- 集群初始化 ---</span><br>kubeadm init --config ./kubeadm.yaml<br>mkdir ~/.kube<br>sudo cp /etc/kubernetes/admin.conf ~/.kube/config<br>sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config<br>kubectl taint nodes --all node-role.kubernetes.io/master-<br>kubectl apply -f ./calico.yaml<br></code></pre></td></tr></table></figure><h3 id="work-节点"><a href="#work-节点" class="headerlink" title="work 节点"></a>work 节点</h3><p><code>join</code> 命令替换成 <code>kubeadm init</code> 执行成功时输出的。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># --- 加入集群 ---</span><br>scp root@ten-1:/etc/kubernetes/admin.conf /etc/kubernetes/admin.conf<br>mkdir ~/.kube<br>sudo cp /etc/kubernetes/admin.conf ~/.kube/config<br>sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config<br>kubeadm join ten-1:6443 --token 7hepbs.ub5d984rmxc5v3pc \<br>--discovery-token-ca-cert-hash sha256:981348138871c4eed993db7664a7663ec9b0e9e6fe2d038a266591174570284c<br></code></pre></td></tr></table></figure><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><p>集群初始化时，会卡在 <code>This can take up to 4m0s</code></p><p>查看 <code>kubelet</code> 日志 <code>journalctl -xeu kubelet</code> 大量报错</p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl"><span class="hljs-string">"Error getting node"</span> err=<span class="hljs-string">"node <span class="hljs-subst">\"</span>ten-1<span class="hljs-subst">\"</span> not found"</span><br><span class="hljs-string">"Error getting node"</span> err=<span class="hljs-string">"node <span class="hljs-subst">\"</span>ten-1<span class="hljs-subst">\"</span> not found"</span><br></code></pre></td></tr></table></figure><p>但本机上 hostname 能 ping 通。再看容器日志 <code>journalctl -xeu containerd</code><br><img src="/images/ubuntu_k8s_0.png" alt="journalctl -xeu containerd"><br>有个镜像没下下来超时，奇怪不是改了仓库地址。</p><p>看下需要的镜像</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubeadm config images list --kubernetes-version=v1.22.7<br>k8s.gcr.io/kube-apiserver:v1.22.7<br>k8s.gcr.io/kube-controller-manager:v1.22.7<br>k8s.gcr.io/kube-scheduler:v1.22.7<br>k8s.gcr.io/kube-proxy:v1.22.7<br>k8s.gcr.io/pause:3.4.1<br>k8s.gcr.io/etcd:3.4.13-0<br>k8s.gcr.io/coredns/coredns:v1.8.0<br></code></pre></td></tr></table></figure><p>并没有 <code>pause:3.5</code>。看看别的配置文件，发现 <code>/etc/containerd/config.toml</code> 中 <code>sandbox_image</code> 用到了。</p><figure class="hljs highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">sandbox_image</span> = <span class="hljs-string">"k8s.gcr.io/pause:3.5"</span><br></code></pre></td></tr></table></figure><p>直接改成 <code>registry.aliyuncs.com/google_containers/pause:3.5</code> 也可以手动从阿里云下载，打 tag。</p><p>下载 <a href="https://github.com/containerd/nerdctl" target="_blank" rel="noopener">nerdctl</a> 让 containerd 用起来像 docker 一样。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nerdctl pull registry.aliyuncs.com/google_containers/pause:3.5 --namespace <span class="hljs-string">"k8s.io"</span><br>nerdctl tag registry.aliyuncs.com/google_containers/pause:3.5 k8s.gcr.io/pause:3.5 --namespace <span class="hljs-string">"k8s.io"</span><br></code></pre></td></tr></table></figure><h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>kubectl get all --all-namespaces<br><br><span class="hljs-comment"># 手动下载镜像</span><br>kubeadm config images pull --kubernetes-version=v1.22.7 --image-repository registry.aliyuncs.com/google_containers<br><br><span class="hljs-comment"># 查看配置模版</span><br>kubeadm config <span class="hljs-built_in">print</span> init-defaults<br><br><span class="hljs-comment"># 重置集群</span><br>kubeadm reset<br><br><span class="hljs-comment"># 查看可安装 kube 版本 </span><br>apt-cache madison kubelet<br><br><span class="hljs-comment"># 卸载 kube</span><br>apt-mark unhold kubeadm kubelet kubectl<br>apt-get remove -y kubelet=1.22.7-00 kubeadm=1.22.7-00 kubectl=1.22.7-00<br><br><span class="hljs-comment"># 卸载 docker containerd</span><br>apt-get purge docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-comment"># 查看已有镜像</span><br>nerdctl images --namespace <span class="hljs-string">"k8s.io"</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener">container-runtimes</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">install-kubeadm</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/" target="_blank" rel="noopener">create-cluster-kubeadm</a></li><li><a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises" target="_blank" rel="noopener">calico self managed onprem</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;虽然是一篇 k8s 的部署文，但也充满了曲折。归其原因也是基础一般。 本文并未涉及 k8s 多主高可用，可参考其它文章通过 ipvs 来实现
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://ibelieving.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>通过 Netmaker 配置 WireGuard 跨 VPC 组网</title>
    <link href="https://ibelieving.io/2022/03/13/netmaker/"/>
    <id>https://ibelieving.io/2022/03/13/netmaker/</id>
    <published>2022-03-13T12:15:00.000Z</published>
    <updated>2022-03-30T07:44:09.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>最近云服务商做活动，手里云主机又多了一个，国内的有三台了，可以组个 k8s 集群了。本文介绍如何跨 VPC 组网，机器情况如下。</p><table><thead><tr><th>hostname</th><th>外网ip</th><th>内网ip</th><th>os</th></tr></thead><tbody><tr><td>ten-1</td><td>62.234.xxx.xxx</td><td>172.21.0.1</td><td>CentOS 7.6</td></tr><tr><td>ten-2</td><td>82.156.xxx.xxx</td><td>10.0.8.1</td><td>CentOS 7.9</td></tr><tr><td>ten-3</td><td>81.70.xxx.xxx</td><td>10.0.24.1</td><td>CentOS 7.6</td></tr><tr><td>MacBook</td><td>-</td><td>-</td><td>Darwin 10.15.6</td></tr></tbody></table><ul><li><code>WireGuard</code> 是由 <code>C</code> 语言写的开源 <code>VPN</code> 方案。概括来讲更快、更简单、更安全，<code>Linux</code> 内核 <code>5.6</code> 版本开始自带。且支持全平台。</li><li><code>Netmaker</code> 是一个可视化操作工具，方便我们对 <code>WrireGuard</code> 的配置管理，相比于直接写配置，当节点多起来会便捷不少。</li></ul><p>简单说下运行流程，<code>Netmaker</code> 分服务端和客户端，客户端是 <code>netclient</code>。我们在 <code>Netmaker</code> 上创建虚拟网络，然后在想要加入网络的节点上通过 <code>netclient</code> 加入。<code>Netmaker</code> 会对加入网络的节点自动同步 <code>WireGuard</code> 的配置信息，创建相应的路由规则，之后节点与节点之间的通信直接进行。<br>本文只是介绍了一部分 <code>Netmaker</code> 功能，更多内容请看 <a href="https://docs.netmaker.org/index.html" target="_blank" rel="noopener">Netmaker 官方文档</a>。</p><p>为了方便 <code>CentOS</code> 内核都已升级至 <code>5.16</code>，自带了 <code>WireGuard</code>。升级内核教程很多就不多说了。</p><h1 id="Netmaker-部署"><a href="#Netmaker-部署" class="headerlink" title="Netmaker 部署"></a>Netmaker 部署</h1><p>在 <code>ten-1</code> 上先创建所需目录</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkdir -p /etc/netclient/config<br>$ mkdir -p /data/netmaker<br></code></pre></td></tr></table></figure><p>直接容器化部署，<code>compose yml</code> 如下：</p><figure class="hljs highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">"3.4"</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  netmaker:</span><br><span class="hljs-attr">    container_name:</span> <span class="hljs-string">netmaker</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">gravitl/netmaker:v0.9.4</span><br><span class="hljs-attr">    volumes:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">/etc/netclient/config:/etc/netclient/config</span><br><span class="hljs-attr">      - dnsconfig:</span><span class="hljs-string">/root/config/dnsconfig</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">/usr/bin/wg:/usr/bin/wg</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">/data/netmaker:/root/data</span><br><span class="hljs-attr">    cap_add:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">NET_ADMIN</span><br><span class="hljs-attr">    restart:</span> <span class="hljs-string">always</span><br><span class="hljs-attr">    network_mode:</span> <span class="hljs-string">host</span><br><span class="hljs-attr">    environment:</span><br><span class="hljs-attr">      SERVER_HOST:</span> <span class="hljs-string">"SERVER_PUBLIC_IP"</span><br><span class="hljs-attr">      COREDNS_ADDR:</span> <span class="hljs-string">"SERVER_PUBLIC_IP"</span><br><span class="hljs-attr">      GRPC_SSL:</span> <span class="hljs-string">"off"</span><br><span class="hljs-attr">      DNS_MODE:</span> <span class="hljs-string">"on"</span> <span class="hljs-comment"># dns 不需要直接 off 把下面 coredns 部分也注释</span><br><span class="hljs-attr">      CLIENT_MODE:</span> <span class="hljs-string">"on"</span> <span class="hljs-comment"># 开启 CLIENT_MODE 则默认将 netmaker server 也当做网络节点</span><br><span class="hljs-attr">      API_PORT:</span> <span class="hljs-string">"8081"</span> <span class="hljs-comment"># 记得在服务器安全策略或防火墙上对该端口放行</span><br><span class="hljs-attr">      GRPC_PORT:</span> <span class="hljs-string">"50051"</span> <span class="hljs-comment"># 记得在服务器安全策略或防火墙上对该端口放行</span><br><span class="hljs-attr">      SERVER_GRPC_WIREGUARD:</span> <span class="hljs-string">"off"</span><br><span class="hljs-attr">      CORS_ALLOWED_ORIGIN:</span> <span class="hljs-string">"*"</span><br><span class="hljs-attr">      DATABASE:</span> <span class="hljs-string">"sqlite"</span><br><span class="hljs-attr">  netmaker-ui:</span><br><span class="hljs-attr">    container_name:</span> <span class="hljs-string">netmaker-ui</span><br><span class="hljs-attr">    depends_on:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">netmaker</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">gravitl/netmaker-ui:v0.9.4</span><br><span class="hljs-attr">    links:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">"netmaker:api"</span><br><span class="hljs-attr">    ports:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">"127.0.0.1:8082:80"</span> <span class="hljs-comment"># 如果你没有域名直接用公网ip就改成 "80:80"</span><br><span class="hljs-attr">    environment:</span><br><span class="hljs-attr">      BACKEND_URL:</span> <span class="hljs-string">"https://api.NETMAKER_BASE_DOMAIN"</span> <span class="hljs-comment"># 无证书用http，如果你没有域名直接用公网ip就改成 "http://SERVER_PUBLIC_IP:8081"</span><br><span class="hljs-attr">    restart:</span> <span class="hljs-string">always</span><br><span class="hljs-attr">  coredns:</span><br><span class="hljs-attr">    depends_on:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">netmaker</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">coredns/coredns</span><br><span class="hljs-attr">    command:</span> <span class="hljs-bullet">-conf</span> <span class="hljs-string">/root/dnsconfig/Corefile</span><br><span class="hljs-attr">    container_name:</span> <span class="hljs-string">coredns</span><br><span class="hljs-attr">    restart:</span> <span class="hljs-string">always</span><br><span class="hljs-attr">    network_mode:</span> <span class="hljs-string">host</span><br><span class="hljs-attr">    volumes:</span><br><span class="hljs-attr">      - dnsconfig:</span><span class="hljs-string">/root/dnsconfig</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-attr">  dnsconfig:</span> <span class="hljs-string">&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>更多参数配置请参考</p><ul><li><a href="https://github.com/gravitl/netmaker/tree/v0.9.4/compose" target="_blank" rel="noopener">官方 compose 示例</a></li><li><a href="https://docs.netmaker.org/server-installation.html" target="_blank" rel="noopener">官方说明</a></li></ul><p>如果你是直接用公网ip方式访问 netmaker ui 那直接把注释说明的地方修改下跑起来就可以进入下一节了。</p><p><img src="/images/netmaker_0.jpg" alt="启动"></p><p>如果你使用域名访问，可以参考下我的方案。<br>首先解析域名 <code>api.NETMAKER_BASE_DOMAIN</code>，<code>dashboard.NETMAKER_BASE_DOMAIN</code> 至 <code>ten-1</code>。<br>然后我使用 <code>Traefik</code> 将域名 <code>dashboard.NETMAKER_BASE_DOMAIN</code> 反代 netmaker ui 也就是 <code>127.0.0.1:8082</code>。你可以参考官网选择 Caddy 或 Nginx。<br><code>Traefik</code> 配置就不贴了，之前文章写过很多次。</p><h1 id="Netmaker-创建网络"><a href="#Netmaker-创建网络" class="headerlink" title="Netmaker 创建网络"></a>Netmaker 创建网络</h1><p>打开 <code>Netmaker UI</code>，首次打开会创建一个用户，然后登录。</p><p><img src="/images/netmaker_1.jpg" alt="Dashboard"></p><ul><li>Networks 虚拟网络管理</li><li>Nodes 节点管理，Ingress 和 Egress 网关配置等。</li><li>Access Keys 密钥管理</li><li>External Clients 安卓或苹果端加入网络使用</li><li>DNS</li><li>Users 配置用户管理网络，支持多租户</li></ul><p>然后进入 <code>Networks</code> 创建一个虚拟网络，比如 <code>10.1.0.0/16</code>。</p><p><img src="/images/netmaker_2.jpg" alt="创建网络"></p><ul><li>网络默认监听端口是 51821 记得对该端口放行（运行Netmaker的节点）</li></ul><p>这样虚拟网络就创建成功了。</p><h1 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h1><p>加入节点有两种方式，先说第一种：</p><p>在网络里点 <code>Access keys</code> 创建 <code>Key</code>，获得 <code>Token</code>。</p><p><img src="/images/netmaker_3.jpg" alt="Access Keys"><br><img src="/images/netmaker_4.png" alt="Create Key"></p><p><code>uses</code> 代表这个 <code>Key</code> 可以用于几个节点</p><p><img src="/images/netmaker_5.jpg" alt="Success"></p><p>然后去要加入网络的节点上执行 <code>Install Commands</code> 加入网络。执行的逻辑就是下载 <code>netclient</code> 然后通过 <code>Token</code> 加入网络，<code>Token</code> 里面包含了 <code>Netmaker</code> 的服务端配置信息。<br>所以你也可以从 <a href="https://github.com/gravitl/netmaker/releases/tag/v0.9.4" target="_blank" rel="noopener">这里</a> 手动下载 <code>netclient</code> 执行：<code>netclient join -t TOKEN</code> 。</p><p>第二种是进入网络把 <code>Without Keys</code> 打开</p><p><img src="/images/netmaker_6.jpg" alt="Without Keys"></p><p>然后在节点上执行</p><p><code>netclient join --dnson no --network ten --apiserver NETMAKE_DOMAIN_OR_IP:8081 --grpcserver NETMAKE_DOMAIN_OR_IP:50051</code></p><p>在 <code>Nodes</code> 下对刚加入的节点执行同意加入</p><p><img src="/images/netmaker_7.jpg" alt="approve"></p><h2 id="macOS-的加入"><a href="#macOS-的加入" class="headerlink" title="macOS 的加入"></a>macOS 的加入</h2><p>也是先下载 <code>netclient</code>，下载时候注意平台如果是 M1 芯片下载 <code>darwin-arm64</code>，之后安装 <code>wireguard-tools</code>:</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew install wireguard-tools<br></code></pre></td></tr></table></figure><p>然后执行 <code>netclient join</code> 就行了。</p><h2 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h2><p>在节点上执行 wg 可以看到加入的虚拟网络和链接的节点。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wg<br>interface: nm-ten<br>  public key: aH4j5K2TiYhhwI9Bz0tmxxxx<br>  private key: (hidden)<br>  listening port: 51821<br><br>peer: mbv8tihsqvvtgcejLGB+xxxxx<br>  endpoint: 81.70.xxx.xxx:51821<br>  allowed ips: 10.1.0.3/32<br>  latest handshake: 35 seconds ago<br>  transfer: 14.37 MiB received, 54.71 MiB sent<br>  persistent keepalive: every 20 seconds<br><br>peer: WDEfuS8deFQyd6syZJNtaxxxx<br>  endpoint: 82.156.xxx.xxx:51821<br>  allowed ips: 10.1.0.2/32<br>  latest handshake: 35 seconds ago<br>  transfer: 36.74 MiB received, 542.48 MiB sent<br>  persistent keepalive: every 20 seconds<br></code></pre></td></tr></table></figure><ul><li>网络不通请检查 <code>endpoint</code> 端口的连通性</li></ul><p>已经成功分配了ip，ping 一下试试。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ping 10.1.0.2<br>PING 10.1.0.2 (10.1.0.2) 56(84) bytes of data.<br>64 bytes from 10.1.0.2: icmp_seq=1 ttl=64 time=8.69 ms<br>64 bytes from 10.1.0.2: icmp_seq=2 ttl=64 time=9.74 ms<br>64 bytes from 10.1.0.2: icmp_seq=3 ttl=64 time=51.0 ms<br>^C<br>--- 10.1.0.2 ping statistics ---<br>3 packets transmitted, 3 received, 0% packet loss, time 2003ms<br>rtt min/avg/max/mdev = 8.698/23.165/51.057/19.727 ms<br><br>$ ping 10.1.0.3<br>PING 10.1.0.3 (10.1.0.3) 56(84) bytes of data.<br>64 bytes from 10.1.0.3: icmp_seq=1 ttl=64 time=0.893 ms<br>64 bytes from 10.1.0.3: icmp_seq=2 ttl=64 time=0.948 ms<br>64 bytes from 10.1.0.3: icmp_seq=3 ttl=64 time=1.01 ms<br>^C<br>--- 10.1.0.3 ping statistics ---<br>3 packets transmitted, 3 received, 0% packet loss, time 2032ms<br>rtt min/avg/max/mdev = 0.893/0.951/1.014/0.060 ms<br></code></pre></td></tr></table></figure><p>网络已经打通了！</p><h1 id="Ingress-GateWay-和-External-Clients"><a href="#Ingress-GateWay-和-External-Clients" class="headerlink" title="Ingress GateWay 和 External Clients"></a>Ingress GateWay 和 External Clients</h1><p>外部客户端，就是可以访问虚拟网络资源，但是虚拟网络内节点不能反过来访问该外部客户端。通过 <code>Ingress GateWay</code> 入口网关实现。<br>具体就是选择一个节点开启 <code>Ingress GateWay</code> 使其变成一个中继节点，然后在其上添加外部客户端 <code>External Clients</code> 生成配置文件及二维码。中继节点负责为外部客户端的流量请求进行转发。<br><code>Linux</code>、<code>macOS</code>、<code>Windows</code> 可以通过 <code>wg-quick up /path/to/config</code> 命令接入网络。<br><code>Android</code> 和 <code>iOS</code> 下载 <code>WireGuard App</code> 通过扫描配置二维码就可以接入网络了。</p><ul><li>生成的配置是固定的，网络节点配置修改后需要重新生成配置</li></ul><h1 id="Egress-GateWay"><a href="#Egress-GateWay" class="headerlink" title="Egress GateWay"></a>Egress GateWay</h1><p>比如我现在的组网状态下，<code>ten-2</code> 节点私有局域网段是 <code>10.0.8.0/22</code>，<code>ten</code> 网络内其它节点想要访问该私有局域网段的其它服务器，通过 <code>Egress GateWay</code> 出口网关可以实现。</p><p>在 <code>ten-2</code> 节点上创建出口网关后通过 <code>wg</code> 查看配置同步完成网络就打通了。另外通过逗号分隔可以支持多个网段。</p><p><img src="/images/netmaker_8.png" alt="Egress GateWay"></p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wg<br>interface: nm-ten<br>  public key: aH4j5K2TiYhhwI9Bz0tmxxxx<br>  private key: (hidden)<br>  listening port: 51821<br><br>peer: mbv8tihsqvvtgcejLGB+xxxxx<br>  endpoint: 81.70.xxx.xxx:51821<br>  allowed ips: 10.1.0.3/32<br>  latest handshake: 55 seconds ago<br>  transfer: 644.40 MiB received, 24.83 MiB sent<br>  persistent keepalive: every 20 seconds<br><br>peer: WDEfuS8deFQyd6syZJNtaxxxx<br>  endpoint: 82.156.xxx.xxx:51821<br>  allowed ips: 10.1.0.2/32, 10.0.8.0/22<br>  latest handshake: 44 seconds ago<br>  transfer: 569.67 MiB received, 38.38 MiB sent<br>  persistent keepalive: every 20 seconds<br></code></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>组网成功后部署了 k8s 集群, 可以进一步折腾了。</p><p>另外推荐一个 k8s 可视化管理工具 <a href="https://github.com/lensapp/lens" target="_blank" rel="noopener">Lens</a>，号称是 k8s 的 IDE，操作 k8s 相当方便。</p><p><img src="/images/netmaker_9.jpg" alt="Lens Cluster"></p><p><img src="/images/netmaker_10.png" alt="Lens Nodes"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;最近云服务商做活动，手里云主机又多了一个，国内的有三台了，可以组个 k8s 集群了。本文介绍如何跨 VPC 组网，机器情况如下。&lt;/p&gt;&lt;t
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://ibelieving.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>关于学习和记忆的原理《考试脑科学》</title>
    <link href="https://ibelieving.io/2022/02/26/book_of_exam_brain_science/"/>
    <id>https://ibelieving.io/2022/02/26/book_of_exam_brain_science/</id>
    <published>2022-02-26T08:40:00.000Z</published>
    <updated>2022-02-26T08:41:46.093Z</updated>
    
    <content type="html"><![CDATA[<p>近期阅读了《考试脑科学：脑科学中的高效记忆法》做个笔记。该书前面讲解了人脑记忆的原理，海马体、杏仁核、θ波等。后面讲解了记忆的种类，人处于什么状态记忆力更好等等。</p><blockquote><p>《高中生学习法》出版已有十余年。这期间，脑科学研究不断进步，十几年前无法解释的事情现在已<br>经开始逐渐明晰。同时，书中有些内容甚至已经被明确证实是错误的。也就是说，《高中生学习法》<br>这本书，仅十余年就已落后于时代了。</p></blockquote><p>需要说明的是《考试脑科学》是《高中生学习法》(出版于2002年)的修订版。《考试脑科学》原书于2011年出版，中文翻译版于2019年出版。现在2022年已经又过去十年了，不知道脑科学进步没。</p><p>◆ 2-4 蛮干终究是徒劳</p><blockquote><p>潜在记忆的保存时间只有 1 个月左右，如果不在 1个月以内复习学到的知识，潜在记忆就无法发挥作用了。</p></blockquote><p>意思是一个月之后再去复习和学习新知识没有什么区别</p><blockquote><p>在复习时也要像初次学习那样用功，不仅要用眼看，还要动笔写、出声读，尽可能地调动自己的感官。这样一来，通过视觉、听觉、触觉等传达的信息都会对刺激海马体起到积极作用。</p></blockquote><p>刺激方面越多对知识的记忆越深刻</p><blockquote><p>结合海马体的性质，我建议大家按照如下计划展开复习。第 1 次复习：学习后的第 2 天第 2 次复习：第 1 次复习 1 周后第 3 次复习：第 2 次复习 2 周后第 4 次复习：第 3 次复习 1 个月后</p></blockquote><p>◆ 3-2 童心是提高成绩的“营养素”</p><blockquote><p>畅销书作家韦恩·戴尔 5 曾这样说：“一个人在早上醒来后，首先想到的是‘很好，新的一天开始了’，还是‘哎，怎么又要起床了’，完全取决于他的心态。”确实如此。学习也和心情有关，我们要像孩子一样，无论在何时都应该保持一颗易受感动的心。包含好奇心和憧憬心的“童心”，正是促使θ波出现的重要因素。</p></blockquote><p>大家上学时应该都有过的经历，感兴趣的科目学起来很快，没兴趣的怎么学也不会。这里可以说是做了解释，当你对知识好奇、感兴趣时会出现 θ脑电波，θ波的出现有对记忆力增强的效果，可以事半功倍。</p><p>◆ 3-5 狮子记忆法</p><blockquote><p>通过狮子记忆法，我们可以推测出饥饿、走动和降低室温这 3 种能提高记忆力的技巧。</p></blockquote><p>如果要解释得稍微专业一些，那就是当肚子饿的时候我们的胃会分泌一种名为食欲刺激激素<br>(ghrelin)的饥饿激素。这种饥饿激素能随血液循环进入海马体，促使海马体神经元产生LTP。相反，在吃饱后不仅饥饿激素的水平会降低，而且血液还会相对集中于胃部和肠道，这往往会导致脑<br>的活动水平降低。</p><p>来回走动及坐车或脑能感知到正在移动时会自动产生θ波。</p><p>◆ 4-3 睡眠和记忆</p><blockquote><p>在睡觉前把题目过一遍也是一种很重要的学习技巧。</p></blockquote><p>◆ 4-6 能有效利用全天时间的学习方案</p><blockquote><p>饭前处于饥饿状态，正适合学习。睡觉前也是学习的黄金期。早饭或晚饭后处于饱腹状态时，不学习也不要紧。</p></blockquote><blockquote><p>睡觉前非常适合学习那些需要记忆的知识，比如数据库原理、调度器原理；上午可以说是人在一天之中最清醒的时间，用来学习对逻辑思维能力要求比较高的比如刷题；最后，因为在早上刚起床的这段时间内不适合背诵，所以只要做一些简单的计算或者复习就可以了。</p></blockquote><p>做了些修改替换，哈哈。</p><p>◆ 5-2 面对失败，毫不气馁的积极态度最重要</p><blockquote><p>每次经历失败后，我们都应该思考下一次要怎么做才能成功。如果还是失败了，就再次思考其他解决方案……像这样不断循环下去。失败的次数越多，就越能形成准确牢固的记忆。即使偶尔取得了几次不错的成绩，对于大家来说其实也并没有什么实质性的收获。所以，即使考试成绩不理想也没必要闷闷不乐，大家可以转换思维，把它当作一件好事而非坏事。失败后最重要的是带着疑问找出失败原因，并想出解决方案</p></blockquote><blockquote><p>因此，对于学习来说，“善于反省”和“保持乐观”也很重要。</p></blockquote><blockquote><p>我们需要透过自身这扇窗户观望世界，所以必须不断磨砺自己。</p></blockquote><p>◆ 脑心理学专栏 13 / 葡萄糖</p><blockquote><p>补充葡萄糖能让脑活跃起来。</p></blockquote><p>◆ 5-7 带着长期计划去学习</p><blockquote><p>当我们想要学习某一领域的知识时，最重要的是理解和把握知识的整体概貌。在刚开始的时候，可以先忽略细节，首先把握全局，之后再一点点地记忆细节。总之，脑的记忆是模糊的，刚开始并不能区分出相似的事物。</p></blockquote><p>◆ 5-8 先扩大擅长科目的优势</p><blockquote><p>首先，不管具体是哪一科，总之要有一门擅长的科目。在有了一门不输给任何人的擅长科目之后再去挑战其他科目的学习，这种学习方法从脑科学的角度来看是非常有效的。</p></blockquote><p>◆ 6-2 联想很重要</p><blockquote><p>此外，“想象”这种行为还可以强烈地刺激海马体，也就是说它具有精致化和活跃海马体这两个优点。越充分地发挥自己的想象力，记忆就越能长时间地保留下来。</p></blockquote><blockquote><p>要想顺利地发挥想象，最好的方法就是自己创作用于记忆的谐音，因为创作过程本身就是一种“经验记忆”，所以自然就能想象出谐音文字所描绘的情境来。当然，即使不使用谐音记忆法，联想也很重要。只是在这种情况下，与单纯地把知识或信息关联起来相比，我们更需要充分发挥自己的想象力，让知识的内容更加丰富。如果条件允许，大家最好能结合自己的实际经验记忆，这样效果会更好。自己的经验与记忆关联得越多，记忆就越接近经验记忆。</p></blockquote><p>知识记忆就是从书上学到的或别人讲的。<br>经验记忆好比是自己实际经历过后产生的。</p><p>◆ 6-3 向别人讲述学到的知识</p><blockquote><p>你想记住哪些信息，就把哪些信息讲给自己的朋友或者家人听——这就是形成经验记忆的最简单的方法。</p></blockquote><blockquote><p>博学的人几乎毫无例外，都是在平时就有强烈的讲述欲望的人。</p></blockquote><blockquote><p>虽然“经验记忆法”看起来像是万能的，但遗憾的是它也有缺点，那就是经验记忆会逐渐转化成知识记忆。即使是好不容易才形成的经验记忆，如果我们置之不理，那么我们在记忆中带入的体验感就会慢慢弱化，它终有一天会转化为知识记忆。</p></blockquote><blockquote><p>所以，我们要试着经常向别人讲述那些必须能随时想起来的重要知识，通过自己的不断努力，让它们重新转化为经验记忆。</p></blockquote><p>◆ 作者之见</p><blockquote><p>人更容易记住位于视野左侧的内容，这大概是右脑在发挥作用。相反，读到或者听到的那些和“语言”相关的内容，则似乎是从右耳进入人脑并由左脑来记忆的。</p></blockquote><p>◆ 6-4 声音、听觉与记忆</p><blockquote><p>其实一般来说，使用耳朵学习要比使用眼睛学习效率更高，比如别人说过的一些伤害了我们的话会一直留在我们的心里。通过耳朵获得的记忆是非常牢固的。</p></blockquote><blockquote><p>当然，并不是说只使用眼睛和耳朵学习就足够了，人的身体上还有很多其他的感觉器官，我们最好能尽量多地灵活使用它们。请大家记住，学习时一定要动笔写、出声读，通过反复输出知识来加强记忆。</p></blockquote><p>◆ 6-5 理解记忆的种类和年龄的关系</p><blockquote><p>知识记忆和经验记忆是“用头脑记住的记忆”，而方法记忆则可以说是“用身体记住的记忆”。当然，方法记忆实际上也是由人脑而并非人体记忆的，这无须多言。虽然运动员们常常说“我的肌肉已经熟记了动作”，但这只是一种比喻，因为肌肉没有记忆力。</p></blockquote><p>比如骑车的方法、开车的方法、游泳的方法。比知识记忆和经验记忆更牢靠，好比开车从书上看到怎么开是知识记忆，自己上手开是经验记忆，开的时间久了完全掌握是理解了方法。</p><p>◆ 作者之见</p><blockquote><p>跟随优秀的老师学习，就能掌握适用于各种情况的解决方法</p></blockquote><p>◆ 6-8 会“膨胀”的记忆方法</p><blockquote><p>无论学习什么知识，重要的都是理解并掌握其背后的原理。</p></blockquote><blockquote><p>大家要试着慢慢地转移学习的重心，尽量不要死记硬背，而是应该去理解知识的“背景理论”。</p></blockquote><p>◆ 6-9 为什么要持续努力？</p><blockquote><p>要想获得显著的学习效果，那么至少要从实现最终目标的前 1 年就开始学习。长期性的规划非常重要，另外就是专心致志的努力了。大家不要因为不会立即见效就心灰意冷。每当感到学习很辛苦时，请回忆起“脑的机能是呈几何级数增长的”这一事实，并不断激励自己“效果肯定会出现的，继续努力吧！”</p></blockquote><p>几何级数增长，原文意思是学习了A知识，又学习了B知识，会到四种效果，”A” “B” “从A看到的B” “从B看到的A”，知识本身加上知识间的联想即2的平方。学的越多效果越显著。</p><blockquote><p>只要继续心怀梦想，梦想就一定会实现。——歌德</p></blockquote><p>◆ 作者之见</p><blockquote><p>失败并不等于结束，一旦放弃了才是真的结束。——尼克松</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期阅读了《考试脑科学：脑科学中的高效记忆法》做个笔记。该书前面讲解了人脑记忆的原理，海马体、杏仁核、θ波等。后面讲解了记忆的种类，人处于什么状态记忆力更好等等。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;《高中生学习法》出版已有十余年。这期间，脑科学研究不断进步，十几年前无法解
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过企业微信构建消息推送服务</title>
    <link href="https://ibelieving.io/2021/03/15/wx_work_msg_push/"/>
    <id>https://ibelieving.io/2021/03/15/wx_work_msg_push/</id>
    <published>2021-03-15T15:33:00.000Z</published>
    <updated>2021-03-15T16:42:55.654Z</updated>
    
    <content type="html"><![CDATA[<p>之前用server酱的微信消息推送服务，但是最近老抽风，准备换别的推送服务。</p><p>目前发现企业微信的应用消息很合适优点不少。个人也可注册使用。</p><ul><li>图文消息 mpnews 内容最大支持666K字节</li><li>一次可最多发送八条消息，虽然基本都是发单条</li><li>可以显示摘要</li><li>可以消息免打扰</li></ul><p><img src="/images/wx_work_msg_push.png" alt="图文消息摘要效果"></p><p>虽然是企业微信的应用消息，但是通过关注微信插件可以直接在微信app内查看消息。</p><p>简单使用 Golang 编写了一个腾讯 Serverless 云函数，实现了类似于server酱的消息推送，GET、POST方式调用均可。</p><p>腾讯云函数目前每月都有免费额度个人完全够用了，API网关新开会送一年资源包也是够用完全白嫖。可以绑定自有域名，选择香港区域，不用备案。</p><p>一年到期之后，可以转战阿里云。代码很简单，改改也可以直接docker部署。</p><p>详见GitHub <a href="https://github.com/zyh94946/wx-msg-push-tencent" target="_blank" rel="noopener">wx-msg-push-tencent</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前用server酱的微信消息推送服务，但是最近老抽风，准备换别的推送服务。&lt;/p&gt;&lt;p&gt;目前发现企业微信的应用消息很合适优点不少。个人也可注册使用。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;图文消息 mpnews 内容最大支持666K字节&lt;/li&gt;&lt;li&gt;一次可最多发送八条消息，虽然基本都
      
    
    </summary>
    
    
      <category term="Go" scheme="https://ibelieving.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://ibelieving.io/tags/Serverless/"/>
    
  </entry>
  
  <entry>
    <title>nps 内网穿透</title>
    <link href="https://ibelieving.io/2021/01/07/nps_use/"/>
    <id>https://ibelieving.io/2021/01/07/nps_use/</id>
    <published>2021-01-07T13:33:32.000Z</published>
    <updated>2021-01-07T14:41:47.923Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">nps</a> 是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持 tcp、udp 流量转发，可支持任何 tcp、udp 上层协议（访问内网网站、本地支付接口调试、ssh 访问、远程桌面，内网 dns 解析等等……），此外还支持内网 http 代理、内网 socks5 代理、p2p 等，并带有功能强大的 web 管理端。</p><h2 id="实现结构图"><a href="#实现结构图" class="headerlink" title="实现结构图"></a>实现结构图</h2><figure class="hljs highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+---------------+  +---------------------------------------+     +--------------------------------------------+<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">                                       </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>|<span class="hljs-string">    traffic    </span>|<span class="hljs-string">  </span>|<span class="hljs-string">   Server  x.x.x.x                     </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">                                       </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">                          nps web      </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  +---------+        +--------------+  </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                intranet                    </span>|<br>|<span class="hljs-string"> nps.test.com -----&gt; </span>|<span class="hljs-string"> Traefik </span>|<span class="hljs-string">  +--&gt;  </span>|<span class="hljs-string">127.0.0.1:8081</span>|<span class="hljs-string">  </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  +---------+        +--------------+  </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">                                       </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">                                       </span>|<span class="hljs-string">     </span>|<span class="hljs-string">     nps Client                             </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  +---------+                  x.x.x.x:8024  </span>|<span class="hljs-string">   +-------------+  :5900  +-------------+  </span>|<br>|<span class="hljs-string"> x.x.x.x:8001 -----&gt; </span>|<span class="hljs-string">   nps   </span>|<span class="hljs-string">  &lt;------------------------------&gt;  </span>|<span class="hljs-string"> 10.1.50.100 </span>|<span class="hljs-string"> +-----&gt; </span>|<span class="hljs-string"> 10.1.50.101 </span>|<span class="hljs-string">  </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  +---------+                          </span>|<span class="hljs-string">     </span>|<span class="hljs-string">   +-------------+         +-------------+  </span>|<br>|<span class="hljs-string">               </span>|<span class="hljs-string">  </span>|<span class="hljs-string">                                       </span>|<span class="hljs-string">     </span>|<span class="hljs-string">                                            </span>|<br>+---------------+  +---------------------------------------+     +--------------------------------------------+<br></code></pre></td></tr></table></figure><p>服务端：CentOS 7.9<br>客户端：MacOS 10.15</p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p><a href="https://github.com/traefik/traefik" target="_blank" rel="noopener">traefik</a> 之前有过介绍，不再多说。仅作为 nps web 管理的前置路由，解包 https 转发给本地的 nps http 服务。虽然 nps 也是支持 https 的，但是我使用 traefik 作为统一流量入口管理更方便。</p><p>首先解析域名举例 <code>nps.test.com</code> 至服务端主机。<br>修改 file provider 配置新增 nps 服务和路由。转发 <code>https://nps.test.com/</code> 请求至 <code>http://127.0.0.1:8081/</code>。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">[http<span class="hljs-selector-class">.routers</span><span class="hljs-selector-class">.my-nps</span>]<br>  rule = <span class="hljs-string">"Host(`nps.test.com`)"</span><br>  service = <span class="hljs-string">"nps-server"</span><br>  [http<span class="hljs-selector-class">.routers</span><span class="hljs-selector-class">.my-nps</span><span class="hljs-selector-class">.tls</span>]<br>    certResolver = <span class="hljs-string">"sample"</span><br>    [[http<span class="hljs-selector-class">.routers</span><span class="hljs-selector-class">.my-nps</span><span class="hljs-selector-class">.tls</span><span class="hljs-selector-class">.domains</span>]]<br>      main = <span class="hljs-string">"nps.test.com"</span><br><br>[http<span class="hljs-selector-class">.services</span><span class="hljs-selector-class">.nps-server</span>]<br>  [http<span class="hljs-selector-class">.services</span><span class="hljs-selector-class">.nps-server</span><span class="hljs-selector-class">.loadBalancer</span>]<br>    [[http<span class="hljs-selector-class">.services</span><span class="hljs-selector-class">.nps-server</span><span class="hljs-selector-class">.loadBalancer</span><span class="hljs-selector-class">.servers</span>]]<br>      url = <span class="hljs-string">"http://127.0.0.1:8081/"</span><br></code></pre></td></tr></table></figure><p>如果你 traefik 配置和我之前的一样修改完成就已经生效了不用重启。</p><h2 id="服务端-nps"><a href="#服务端-nps" class="headerlink" title="服务端 nps"></a>服务端 nps</h2><p>从<a href="https://github.com/ehang-io/nps/releases" target="_blank" rel="noopener">这里</a>下载 nps 服务端，客户端也是从这下。</p><p>修改 <code>conf/nps.conf</code> 配置文件。</p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">appname</span> = nps<br><span class="hljs-attr">runmode</span> = dev<br><span class="hljs-comment"># 服务端客户端通信的 协议、端口、ip</span><br><span class="hljs-attr">bridge_type</span>=tcp<br><span class="hljs-attr">bridge_port</span>=<span class="hljs-number">8024</span><br><span class="hljs-attr">bridge_ip</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">public_vkey</span>=<br><span class="hljs-comment"># log level LevelEmergency-&gt;0  LevelAlert-&gt;1 LevelCritical-&gt;2 LevelError-&gt;3 LevelWarning-&gt;4 LevelNotice-&gt;5 LevelInformational-&gt;6 LevelDebug-&gt;7</span><br><span class="hljs-attr">log_level</span>=<span class="hljs-number">7</span><br><span class="hljs-attr">log_path</span>=/var/log/nps.log<br><span class="hljs-comment"># web 管理的 用户名、密码、监听端口、ip</span><br><span class="hljs-attr">web_username</span>=admin<br><span class="hljs-attr">web_password</span>=ow@ner<br><span class="hljs-attr">web_port</span>=<span class="hljs-number">8081</span><br><span class="hljs-attr">web_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">disconnect_timeout</span>=<span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>执行安装命令，启动服务端。</p><figure class="hljs highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo ./nps install<br><span class="hljs-variable">$ </span>sudo nps start<br></code></pre></td></tr></table></figure><p>install 之后，可执行文件和配置文件会复制到 <code>/etc/nps/</code> 下，同时会安装为系统服务。<br>启动之后 tail 日志看有无报错，netstat 看端口监听是否正常。<br>打开 <code>nps.test.com</code> 进入 web 管理后台，新增一个客户端，唯一密钥建议留空自动生成即可。</p><h2 id="客户端-内网-nps"><a href="#客户端-内网-nps" class="headerlink" title="客户端(内网) nps"></a>客户端(内网) nps</h2><p>同样下载 nps 客户端，修改客户端配置 <code>conf/npc.conf</code>。</p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-comment"># 服务端ip 自行修改</span><br><span class="hljs-attr">server_addr</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">8024</span><br><span class="hljs-comment"># 唯一密钥</span><br><span class="hljs-attr">vkey</span>=<span class="hljs-number">0000000</span><br><span class="hljs-comment"># 是否自动重连</span><br><span class="hljs-attr">auto_reconnection</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">conn_type</span>=tcp<br><span class="hljs-comment"># 是否加密</span><br><span class="hljs-attr">crypt</span>=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 是否压缩</span><br><span class="hljs-attr">compress</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">disconnect_timeout</span>=<span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>手动执行测试看配置链接是否正常</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/npc -config=/</span>path<span class="hljs-regexp">/conf/</span>npc.conf<br></code></pre></td></tr></table></figure><p>链接正常同样安装为服务</p><figure class="hljs highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo ./npc <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>install 之后可执行文件会复制到 <code>/usr/local/bin/</code> 下。同时会创建一个 launchctl 配置文件 <code>/Library/LaunchDaemons/Npc.plist</code> 这是 mac 下的定时任务、守护进程管理利器。</p><p>修改下 <code>Npc.plist</code> 加个配置文件参数。</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN"</span><br><span class="hljs-meta">"http://www.apple.com/DTDs/PropertyList-1.0.dtd" &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">'1.0'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Npc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>ProgramArguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/path/npc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-config=/path/conf/npc.conf<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-debug=false<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>SessionCreate<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">false</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>KeepAlive<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>RunAtLoad<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">false</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Disabled<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">false</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动客户端</p><figure class="hljs highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ sudo npc <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h2 id="创建-tcp-隧道"><a href="#创建-tcp-隧道" class="headerlink" title="创建 tcp 隧道"></a>创建 tcp 隧道</h2><p>tcp 隧道可以实现 ssh、远程桌面等 tcp 连接</p><p>举例实现 mac vnc 远程桌面，在刚才创建的客户端隧道管理中添加一条 tcp 隧道，填写监听的端口<code>8001</code>、内网目标ip和目标端口<code>10.1.50.101:5900</code> 保存(vnc 默认端口5900)。<br>vnc 客户端链接服务端 <code>1.1.1.1:8001</code> 即可，相当于访问内网ip<code>10.1.50.101:5900</code>。</p><p>更多隧道代理模式自行摸索吧!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/ehang-io/nps&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nps&lt;/a&gt; 是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持 tcp、udp 流量转发，可支持任何 tcp、ud
      
    
    </summary>
    
    
      <category term="Traefik" scheme="https://ibelieving.io/tags/Traefik/"/>
    
      <category term="nps" scheme="https://ibelieving.io/tags/nps/"/>
    
      <category term="内网穿透" scheme="https://ibelieving.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Swoole slowlog 乱码修复</title>
    <link href="https://ibelieving.io/2020/05/11/swoole_slowlog/"/>
    <id>https://ibelieving.io/2020/05/11/swoole_slowlog/</id>
    <published>2020-05-10T16:00:00.000Z</published>
    <updated>2020-05-11T08:03:09.239Z</updated>
    
    <content type="html"><![CDATA[<p>先说结果：fork 了 swoole 的源码，修复之后打了个 <a href="https://github.com/zyh94946/swoole-src/releases/tag/v1.10.7" target="_blank" rel="noopener">v1.10.7</a> 的版本。</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>由于各种原因项目在使用 <code>swoole</code> 的 v1.x 远古版本跑 TCP 服务，基础环境如下。</p><ul><li>CentOS 6.9</li><li>PHP 5.5.38</li></ul><p>然后遇到了程序偶发性超时情况严重。怀疑是版本bug，首先将 <code>swoole</code> 升级到了当前环境可用的最高版本 <code>v1.10.6</code>，问题依然没有解决。但是这个版本已经有了慢日志功能，将慢日志功能开起来，模拟程序阻塞超时，试试看功能可用否。</p><p>tcp_server.php</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tcpTest</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aa</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">self</span>::bb();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bb</span><span class="hljs-params">()</span> </span>&#123;<br>        sleep(<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Server</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> $serv = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>&#123;<br>        $serv = <span class="hljs-keyword">new</span> \swoole_server(<span class="hljs-string">"0.0.0.0"</span>, <span class="hljs-number">9577</span>);<br>        $serv-&gt;set([<br>            <span class="hljs-string">'reactor_num'</span> =&gt; <span class="hljs-number">2</span>,<br>            <span class="hljs-string">'worker_num'</span> =&gt; <span class="hljs-number">8</span>,<br>            <span class="hljs-string">'task_worker_num'</span> =&gt; <span class="hljs-number">0</span>,<br>            <span class="hljs-string">'dispatch_mode'</span> =&gt; <span class="hljs-number">2</span>,<br>            <span class="hljs-string">'daemonize'</span> =&gt; <span class="hljs-keyword">false</span>,<br>            <span class="hljs-string">'tcp_fastopen'</span> =&gt; <span class="hljs-keyword">true</span>,<br>            <span class="hljs-string">'request_slowlog_timeout'</span> =&gt; <span class="hljs-number">2</span>,<br>            <span class="hljs-string">'request_slowlog_file'</span> =&gt; <span class="hljs-string">'/tmp/swoole_slow.log'</span>,<br>            <span class="hljs-string">'trace_event_worker'</span> =&gt; <span class="hljs-keyword">true</span>,<br>        ]);<br><br>        $serv-&gt;on(<span class="hljs-string">'Start'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onStart'</span>));<br>        $serv-&gt;on(<span class="hljs-string">'Connect'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onConnect'</span>));<br>        $serv-&gt;on(<span class="hljs-string">'Receive'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onReceive'</span>));<br>        $serv-&gt;on(<span class="hljs-string">'Close'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onClose'</span>));<br>        $serv-&gt;start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onStart</span><span class="hljs-params">($serv)</span> </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . PHP_EOL;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onConnect</span><span class="hljs-params">($serv, $fd, $from_id)</span> </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">" worker_id:&#123;$serv-&gt;worker_id&#125; work_pid:&#123;$serv-&gt;worker_pid&#125; fd:&#123;$fd&#125; from_id:&#123;$from_id&#125;"</span> . PHP_EOL;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onReceive</span><span class="hljs-params">($serv, $fd, $from_id, $data)</span> </span>&#123;<br>        $fdinfo = $serv-&gt;connection_info($fd,$from_id,<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">" ip:&#123;$fdinfo['remote_ip']&#125; worker_id:&#123;$serv-&gt;worker_id&#125; work_pid:&#123;$serv-&gt;worker_pid&#125; fd:&#123;$fd&#125; from_id:&#123;$from_id&#125; data:&#123;$data&#125;"</span> . PHP_EOL;<br><br>        \tcpTest::aa();<br>        $res_data = [<span class="hljs-string">'time'</span> =&gt; date(<span class="hljs-string">'Y-m-d H:i:s'</span>)];<br>        $serv-&gt;send($fd, json_encode($res_data));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onClose</span><span class="hljs-params">($serv, $fd, $from_id)</span> </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">" worker_id:&#123;$serv-&gt;worker_id&#125; work_pid:&#123;$serv-&gt;worker_pid&#125; fd:&#123;$fd&#125; from_id:&#123;$from_id&#125;"</span> . PHP_EOL . PHP_EOL;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">self</span>::$serv <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">self</span>)) &#123;<br>            <span class="hljs-keyword">self</span>::$serv = <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>::$serv;<br>    &#125;<br><br>&#125;<br>$res = \Server::inst();<br></code></pre></td></tr></table></figure><p>tcp_client.php</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTime</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">list</span>($micro, $time) = explode(<span class="hljs-string">' '</span>, microtime());<br>    <span class="hljs-keyword">return</span> $time + $micro;<br>&#125;<br><br>$begin = getTime();<br>$_client = <span class="hljs-keyword">new</span> \swoole_client(SWOOLE_SOCK_TCP | SWOOLE_KEEP);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span> == $_client-&gt;connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">9577</span>, <span class="hljs-number">10</span>)) &#123;<br>    printf(<span class="hljs-string">"err_msg: %s err_code: %s"</span> . PHP_EOL, var_export($_client-&gt;errMsg, <span class="hljs-keyword">true</span>), var_export($_client-&gt;errCode, <span class="hljs-keyword">true</span>));<br>&#125;<br><br>$_client-&gt;send(<span class="hljs-string">'hello'</span>);<br><br>$res = $_client-&gt;recv();<br>$end = getTime();<br><br>$data = json_decode($res, <span class="hljs-keyword">true</span>);<br>printf(<span class="hljs-string">"res: %s"</span> . PHP_EOL, var_export($data, <span class="hljs-keyword">true</span>));<br><span class="hljs-keyword">echo</span> $end - $begin . PHP_EOL;<br></code></pre></td></tr></table></figure><p>分别运行服务端和客户端，<code>slowlog</code>内容出现乱码。<br><img src="/images/15891279424241.jpg" alt=""></p><p>怎么会乱码了，太诡异了。vim 打开各种调编码没用，而且只是一部分乱码，可以猜出每行最后的是行号。<br>谷歌下好像也没有人遇到这问题，看下<code>github issues</code>发现这个功能后续版本都砍掉了，真是令人痛心。<br>编译个 PHP 5.6 的试下如果没问题，升级个小版本的 PHP 还是可以接受的，但结果依然是乱码。<br>这上古版本的扩展，可如何是好，天塌了有高个子顶着，没办法咱就的是那个高个子，下个扩展源码看看到底哪出问题了。</p><h2 id="逻辑梳理与修复"><a href="#逻辑梳理与修复" class="headerlink" title="逻辑梳理与修复"></a>逻辑梳理与修复</h2><p>结合<code>swoole slowlog</code>的文档与源码，梳理了<code>slowlog</code>执行逻辑：</p><ul><li>首先在服务端 start 的方法中增加了一个<code>MANAGER_TIMER</code>类型的 hook，通过双向链表存储。在服务端启动后 manage 进程开始事件循环，调用<code>alarm(request_slowlog_timeout)</code>，在 <code>request_slowlog_timeout</code> 秒之后向当前进程发送<code>SIGALRM</code>信号，当 manage 进程收到<code>SIGALRM</code>信号后，会设置一个<code>alarm()</code>，再回调所有<code>MANAGER_TIMER</code>类型的 hook。</li><li>在回调函数中，会遍历所有 Work/Task 进程，检查是否超时，如果超时则调用 <code>ptrace</code> 开启跟踪，同时进程进入中止状态。</li><li>现在开始<code>slowlog</code>逻辑，使用<code>ptrace</code>通过<code>current_execute_data</code>加上结构体属性的偏移量后的内存地址获取函数名、文件与行号后写入日志文件。</li><li><code>slowlog</code>记录完成再次调用<code>ptrace</code>结束跟踪，进程继续执行。</li></ul><p>当获取函数、文件时相当于从一段内存连续的读取然后拼接。而行号一次就行。这块逻辑简单，但是需要对内部结构体指针和内存非常熟悉才行，真是触及到了我的知识盲区。各种尝试修改后发现先获取下一个地址再进行后续处理就可以取到正确的字符串。</p><p><code>swoole_trace.c</code>中</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trace_get_strz</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> traced_pid, <span class="hljs-keyword">char</span> *buf, <span class="hljs-keyword">size_t</span> sz, <span class="hljs-keyword">long</span> addr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">long</span> l = addr;<br>    <span class="hljs-keyword">char</span> *lc = (<span class="hljs-keyword">char</span> *) &amp;l;<br><br>    <span class="hljs-comment">// 添加这个代码块，先获取下一个地址，再进行处理</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; trace_get_long(traced_pid, addr, &amp;l)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    i = l % SIZEOF_LONG;<br>    l -= i;<br>    <span class="hljs-keyword">for</span> (addr = l;; addr += SIZEOF_LONG)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; trace_get_long(traced_pid, addr, &amp;l))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (; i &lt; SIZEOF_LONG; i++)<br>        &#123;<br>            --sz;<br>            <span class="hljs-keyword">if</span> (sz &amp;&amp; lc[i])<br>            &#123;<br>                *buf++ = lc[i];<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            *buf = <span class="hljs-string">'\0'</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        i = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trace_get_long</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> traced_pid, <span class="hljs-keyword">long</span> addr, <span class="hljs-keyword">long</span> *data)</span></span><br><span class="hljs-function"></span>&#123;<br>    errno = <span class="hljs-number">0</span>;<br>    *data = ptrace(PTRACE_PEEKDATA, traced_pid, (<span class="hljs-keyword">void</span> *) addr, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (*data &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新编译后再运行测试，一切正常了。</p><p><img src="/images/15891288984203.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，乱码修复了，但可真是没少调试。明白了实现逻辑也就明白了为何后续版本这个功能被砍掉了。</p><ul><li>完全依赖 alarm 所以最小粒度是秒。</li><li>循环检测所以跨两个时间窗口的超时是无法记录的。</li><li>通过内存地址结构体偏移获取函数、文件，当数据结构变动相当于重新写。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先说结果：fork 了 swoole 的源码，修复之后打了个 &lt;a href=&quot;https://github.com/zyh94946/swoole-src/releases/tag/v1.10.7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v1.10
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ibelieving.io/tags/PHP/"/>
    
      <category term="Swoole" scheme="https://ibelieving.io/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>用 Consul 和 Traefik 实现 Docker 容器的服务注册与发现</title>
    <link href="https://ibelieving.io/2020/02/06/consul_and_traefik_micro_service/"/>
    <id>https://ibelieving.io/2020/02/06/consul_and_traefik_micro_service/</id>
    <published>2020-02-06T14:43:52.000Z</published>
    <updated>2020-02-06T14:46:53.637Z</updated>
    
    <content type="html"><![CDATA[<p>docker 实现应用的容器化<br>consul 集群实现服务的注册、发现<br>traefik 处理外部流量的负载均衡与路由</p><h2 id="启动-consul-集群与-docker"><a href="#启动-consul-集群与-docker" class="headerlink" title="启动 consul 集群与 docker"></a>启动 consul 集群与 docker</h2><p>通过 vagrant 起三台虚拟机实现基本的 consul 集群环境（为了节约资源把 docker 也运行在这上面了）。<br>consul 的 vagrant 配置文件如下：</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># -*- mode: ruby -*-</span><br><span class="hljs-comment"># vi: set ft=ruby :</span><br><br><span class="hljs-comment"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span><br><span class="hljs-comment"># configures the configuration version (we support older styles for</span><br><span class="hljs-comment"># backwards compatibility). Please don't change it unless you know what</span><br><span class="hljs-comment"># you're doing.</span><br>Vagrant.configure("2") <span class="hljs-keyword">do</span> |config|<br><br>$script = &lt;&lt;SCRIPT<br><br>echo <span class="hljs-string">"Installing"</span><br><br>yum <span class="hljs-keyword">install</span> -y wget<br>wget -O /etc/yum.repos.d/CentOS-Base.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/Centos<span class="hljs-number">-7.</span>repo<br>wget -O /etc/yum.repos.d/epel.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/epel<span class="hljs-number">-7.</span>repo<br>yum clean <span class="hljs-keyword">all</span><br>yum makecache<br><br>yum <span class="hljs-keyword">install</span> -y jq unzip vim wget net-tools bind-utils dnsmasq<br><br>sudo cp /vagrant/consul /usr/<span class="hljs-keyword">bin</span>/consul<br><br>echo <span class="hljs-string">"Installing docker.."</span> <br>sudo yum <span class="hljs-keyword">install</span> -y yum-utils device-mapper-persistent-<span class="hljs-keyword">data</span> lvm2<br>sudo yum-config-manager <span class="hljs-comment">--add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br>sudo yum <span class="hljs-keyword">install</span> -y docker-ce docker-ce-cli containerd.io<br>sudo systemctl <span class="hljs-keyword">start</span> docker<br><br>echo <span class="hljs-string">"success"</span> <br><br>SCRIPT<br>  <span class="hljs-comment"># The most common configuration options are documented and commented below.</span><br>  <span class="hljs-comment"># For a complete reference, please see the online documentation at</span><br>  <span class="hljs-comment"># https://docs.vagrantup.com.</span><br><br>  <span class="hljs-comment"># Every Vagrant development environment requires a box. You can search for</span><br>  <span class="hljs-comment"># boxes at https://vagrantcloud.com/search.</span><br>  config.vm.box = <span class="hljs-string">"centos/7"</span><br>  config.vm.provision <span class="hljs-string">"shell"</span>, inline: $script<br><br>  config.vm.define <span class="hljs-string">"node1"</span> <span class="hljs-keyword">do</span> |node1|<br>    node1.vm.hostname = <span class="hljs-string">"node1"</span><br>    node1.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.11"</span><br><br>  <span class="hljs-keyword">end</span><br><br>  config.vm.define <span class="hljs-string">"node2"</span> <span class="hljs-keyword">do</span> |node2|<br>    node2.vm.hostname = <span class="hljs-string">"node2"</span><br>    node2.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.12"</span><br>  <span class="hljs-keyword">end</span><br><br>  config.vm.define <span class="hljs-string">"node3"</span> <span class="hljs-keyword">do</span> |node3|<br>    node3.vm.hostname = <span class="hljs-string">"node3"</span><br>    node3.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.13"</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-comment"># Disable automatic box update checking. If you disable this, then</span><br>  <span class="hljs-comment"># boxes will only be checked for updates when the user runs</span><br>  <span class="hljs-comment"># `vagrant box outdated`. This is not recommended.</span><br>  config.vm.box_check_update = <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine. In the example below,</span><br>  <span class="hljs-comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span><br>  <span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> This will enable public access to the opened port</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine and only allow access</span><br>  <span class="hljs-comment"># via 127.0.0.1 to disable public access</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span><br><br>  <span class="hljs-comment"># Create a private network, which allows host-only access to the machine</span><br>  <span class="hljs-comment"># using a specific IP.</span><br>  <span class="hljs-comment"># config.vm.network "private_network", ip: "192.168.33.10"</span><br><br>  <span class="hljs-comment"># Create a public network, which generally matched to bridged network.</span><br>  <span class="hljs-comment"># Bridged networks make the machine appear as another physical device on</span><br>  <span class="hljs-comment"># your network.</span><br>  <span class="hljs-comment"># config.vm.network "public_network"</span><br><br>  <span class="hljs-comment"># Share an additional folder to the guest VM. The first argument is</span><br>  <span class="hljs-comment"># the path on the host to the actual folder. The second argument is</span><br>  <span class="hljs-comment"># the path on the guest to mount the folder. And the optional third</span><br>  <span class="hljs-comment"># argument is a set of non-required options.</span><br>  <span class="hljs-comment"># config.vm.synced_folder "../data", "/vagrant_data"</span><br><br>  <span class="hljs-comment"># Provider-specific configuration so you can fine-tune various</span><br>  <span class="hljs-comment"># backing providers for Vagrant. These expose provider-specific options.</span><br>  <span class="hljs-comment"># Example for VirtualBox:</span><br>  <span class="hljs-comment">#</span><br>   config.vm.provider <span class="hljs-string">"virtualbox"</span> <span class="hljs-keyword">do</span> |vb|<br>  <span class="hljs-comment">#   # Display the VirtualBox GUI when booting the machine</span><br>  <span class="hljs-comment">#   vb.gui = true</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment">#   # Customize the amount of memory on the VM:</span><br>     vb.memory = <span class="hljs-string">"1024"</span><br>   <span class="hljs-keyword">end</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># View the documentation for the provider you are using for more</span><br>  <span class="hljs-comment"># information on available options.</span><br><br>  <span class="hljs-comment"># Enable provisioning with a shell script. Additional provisioners such as</span><br>  <span class="hljs-comment"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span><br>  <span class="hljs-comment"># documentation for more information about their specific syntax and use.</span><br>  <span class="hljs-comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span><br>  <span class="hljs-comment">#   apt-get update</span><br>  <span class="hljs-comment">#   apt-get install -y apache2</span><br>  <span class="hljs-comment"># SHELL</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>为了节省时间我直接下载好了 consul 的可执行文件放到了 vagrant 配置文件同目录下，vagrant 会把当前目录下的文件都复制进虚拟机的 <code>/vagrant</code> 目录下，还有三个节点的 consul 配置文件。</p><p>node1</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"primary_datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"bootstrap_expect"</span>:<span class="hljs-number">3</span>,<br>    <span class="hljs-attr">"advertise_addr"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>    <span class="hljs-attr">"bind_addr"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>    <span class="hljs-attr">"client_addr"</span>:<span class="hljs-string">"0.0.0.0"</span>,<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"node_name"</span>:<span class="hljs-string">"node1"</span>,<br>    <span class="hljs-attr">"ui"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"data_dir"</span>:<span class="hljs-string">"/opt/consul"</span>,<br>    <span class="hljs-attr">"enable_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"enable_local_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"log_file"</span>:<span class="hljs-string">"/opt/consul/"</span>,<br>    <span class="hljs-attr">"log_level"</span>:<span class="hljs-string">"info"</span>,<br>    <span class="hljs-attr">"log_rotate_duration"</span>:<span class="hljs-string">"24h"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>node2</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"primary_datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"advertise_addr"</span>: <span class="hljs-string">"172.17.17.12"</span>,<br>    <span class="hljs-attr">"bind_addr"</span>: <span class="hljs-string">"172.17.17.12"</span>,<br>    <span class="hljs-attr">"client_addr"</span>:<span class="hljs-string">"0.0.0.0"</span>,<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"node_name"</span>:<span class="hljs-string">"node2"</span>,<br>    <span class="hljs-attr">"ui"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"data_dir"</span>:<span class="hljs-string">"/opt/consul"</span>,<br>    <span class="hljs-attr">"enable_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"enable_local_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"log_file"</span>:<span class="hljs-string">"/opt/consul/"</span>,<br>    <span class="hljs-attr">"log_level"</span>:<span class="hljs-string">"info"</span>,<br>    <span class="hljs-attr">"log_rotate_duration"</span>:<span class="hljs-string">"24h"</span>,<br>    <span class="hljs-attr">"start_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ],<br>    <span class="hljs-attr">"retry_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>node3</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"primary_datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"advertise_addr"</span>: <span class="hljs-string">"172.17.17.13"</span>,<br>    <span class="hljs-attr">"bind_addr"</span>: <span class="hljs-string">"172.17.17.13"</span>,<br>    <span class="hljs-attr">"client_addr"</span>:<span class="hljs-string">"0.0.0.0"</span>,<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"node_name"</span>:<span class="hljs-string">"node3"</span>,<br>    <span class="hljs-attr">"ui"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"data_dir"</span>:<span class="hljs-string">"/opt/consul"</span>,<br>    <span class="hljs-attr">"enable_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"enable_local_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"log_file"</span>:<span class="hljs-string">"/opt/consul/"</span>,<br>    <span class="hljs-attr">"log_level"</span>:<span class="hljs-string">"info"</span>,<br>    <span class="hljs-attr">"log_rotate_duration"</span>:<span class="hljs-string">"24h"</span>,<br>    <span class="hljs-attr">"start_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ],<br>    <span class="hljs-attr">"retry_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>三个节点分别是</p><ul><li>node1 172.17.17.11</li><li>node2 172.17.17.12</li><li>node3 172.17.17.13</li></ul><p>运行 <code>vagrant up --provider=virtualbox</code> 把三个节点启动。</p><p>分别进入三个节点先 <code>sudo su -</code> 切换成 root 用户，然后把 consul 起来，再 exit 退出就会后台运行了。</p><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node1</span> ~]<span class="hljs-meta"># consul agent -config-file /vagrant/node1.json &amp;</span><br>[root<span class="hljs-symbol">@node2</span> ~]<span class="hljs-meta"># consul agent -config-file /vagrant/node2.json &amp;</span><br>[root<span class="hljs-symbol">@node3</span> ~]<span class="hljs-meta"># consul agent -config-file /vagrant/node3.json &amp;</span><br></code></pre></td></tr></table></figure><p>在三个节点上分别通过 docker 运行 web 服务，对外端口是 32768</p><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>node1 ~]# docker run -d -p <span class="hljs-number">32768</span>:<span class="hljs-number">80</span> --name test containous/whoami<br></code></pre></td></tr></table></figure><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>在三个节点上分别把刚才的 web 服务注册到 consul，这一步在实际项目中可以写到 docker image build 中，然后在容器启动的时候就注册到 consul。</p><figure class="hljs highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">root@</span>node1 ~]# curl --request PUT --<span class="hljs-keyword">data</span> <span class="hljs-meta">@web</span>.json http:<span class="hljs-comment">//127.0.0.1:8500/v1/agent/service/register?replace-existing-checks=true</span><br></code></pre></td></tr></table></figure><p>web.json 内容如下</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"ID"</span>: <span class="hljs-string">"web"</span>,<br>  <span class="hljs-attr">"Name"</span>: <span class="hljs-string">"consul_web"</span>,<br>  <span class="hljs-attr">"Tags"</span>: [<br>    <span class="hljs-string">"whoami"</span><br>  ],<br>  <span class="hljs-attr">"Check"</span>: &#123;<br>    <span class="hljs-attr">"Args"</span>: [<span class="hljs-string">"curl"</span>, <span class="hljs-string">"172.17.17.11:32768"</span>],<br>    <span class="hljs-attr">"Interval"</span>: <span class="hljs-string">"10s"</span>,<br>    <span class="hljs-attr">"Timeout"</span>: <span class="hljs-string">"3s"</span><br>  &#125;,<br>  <span class="hljs-attr">"Address"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>  <span class="hljs-attr">"Port"</span>: <span class="hljs-number">32768</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中增加了简单的健康检查, ip 部分每个节点修改成自己的。</p><p>现在通过访问 <code>http://172.17.17.11:8500/</code> 可以看到如下的信息</p><p><img src="/images/15809958438706.jpg" alt=""></p><p>随便找一个节点通过 consul 自带的 dns 查询下服务，可以看到返回了所有健康的服务节点。</p><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>node1 ~]# dig @<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -p <span class="hljs-number">8600</span> consul_web.service.consul<br><br>; &lt;&lt;&gt;&gt; DiG <span class="hljs-number">9.11</span><span class="hljs-number">.4</span>-P2-RedHat<span class="hljs-number">-9.11</span><span class="hljs-number">.4</span><span class="hljs-number">-9.</span>P2.el7 &lt;&lt;&gt;&gt; @<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -p <span class="hljs-number">8600</span> consul_web.service.consul<br>; (<span class="hljs-number">1</span> server found)<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="hljs-number">11034</span><br>;; flags: qr aa rd; QUERY: <span class="hljs-number">1</span>, ANSWER: <span class="hljs-number">3</span>, AUTHORITY: <span class="hljs-number">0</span>, ADDITIONAL: <span class="hljs-number">4</span><br>;; WARNING: recursion requested but <span class="hljs-keyword">not</span> available<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: <span class="hljs-number">0</span>, flags:; udp: <span class="hljs-number">4096</span><br>;; QUESTION SECTION:<br>;consul_web.service.consul.INA<br><br>;; ANSWER SECTION:<br>consul_web.service.consul. <span class="hljs-number">0</span>INA<span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.11</span><br>consul_web.service.consul. <span class="hljs-number">0</span>INA<span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.13</span><br>consul_web.service.consul. <span class="hljs-number">0</span>INA<span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.12</span><br><br>;; ADDITIONAL SECTION:<br>consul_web.service.consul. <span class="hljs-number">0</span>INTXT<span class="hljs-string">"consul-network-segment="</span><br>consul_web.service.consul. <span class="hljs-number">0</span>INTXT<span class="hljs-string">"consul-network-segment="</span><br>consul_web.service.consul. <span class="hljs-number">0</span>INTXT<span class="hljs-string">"consul-network-segment="</span><br><br>;; Query time: <span class="hljs-number">0</span> msec<br>;; SERVER: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>#<span class="hljs-number">8600</span>(<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>)<br>;; WHEN: Thu Feb <span class="hljs-number">06</span> <span class="hljs-number">13</span>:<span class="hljs-number">10</span>:<span class="hljs-number">12</span> UTC <span class="hljs-number">2020</span><br>;; MSG SIZE  rcvd: <span class="hljs-number">210</span><br></code></pre></td></tr></table></figure><h2 id="服务发现-dns"><a href="#服务发现-dns" class="headerlink" title="服务发现 dns"></a>服务发现 dns</h2><p>通过 dnsmasq 将节点的 dns 修改为 consul 的，先创建配置文件 <code>/etc/dnsmasq.d/10-consul</code> 内容为</p><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">server=/consul/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>#<span class="hljs-number">8600</span><br>server=<span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span><br></code></pre></td></tr></table></figure><p>然后运行 <code>systemctl start dnsmasq</code> 启动 dnsmasq，再把 <code>/etc/resolv.conf</code> dns 服务器地址改成 <code>127.0.0.1</code>。</p><p>通过 curl 访问</p><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>node1 ~]# curl http:<span class="hljs-comment">//consul_web.service.consul:32768 -i</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Date: Thu, <span class="hljs-number">06</span> Feb <span class="hljs-number">2020</span> <span class="hljs-number">13</span>:<span class="hljs-number">19</span>:<span class="hljs-number">43</span> GMT<br>Content-Length: <span class="hljs-number">178</span><br>Content-Type: text/plain; charset=utf<span class="hljs-number">-8</span><br><br>Hostname: <span class="hljs-number">2</span>cc06cae3b6e<br>IP: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>IP: <span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>RemoteAddr: <span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.11</span>:<span class="hljs-number">54108</span><br>GET / HTTP/<span class="hljs-number">1.1</span><br>Host: consul_web.service.consul:<span class="hljs-number">32768</span><br>User-Agent: curl/<span class="hljs-number">7.29</span><span class="hljs-number">.0</span><br>Accept: *<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>把 docker 中 dns 配置修改为当前节点的，配置文件 <code>/etc/docker/daemon.json</code></p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"dns"</span>: [<span class="hljs-string">"172.17.17.11"</span>],<br>    <span class="hljs-attr">"dns-search"</span>: [<span class="hljs-string">"service.consul"</span>],<br>&#125;<br></code></pre></td></tr></table></figure><p>这样在 docker 容器内部就可以通过 consul 的 dns 来进行服务发现了。现在服务的注册与内部的服务发现都已经完成了。</p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p>对于外部流量的进入与路由使用 Traefik 来管理。</p><p>起一台跑 traefik 的 vagrant 配置文件如下，同样下载了 traefik 的可执行文件到当前目录。</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># -*- mode: ruby -*-</span><br><span class="hljs-comment"># vi: set ft=ruby :</span><br><br><span class="hljs-comment"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span><br><span class="hljs-comment"># configures the configuration version (we support older styles for</span><br><span class="hljs-comment"># backwards compatibility). Please don't change it unless you know what</span><br><span class="hljs-comment"># you're doing.</span><br>Vagrant.configure("2") <span class="hljs-keyword">do</span> |config|<br><br>$script = &lt;&lt;SCRIPT<br><br>yum <span class="hljs-keyword">install</span> -y wget<br>wget -O /etc/yum.repos.d/CentOS-Base.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/Centos<span class="hljs-number">-7.</span>repo<br>wget -O /etc/yum.repos.d/epel.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/epel<span class="hljs-number">-7.</span>repo<br>yum clean <span class="hljs-keyword">all</span><br>yum makecache<br><br>yum <span class="hljs-keyword">install</span> -y jq unzip vim wget net-tools bind-utils dnsmasq<br><br>sudo cp /vagrant/consul /usr/<span class="hljs-keyword">bin</span>/consul<br>sudo cp /vagrant/traefik /usr/<span class="hljs-keyword">bin</span>/traefik<br><br>echo <span class="hljs-string">"success"</span><br><br>SCRIPT<br>  <span class="hljs-comment"># The most common configuration options are documented and commented below.</span><br>  <span class="hljs-comment"># For a complete reference, please see the online documentation at</span><br>  <span class="hljs-comment"># https://docs.vagrantup.com.</span><br><br>  <span class="hljs-comment"># Every Vagrant development environment requires a box. You can search for</span><br>  <span class="hljs-comment"># boxes at https://vagrantcloud.com/search.</span><br>  config.vm.box = <span class="hljs-string">"centos/7"</span><br>  config.vm.provision <span class="hljs-string">"shell"</span>, inline: $script<br><br>  config.vm.define <span class="hljs-string">"traefik"</span> <span class="hljs-keyword">do</span> |traefik|<br>      traefik.vm.hostname = <span class="hljs-string">"traefik"</span><br>      traefik.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.21"</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-comment"># Disable automatic box update checking. If you disable this, then</span><br>  <span class="hljs-comment"># boxes will only be checked for updates when the user runs</span><br>  <span class="hljs-comment"># `vagrant box outdated`. This is not recommended.</span><br>  config.vm.box_check_update = <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine. In the example below,</span><br>  <span class="hljs-comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span><br>  <span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> This will enable public access to the opened port</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine and only allow access</span><br>  <span class="hljs-comment"># via 127.0.0.1 to disable public access</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span><br><br>  <span class="hljs-comment"># Create a private network, which allows host-only access to the machine</span><br>  <span class="hljs-comment"># using a specific IP.</span><br>  <span class="hljs-comment"># config.vm.network "private_network", ip: "192.168.33.10"</span><br><br>  <span class="hljs-comment"># Create a public network, which generally matched to bridged network.</span><br>  <span class="hljs-comment"># Bridged networks make the machine appear as another physical device on</span><br>  <span class="hljs-comment"># your network.</span><br>  <span class="hljs-comment"># config.vm.network "public_network"</span><br><br>  <span class="hljs-comment"># Share an additional folder to the guest VM. The first argument is</span><br>  <span class="hljs-comment"># the path on the host to the actual folder. The second argument is</span><br>  <span class="hljs-comment"># the path on the guest to mount the folder. And the optional third</span><br>  <span class="hljs-comment"># argument is a set of non-required options.</span><br>  <span class="hljs-comment"># config.vm.synced_folder "../data", "/vagrant_data"</span><br><br>  <span class="hljs-comment"># Provider-specific configuration so you can fine-tune various</span><br>  <span class="hljs-comment"># backing providers for Vagrant. These expose provider-specific options.</span><br>  <span class="hljs-comment"># Example for VirtualBox:</span><br>  <span class="hljs-comment">#</span><br>   config.vm.provider <span class="hljs-string">"virtualbox"</span> <span class="hljs-keyword">do</span> |vb|<br>  <span class="hljs-comment">#   # Display the VirtualBox GUI when booting the machine</span><br>  <span class="hljs-comment">#   vb.gui = true</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment">#   # Customize the amount of memory on the VM:</span><br>     vb.memory = <span class="hljs-string">"1024"</span><br>   <span class="hljs-keyword">end</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># View the documentation for the provider you are using for more</span><br>  <span class="hljs-comment"># information on available options.</span><br><br>  <span class="hljs-comment"># Enable provisioning with a shell script. Additional provisioners such as</span><br>  <span class="hljs-comment"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span><br>  <span class="hljs-comment"># documentation for more information about their specific syntax and use.</span><br>  <span class="hljs-comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span><br>  <span class="hljs-comment">#   apt-get update</span><br>  <span class="hljs-comment">#   apt-get install -y apache2</span><br>  <span class="hljs-comment"># SHELL</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>节点为</p><ul><li>traefik 172.17.17.21</li></ul><p>在 traefik 上运行一个 client 模式的 consul 的 agent，加入 consul 的集群</p><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>traefik ~]# consul agent -data-dir /opt/consul -node=agent_traefik -bind=<span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.21</span> -join <span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.11</span> &amp;<br></code></pre></td></tr></table></figure><p>然后运行 traefik</p><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@traefik</span> ~]<span class="hljs-meta"># traefik --configFile=/vagrant/config/traefik.toml</span><br></code></pre></td></tr></table></figure><p>配置文件 <code>/vagrant/config/traefik.toml</code> 内容</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[global]</span><br>  checkNewVersion = true<br>  sendAnonymousUsage = false<br><br><span class="hljs-section">[api]</span><br>  insecure = true<br>  debug = true<br>  dashboard = true<br><br><span class="hljs-section">[log]</span><br>  filePath = "/vagrant/logs/traefik.log"<br>  level = "DEBUG"<br><span class="hljs-comment">#  format = "json"</span><br><span class="hljs-section">[accessLog]</span><br>  filePath = "/vagrant/logs/access.log"<br><br><span class="hljs-section">[entryPoints]</span><br><span class="hljs-section">  [entryPoints.web]</span><br>    address = ":80"<br><span class="hljs-section">  [entryPoints.web-secure]</span><br>    address = ":443"<br><br><span class="hljs-comment">#[certificatesResolvers.sample.acme]</span><br><span class="hljs-comment">#  email = ""</span><br><span class="hljs-comment">#  storage = "acme.json"</span><br><span class="hljs-comment">#  [certificatesResolvers.sample.acme.httpChallenge]</span><br><span class="hljs-comment">#    entryPoint = "web"</span><br><span class="hljs-comment">#  caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"</span><br><span class="hljs-comment">#  [certificatesResolvers.sample.acme.tlsChallenge]</span><br><br><span class="hljs-section">[providers]</span><br><span class="hljs-section">  [providers.consulCatalog]</span><br>    exposedByDefault = false<br>    refreshInterval = "5s"<br><span class="hljs-section">  [providers.file]</span><br>    filename = "/vagrant/config/static.toml"<br>    watch = true<br></code></pre></td></tr></table></figure><p>配置文件 <code>/vagrant/config/static.toml</code></p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># 强制所有 http 请求转 https</span><br><span class="hljs-comment">#[http.routers.http-catchall]</span><br><span class="hljs-comment">#  rule = "hostregexp(`&#123;host:.+&#125;`)"</span><br><span class="hljs-comment">#  entrypoints = ["web"]</span><br><span class="hljs-comment">#  service = "api@internal"</span><br><span class="hljs-comment">#  middlewares = ["toHttps"]</span><br><br><span class="hljs-comment"># https 路由</span><br><span class="hljs-comment">#[http.routers.my-api]</span><br><span class="hljs-comment">#  rule = "Host(`traefik.haozy.com`)"</span><br><span class="hljs-comment">#  service = "api@internal"</span><br><span class="hljs-comment">#  middlewares = ["auth"]</span><br><span class="hljs-comment">#  [http.routers.my-api.tls]</span><br><span class="hljs-comment">#    certResolver = "sample"</span><br><span class="hljs-comment">#    [[http.routers.my-api.tls.domains]]</span><br><span class="hljs-comment">#      main = "traefik.haozy.com"</span><br><br><span class="hljs-comment">#[http.middlewares.toHttps.redirectScheme]</span><br><span class="hljs-comment">#    scheme = "https"</span><br><br><span class="hljs-comment"># http 路由</span><br><span class="hljs-section">[http.routers.my-api-http]</span><br>  rule = "Host(`traefik.haozy.com`)"<br>  entrypoints = ["web"]<br>  service = "api@internal"<br>  middlewares = ["auth"]<br><br><span class="hljs-section">[http.middlewares.auth.basicAuth]</span><br>  <span class="hljs-comment"># 密码生成 echo $(htpasswd -nb haozy 123456)</span><br>  users = [<br>    "haozy:$$apr1$$pfkpgu.w$$jHQtt8T96PdvyojTBgh5E/",<br>  ]<br></code></pre></td></tr></table></figure><p>将域名 <code>traefik.haozy.com</code> host 指到 <code>172.17.17.21</code> ，访问 <code>traefik.haozy.com</code> 因为配了 auth 验证，输入用户名密码后就可以看到管理界面了。https 也很简单，因为本地测试先注释了对应的配置。</p><p>现在将 node1、node2、node3 节点上注册的 web 服务删除，在 web.json 中增加 traefik 相关的 tag，再重新注册。</p><p>web.json</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"ID"</span>: <span class="hljs-string">"web"</span>,<br>  <span class="hljs-attr">"Name"</span>: <span class="hljs-string">"consul_web"</span>,<br>  <span class="hljs-attr">"Tags"</span>: [<br>    <span class="hljs-string">"whoami"</span>,<br>    <span class="hljs-string">"traefik.enable=true"</span>,<br>    <span class="hljs-string">"traefik.http.routers.consul_web.rule=Host(`web.haozy.com`)"</span>,<br>    <span class="hljs-string">"traefik.http.routers.consul_web.entrypoints=web"</span>,<br>    <span class="hljs-string">"traefik.http.services.consul_web.loadbalancer.passhostheader=true"</span><br>  ],<br>  <span class="hljs-attr">"Check"</span>: &#123;<br>    <span class="hljs-attr">"Args"</span>: [<span class="hljs-string">"curl"</span>, <span class="hljs-string">"172.17.17.11:32768"</span>],<br>    <span class="hljs-attr">"Interval"</span>: <span class="hljs-string">"10s"</span>,<br>    <span class="hljs-attr">"Timeout"</span>: <span class="hljs-string">"3s"</span><br>  &#125;,<br>  <span class="hljs-attr">"Address"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>  <span class="hljs-attr">"Port"</span>: <span class="hljs-number">32768</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">root@</span>node1 ~]# curl --request PUT http:<span class="hljs-comment">//127.0.0.1:8500/v1/agent/service/deregister/web</span><br>[<span class="hljs-symbol">root@</span>node1 ~]# curl --request PUT --<span class="hljs-keyword">data</span> <span class="hljs-meta">@web</span>.json http:<span class="hljs-comment">//127.0.0.1:8500/v1/agent/service/register?replace-existing-checks=true</span><br></code></pre></td></tr></table></figure><p>现在通过 traefik 管理界面可以看到 <code>web.consul.com</code> 的路由信息，以及对应的后端服务。</p><p><img src="/images/15809977638894.jpg" alt=""><br><img src="/images/15809978310478.jpg" alt=""><br><img src="/images/15809978767331.jpg" alt=""></p><p>将域名 <code>web.haozy.com</code> 指向 <code>172.17.17.21</code>，请求会轮训请求所有后端服务。至此外部流量的负载均衡与路由就完成了，当然 traefik 中的 Routers 和 Middlewares 还可以实现很多复杂的处理。</p><p>再多说一点，traefik 2.0 开始分成静态配置文件和动态配置，在静态文件中配置的 Routers、Middlewares 之类的是可以在动态配置中调用的，省去了很多定义，比如调用静态配置文件中的 auth。<br><code>traefik.http.routers.consul_web.middlewares=auth@file</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;docker 实现应用的容器化&lt;br&gt;consul 集群实现服务的注册、发现&lt;br&gt;traefik 处理外部流量的负载均衡与路由&lt;/p&gt;&lt;h2 id=&quot;启动-consul-集群与-docker&quot;&gt;&lt;a href=&quot;#启动-consul-集群与-docker&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://ibelieving.io/tags/Docker/"/>
    
      <category term="微服务" scheme="https://ibelieving.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Consul" scheme="https://ibelieving.io/tags/Consul/"/>
    
      <category term="Traefik" scheme="https://ibelieving.io/tags/Traefik/"/>
    
  </entry>
  
  <entry>
    <title>年前线上问题总结</title>
    <link href="https://ibelieving.io/2020/01/30/last_bug_for_2019/"/>
    <id>https://ibelieving.io/2020/01/30/last_bug_for_2019/</id>
    <published>2020-01-30T15:46:46.000Z</published>
    <updated>2020-01-30T15:53:31.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>在家中除了带娃、看书也无事可做。把节前值班遇到的问题总结下。</p><p>除夕那天我们公司依然正常上班，很多同事都已经提前回家了，在的人也不多，中午吃完饭没什么事就都走了。突然领导发来贺电以为什么好事，居然线上出问题了。前端同事反馈后端无响应，这个反馈也是没谁了，问了下具体调用的后端url，某个同事的 php 项目，没辙硬上吧。找运维查了下对应的机器有四台，先上 kibana 看下 nginx access 日志有大量请求404，error 日志没问题。再看 php error 日志有响应很慢的请求，应该是进来了，再看下 php 慢日志看调用栈应该是走到了一个 redis 类。这时候运维还在先让运维看下 redis 有问题没。我接着追代码，看代码发现这老哥没用框架定义的 redis 实例化类，自己整了个，真难受啊，一行行看 redis 配置从哪取的八成是这 redis 的问题。这时候运维反馈线上 redis 没问题。我接着撸代码，终于看到调的配置名了，去项目下 grep 下。这一搜发现这个配置有测试环境的，有预发环境的，还有个默认的配置，线上配置文件没有，不用说线上环境肯定用的默认的配置，默认的配的是测试环境的 redis。然而测试环境因为春节放假都关机了。</p><p>问题查清楚了，加上了线上环境的 redis 配置。</p><p>但是这个 bug 太tm智障了，全是问题。</p><h3 id="生产环境-调-测试环境"><a href="#生产环境-调-测试环境" class="headerlink" title="生产环境 调 测试环境"></a>生产环境 调 测试环境</h3><p>生产环境和测试环境要实现网络隔离，配置文件方式还是有点老，整个配置中心。</p><h3 id="自行实现-redis-类"><a href="#自行实现-redis-类" class="headerlink" title="自行实现 redis 类"></a>自行实现 redis 类</h3><p>框架已经提供了 redis 类，还要自行实现，直接影响排查效率。屏蔽了 redis 链接不上，然后给前端扔了个 404。没有规矩不成方圆要多 code review 啊。</p><h2 id="另"><a href="#另" class="headerlink" title="另"></a>另</h2><p>最近新型冠状病毒肆虐异常，各地陆续启动公共卫生事件一级响应，春节假期国家也延长到了正月初十。北京这边有的村不让从外回京的人进村，要外隔离，也是没谁了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;在家中除了带娃、看书也无事可做。把节前值班遇到的问题总结下。&lt;/p&gt;&lt;p&gt;除夕那天我们公司依然正常上班，很多同事都已
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ibelieving.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Golang 与 PHP 的 json 序列化问题</title>
    <link href="https://ibelieving.io/2019/12/23/golang_and_php_json/"/>
    <id>https://ibelieving.io/2019/12/23/golang_and_php_json/</id>
    <published>2019-12-23T14:32:00.000Z</published>
    <updated>2019-12-24T06:49:07.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>最近在做 Golang 与 PHP 的 RPC 实现。因 PHP 业务端已上线稳定，Golang 方面则需要完全兼容。其中使用了 json 序列化，发现区别还是很大的，见下面代码。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php -a<br>php &gt; <span class="hljs-built_in">echo</span> json_encode(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>);<br><span class="hljs-string">"&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := <span class="hljs-string">"&lt;test我爱中国&gt;"</span><br>res, err := json.Marshal(st)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, <span class="hljs-keyword">string</span>(res)) <span class="hljs-comment">//  json is: "\u003ctest我爱中国\u003e"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>PHP 默认的 <code>json_encode()</code> 函数会把多字节字符转成 <code>\uXXXX</code> 当然通过设置 <code>JSON_UNESCAPED_UNICODE</code> 可以解决这个问题。这里不动 PHP 代码。<br>Golang 这里用 json 包的 Marshal 方法实现序列化，对多字节字符是不进行处理的。但是这个方法出于安全考虑会将”&lt;”, “&gt;”, “&amp;”这三个字符转成 <code>\uXXXX</code> 形式。这还不是最魔幻的，这个方法没有可选参数进行设置。</p><h1 id="取消转义特殊字符"><a href="#取消转义特殊字符" class="headerlink" title="取消转义特殊字符"></a>取消转义特殊字符</h1><p>看官网包说明通过 <code>json.NewEncoder()</code> 可以关闭转义。</p><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := <span class="hljs-string">"&lt;test我爱中国&gt;"</span><br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, jsonBuf.String()) <span class="hljs-comment">// json is: "&lt;test我爱中国&gt;"</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义序列化方法"><a href="#自定义序列化方法" class="headerlink" title="自定义序列化方法"></a>自定义序列化方法</h1><p>对多字节字符转义，只能通过自定义序列化方法，官网也有包说明非常人性化。</p><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"strconv"</span><br>)<br><br><span class="hljs-keyword">type</span> cusString <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs cusString)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">byte</span>(strconv.QuoteToASCII(<span class="hljs-keyword">string</span>(cs))), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := cusString(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>)<br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, jsonBuf.String()) <span class="hljs-comment">// json is: "&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样 json 序列化后的结果就和 PHP 下的一样了。分别计算下 MD5 。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php -a<br>Interactive shell<br><br>php &gt; <span class="hljs-built_in">echo</span> json_encode(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>);<br><span class="hljs-string">"&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br>php &gt; <span class="hljs-built_in">echo</span> md5(json_encode(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>));<br>5ec1bfc0a2db38f985cdae47b2012ca5<br>php &gt;<br>php &gt;<br></code></pre></td></tr></table></figure><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"strconv"</span><br><span class="hljs-string">"crypto/md5"</span><br>)<br><br><span class="hljs-keyword">type</span> cusString <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs cusString)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">byte</span>(strconv.QuoteToASCII(<span class="hljs-keyword">string</span>(cs))), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := cusString(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>)<br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, jsonBuf.String()) <span class="hljs-comment">// json is: "&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br>fmt.Printf(<span class="hljs-string">"md5 is: %x"</span>, md5.Sum(jsonBuf.Bytes())) <span class="hljs-comment">// md5 is: 5543e9185c4bde6311dc9c7605ca92b8</span><br>&#125;<br></code></pre></td></tr></table></figure><p>MD5 值不一样，这就很魔幻了。开始大胆假设，小心求证。</p><h1 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h1><p>MD5 算法有问题，太扯了这是不可能的，试了别的 hash 算法也是一样。<br>json 序列化有问题，转 string 后确实没看出问题，直接输出 bytes 格式。发现是这样的。</p><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">34</span> <span class="hljs-number">60</span> <span class="hljs-number">116</span> <span class="hljs-number">101</span> <span class="hljs-number">115</span> <span class="hljs-number">116</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">54</span> <span class="hljs-number">50</span> <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">55</span> <span class="hljs-number">50</span> <span class="hljs-number">51</span> <span class="hljs-number">49</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">52</span> <span class="hljs-number">101</span> <span class="hljs-number">50</span> <span class="hljs-number">100</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">53</span> <span class="hljs-number">54</span> <span class="hljs-number">102</span> <span class="hljs-number">100</span> <span class="hljs-number">62</span> <span class="hljs-number">34</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>最后面是个10，10在 Ascii 表里是 LR new line 换行符。看来这个 json 序列化果然有问题啊，看看序列化源码怎么写的：</p><p>源码在这里 <a href="https://sourcegraph.com/github.com/golang/go@go1.13/-/blob/src/encoding/json/stream.go?utm_source=share#L213" target="_blank" rel="noopener">json stream</a></p><p>至于为什么会添加一个换行符，注释是这么说的:</p><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Terminate <span class="hljs-keyword">each</span> <span class="hljs-built_in">value</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> newline.<br>This makes <span class="hljs-keyword">the</span> output look <span class="hljs-keyword">a</span> little nicer<br>when debugging, <span class="hljs-keyword">and</span> some kind <span class="hljs-keyword">of</span> <span class="hljs-literal">space</span><br>is required <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> encoded <span class="hljs-built_in">value</span> was <span class="hljs-keyword">a</span> <span class="hljs-built_in">number</span>,<br>so that <span class="hljs-keyword">the</span> reader knows there aren<span class="hljs-string">'t more</span><br></code></pre></td></tr></table></figure><p>说白了 <code>json.NewEncoder()</code> 处理的是流式数据，多个数据间为了分隔加了 <code>\n</code>。</p><p>最终代码如下，<a href="https://play.golang.org/p/XUrUiLBsoAQ" target="_blank" rel="noopener">Go Playground</a>。</p><p>如果你看到这里说明你可能遇到了相似的问题，如果没有解决你的问题，从文档或源码中找找答案吧。</p><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"strconv"</span><br><span class="hljs-string">"crypto/md5"</span><br>)<br><br><span class="hljs-keyword">type</span> cusString <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs cusString)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">byte</span>(strconv.QuoteToASCII(<span class="hljs-keyword">string</span>(cs))), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := cusString(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>)<br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br><br>jsonBytes := jsonBuf.Bytes()<br>resultJson := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> jsonBytes[<span class="hljs-built_in">len</span>(jsonBytes)<span class="hljs-number">-1</span>] == <span class="hljs-string">'\n'</span> &#123;<br>resultJson = jsonBytes[:<span class="hljs-built_in">len</span>(jsonBytes)<span class="hljs-number">-1</span>]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>resultJson = jsonBytes<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">"json is: %s \r\n"</span>, <span class="hljs-keyword">string</span>(resultJson)) <span class="hljs-comment">// json is: "&lt;test\u6211\u7231\u4e2d\u56fd&gt;" </span><br>fmt.Printf(<span class="hljs-string">"md5 is: %x \r\n"</span>, md5.Sum(resultJson)) <span class="hljs-comment">// md5 is: 5ec1bfc0a2db38f985cdae47b2012ca5 </span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;最近在做 Golang 与 PHP 的 RPC 实现。因 PHP 业务端已上线稳定，Golang 方面则需要完全兼容
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ibelieving.io/tags/PHP/"/>
    
      <category term="Go" scheme="https://ibelieving.io/tags/Go/"/>
    
      <category term="源码" scheme="https://ibelieving.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Golang 生成 O&#39;Reilly 在线学习平台的电子书</title>
    <link href="https://ibelieving.io/2019/10/31/golang_generate_oreilly_kindle_book/"/>
    <id>https://ibelieving.io/2019/10/31/golang_generate_oreilly_kindle_book/</id>
    <published>2019-10-31T13:49:27.000Z</published>
    <updated>2019-10-31T13:58:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>O’Reilly 是有名的动物书出版公司，当然他们也不仅仅出电子书还有很多别的业务。<a href="https://learning.oreilly.com/home/" target="_blank" rel="noopener">O’Reilly 在线学习平台</a>上有他们所有出版过的图书都是原版的，但是仅提供在线阅读，虽然也有 App，但是想在 kindle 上看提高阅读体验。</p><p>于是抽时间练习练习 Golang 写了个程序，生成 mobi 格式的电子书。Github 地址 <a href="https://github.com/zyh94946/oreilly_kindle_book" target="_blank" rel="noopener">oreilly_kindle_book</a> 。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul><li>目前仅支持 macOS、linux, windows 改改应该也可以，但是我手头没有 windows 测不了，或者编个 Docker image 也 ok。</li><li>需要 O’Reilly 在线学习平台的账号，这是必须的。</li><li>安装 <a href="https://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000765211" target="_blank" rel="noopener">kindlegen</a>，mobi 的生成就靠它。</li></ul><h2 id="oreilly-kindle-book-编译"><a href="#oreilly-kindle-book-编译" class="headerlink" title="oreilly_kindle_book 编译"></a>oreilly_kindle_book 编译</h2><p>基于 golang 1.13 开发，目前没有上传二进制包，自行编译吧。</p><p>推荐 clone 之后直接 <code>make &amp;&amp; make install</code>。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/zyh94946/oreilly_kindle_book.git<br>$ <span class="hljs-built_in">cd</span> oreilly_kindle_book<br>$ make &amp;&amp; make install<br>Building oreilly_kindle_book...<br>Building success...<br>Installing oreilly_kindle_book...<br>Install success to /usr/<span class="hljs-built_in">local</span>/bin/oreilly_kindle_book.<br>Usage of oreilly_kindle_book:<br>  -email string<br>    you login email of https://www.oreilly.com/member/<br>  -<span class="hljs-built_in">help</span><br>    <span class="hljs-built_in">help</span><br>  -n string<br>    the num of https://learning.oreilly.com/library/view/BOOK-NAME/***<br>  -p string<br>    you login password of https://www.oreilly.com/member/<br>  -version<br>    <span class="hljs-built_in">print</span> version and <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>当然 <code>go get</code> 也可以</p><figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/zyh94946/oreilly_kindle_book<br>$ <span class="hljs-keyword">go</span> install github.<span class="hljs-keyword">com</span>/zyh94946/oreilly_kindle_book<br></code></pre></td></tr></table></figure><h2 id="oreilly-kindle-book-使用"><a href="#oreilly-kindle-book-使用" class="headerlink" title="oreilly_kindle_book 使用"></a>oreilly_kindle_book 使用</h2><p>非常简单</p><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">oreilly_kindle_book </span>-n <span class="hljs-keyword">BOOK_NUM </span>-email YOU_EMAIL -p YOU_PASSWORD<br></code></pre></td></tr></table></figure><p>完成后 mobi 会生成在当前目录下。</p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><p>咱要 kindle 用，首先研究下 mobi 的生成。有两个特定格式的文件，一个 ncx (组织目录)，一个 opf (组织所有文件)，按格式来就能生成。开始梳理需要的资源看看可行性。完事准备写程序都爬下来，生成所需的格式，用 kindlegen 测试生成 mobi，大问题没有小问题不少，挨个解决。最后发现实现登录也不难索性加上了。编写过程中看了很多 go 原生包也使用了不少。</p><p>golang 需要注意的点不完全总结：</p><ul><li><code>go func(){}()</code> 实际执行的时间与其所属语句执行时间是不一样的。</li><li>通过 <code>chan</code> 控制并发。</li><li>大量字符串拼接不要用 <code>+</code> 时间与空间上都复杂。可用使用 <code>strings.Builder{}</code> 字节切片的概念。</li><li><code>os.Exit()</code> 结束程序后，<code>defer</code> 不会执行。</li><li>有问题多看看官方文档比什么都强 :)。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;O’Reilly 是有名的动物书出版公司，当然他们也不仅仅出电子书还有很多别的业务。&lt;a href=&quot;https://learning.oreilly.com/home/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;O’Reilly 在线学习平台&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Go" scheme="https://ibelieving.io/tags/Go/"/>
    
      <category term="爬虫" scheme="https://ibelieving.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Kindle" scheme="https://ibelieving.io/tags/Kindle/"/>
    
      <category term="mobi" scheme="https://ibelieving.io/tags/mobi/"/>
    
  </entry>
  
  <entry>
    <title>容器服务化方向的一些探索</title>
    <link href="https://ibelieving.io/2019/08/28/docker_traefik_micro_service/"/>
    <id>https://ibelieving.io/2019/08/28/docker_traefik_micro_service/</id>
    <published>2019-08-28T09:31:40.000Z</published>
    <updated>2019-08-28T09:31:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考<a href="https://ronggle.com/2018/cloud-labs/" target="_blank" rel="noopener">使用Docker打造自己的云平台</a>编写</p><p>本文基于 Docker Swarm Mode 实现容器化，虽然目前 k8s 更火一些，但实在是太重了，以后再折腾。<br>使用 traefik 来实现反向代理、负载均衡，traefik 还自带了服务发现、后端断路器、健康检查等，相当于是自带服务发现的 nginx。当然它还支持其他的容器编排工具如，服务发现工具如 Consul。<br>使用 Portainer 来管理 Docker 容器，可以兼容 Docker Swarm 模式。</p><p>Docker 的安装就不说了。装完初始化 Swarm 模式。</p><figure class="hljs highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>docker swarm init<br></code></pre></td></tr></table></figure><p>先设置一下环境变量。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DOCKER_DEV_PATH</span>=/usr/local/src/docker-dev<br></code></pre></td></tr></table></figure><p>日志文件都会统一存到 ${DOCKER_DEV_PATH}/logs。</p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p>新建一个编排文件 traefik.yml。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">version: <span class="hljs-string">'3.3'</span><br>services:<br>  reverse-proxy:<br>    image: traefik:<span class="hljs-number">1.7</span>-alpine<br>    command: --web --docker --docker.domain=cloud-labs<span class="hljs-selector-class">.io</span> --docker<span class="hljs-selector-class">.watch</span> --docker.swarmmode=true --loglevel=INFO --accesslog --accesslog.filepath=/logs/access<span class="hljs-selector-class">.log</span> --traefiklog --traefiklog.filepath=/logs/traefik.log<br>    deploy:<br>      mode: replicated<br>      replicas: <span class="hljs-number">1</span><br>      labels:<br>        - traefik.enable=true<br>        - traefik.backend=traefik<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:monitor<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik.port=<span class="hljs-number">8080</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>    networks:<br>      - proxy<br>    ports:<br>      - <span class="hljs-number">8081</span>:<span class="hljs-number">80</span><br>    volumes:<br>      - /var/run/docker<span class="hljs-selector-class">.sock</span>:/var/run/docker.sock<br>      - $&#123;DOCKER_DEV_PATH&#125;/logs/traefik:/logs<br>      - /dev/null:/traefik.toml<br>networks:<br>  proxy:<br></code></pre></td></tr></table></figure><p>简单解释下 labels 中配置的含义</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">traefik<span class="hljs-selector-class">.backend</span> 后端<br>traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span> 前端规则，满足此规则转发给后端<br>traefik<span class="hljs-selector-class">.port</span> 后端端口 <span class="hljs-number">8080</span> 是 traefik web 后台端口<br>traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span> 指定网络<br></code></pre></td></tr></table></figure><p>更多可用 labels 可用看该<a href="https://docs.traefik.io/configuration/backends/docker/#on-containers" target="_blank" rel="noopener">Traefik 文档</a></p><p>因为在腾讯云上做的测试没有域名备案，映射了8081端口到80。</p><p>部署traefik</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ docker stack deploy -c traefik<span class="hljs-selector-class">.yml</span> traefik<br></code></pre></td></tr></table></figure><p>完成后访问 monitor.cloud-labs.io:8081 就可以进入 traefik 的后台界面了（当然这个域名是要绑host的）。</p><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><p>Portainer是一个轻量级的Docker环境管理UI。</p><p>新建一个编排文件 portainer.yml。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3.3'</span><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  server:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">portainer/portainer</span><br><span class="hljs-attr">    command:</span> <span class="hljs-bullet">-H</span> <span class="hljs-attr">unix:///var/run/docker.sock</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">traefik_proxy</span><br><span class="hljs-attr">    deploy:</span><br><span class="hljs-attr">      labels:</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.enable=true</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.backend=portainer</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.frontend.rule=Host:console.cloud-labs.io</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.docker.network=traefik_proxy</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.port=9000</span><br><span class="hljs-attr">    volumes:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br><span class="hljs-attr">      - portainer:</span><span class="hljs-string">/data</span><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  traefik_proxy:</span><br><span class="hljs-attr">    external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-attr">  portainer:</span><br></code></pre></td></tr></table></figure><p>部署</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ docker stack deploy -c portainer<span class="hljs-selector-class">.yml</span> portainer<br></code></pre></td></tr></table></figure><p>访问 console.cloud-labs.io:8081 就可以管理 Docker 了。</p><h2 id="部署一个PHP服务"><a href="#部署一个PHP服务" class="headerlink" title="部署一个PHP服务"></a>部署一个PHP服务</h2><p>php服务部署其实还是有些麻烦的。一般前端起nginx将php请求转发到php-fpm，这个时候用的是FastCGI协议。但是目前traefik不支持FastCGI协议，估计以后也不会支持，所以php和nginx要一块部署。如下配置文件。<br>新建一个编排文件 nginx_php_web.yml，其中包含nginx和php。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs stylus">version: <span class="hljs-string">'3.3'</span><br>services:<br>  nginx:<br>   image: nginx:latest<br>   volumes:<br>     - $&#123;DOCKER_DEV_PATH&#125;/logs/nginx:/data/logs/nginx<br>     - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/code<br>     - ./site<span class="hljs-selector-class">.conf</span>:/etc/nginx/conf.d/default.conf<br>   depends_on:<br>     - php<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">2</span><br>     labels:<br>        - traefik.backend=nginx<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.passHostHeader</span>=true<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>        - traefik.port=<span class="hljs-number">80</span><br>  php:<br>   image: php:<span class="hljs-number">5.5</span>.<span class="hljs-number">38</span>-fpm<br>   volumes:<br>    - ./php<span class="hljs-selector-class">.ini</span>:/usr/local/etc/php/php.ini<br>    - ./php-fpm<span class="hljs-selector-class">.conf</span>:/usr/local/etc/php-fpm.conf<br>    - ./www<span class="hljs-selector-class">.conf</span>:/usr/local/etc/php-fpm.d/www.conf<br>    - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/code<br>    - $&#123;DOCKER_DEV_PATH&#125;/logs/php:/data/logs/php<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">3</span><br>     labels:<br>        - traefik.enable=false<br>networks:<br>  traefik_proxy:<br>    external: true<br></code></pre></td></tr></table></figure><p>部署</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ docker stack deploy -c nginx_php_web<span class="hljs-selector-class">.yml</span> nginx_php_web<br></code></pre></td></tr></table></figure><p>访问 domain.cloud-labs.io:8081 可以看到服务已经起来了。<br>但是这种方式会有问题</p><ul><li>因为请求是从traefik直接到nginx，做健康检查的话只能在nginx上写规则，这样会有问题。除非将nginx和php构建到一个镜像中，但是这又违反了docker的初衷。</li><li>经过traefik-&gt;nginx-&gt;php 性能也会应该有所损耗。</li></ul><p>另一种方式通过php的swoole扩展起一个http服务，直接将请求转发过去。</p><p>建一个Dockerfile，build一个带swoole的php镜像。这里用了最新的php版本。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> php:7.3.8-cli<br><span class="hljs-builtin-name">RUN</span> pecl channel-update pecl.php.net<br><span class="hljs-comment"># 从pecl安装扩展</span><br><span class="hljs-builtin-name">RUN</span> pecl install swoole-4.4.0 \<br>    &amp;&amp; docker-php-ext-<span class="hljs-builtin-name">enable</span> swoole<br></code></pre></td></tr></table></figure><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$ docker build -t php7<span class="hljs-number">.3</span><span class="hljs-number">.8</span>_swoole4<span class="hljs-number">.4</span><span class="hljs-number">.0</span> . &gt; build.log &amp;<br></code></pre></td></tr></table></figure><p>很简单没有遇见任何问题。</p><p>再建一个编排文件 php_web.yml。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stylus">version: <span class="hljs-string">'3.3'</span><br>services:<br>  swoole_http:<br>   image: php7.<span class="hljs-number">3.8</span>_swoole4.<span class="hljs-number">4.0</span>:latest<br>   command: php /code/httpServ<span class="hljs-selector-class">.php</span> <span class="hljs-number">8888</span><br>   volumes:<br>    - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/code<br>    - $&#123;DOCKER_DEV_PATH&#125;/logs/swoole:/data/logs/swoole<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">2</span><br>     labels:<br>        - traefik.backend=swoole_http<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.passHostHeader</span>=true<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>        - traefik.port=<span class="hljs-number">8888</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.hostname</span>=domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.port</span>=<span class="hljs-number">8888</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.path</span>=/healthcheck.php<br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.interval</span>=<span class="hljs-number">5s</span><br>networks:<br>  traefik_proxy:<br>    external: true<br></code></pre></td></tr></table></figure><p>其中做了健康检查每五秒一次。httpServ.php的内容整理完发到github上了，文末有说明。<br>部署起来。</p><figure class="hljs highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ docker <span class="hljs-keyword">stack</span> <span class="hljs-keyword">rm</span> nginx_php_web<br>$ docker <span class="hljs-keyword">stack</span> deploy -c php_web.yml php_web<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>traefik 界面<br><img src="/images/15669802286595.jpg" alt=""></p><p>Portainer 界面<br><img src="/images/15669806334566.jpg" alt=""></p><p>跑是跑起来了，但还有些问题。</p><ul><li>docker swarm目前只是单节点</li><li>容器日志、监控处理的不太好</li><li>压力测试也没有做</li><li>没有关联CI/CD</li></ul><p>坑挖的有点多慢慢填吧。。</p><p>文中所有配置文件都整理完发到github上了，地址 <a href="https://github.com/zyh94946/docker-dev" target="_blank" rel="noopener">https://github.com/zyh94946/docker-dev</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考&lt;a href=&quot;https://ronggle.com/2018/cloud-labs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用Docker打造自己的云平台&lt;/a&gt;编写&lt;/p&gt;&lt;p&gt;本文基于 Docker Swarm Mode 实现容
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://ibelieving.io/tags/Docker/"/>
    
      <category term="微服务" scheme="https://ibelieving.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="PHP" scheme="https://ibelieving.io/tags/PHP/"/>
    
      <category term="Swoole" scheme="https://ibelieving.io/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>PHP7 数组排序函数源码解析</title>
    <link href="https://ibelieving.io/2019/05/22/php7_function_sort/"/>
    <id>https://ibelieving.io/2019/05/22/php7_function_sort/</id>
    <published>2019-05-22T11:14:33.000Z</published>
    <updated>2019-05-22T11:19:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来看看经常使用的数组排序函数如 <code>sort, rsort, asort, arsort, ksort, krsort</code> 。话不多说直接找 <code>sort</code> 函数吧。</p><p>在 <code>php7.3</code> 源码中搜索 <code>PHP_FUNCTION(sort)</code> 可以搜到如下</p><p><img src="/images/15584996147536.jpg" alt=""></p><p>其中 <code>.h</code> 文件是C语言的头文件，直接打开 <code>.c</code> 文件。<br><code>sort</code> 函数如下，其中我加了一点注释。</p><figure class="hljs highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">PHP_FUNCTION(<span class="hljs-params">sort</span>)</span><br>&#123;<br>zval *<span class="hljs-built_in">array</span>;<br>zend_long sort_type = PHP_SORT_REGULAR; <span class="hljs-comment">// 默认的排序规则</span><br>compare_func_t cmp;<br><br><span class="hljs-comment">// 这里开始接请求参数</span><br><span class="hljs-constructor">ZEND_PARSE_PARAMETERS_START(1, 2)</span><br><span class="hljs-constructor">Z_PARAM_ARRAY_EX(<span class="hljs-params">array</span>, 0, 1)</span><br>Z_PARAM_OPTIONAL<br><span class="hljs-constructor">Z_PARAM_LONG(<span class="hljs-params">sort_type</span>)</span><br><span class="hljs-constructor">ZEND_PARSE_PARAMETERS_END_EX(RETURN_FALSE)</span>;<br><br><span class="hljs-comment">// 根据排序规则获取使用的排序函数</span><br>cmp = php<span class="hljs-constructor">_get_data_compare_func(<span class="hljs-params">sort_type</span>, 0)</span>;<br><br><span class="hljs-comment">// 进行排序</span><br><span class="hljs-keyword">if</span> (zend<span class="hljs-constructor">_hash_sort(Z_ARRVAL_P(<span class="hljs-params">array</span>)</span>, cmp, <span class="hljs-number">1</span>)<span class="hljs-operator"> == </span>FAILURE) &#123;<br>RETURN_FALSE;<br>&#125;<br>RETURN_TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>不但 <code>rsort, asort, arsort, ksort, krsort</code> 这些函数在 <code>array.c</code> 文件中，<a href="https://www.php.net/manual/zh/book.array.php" target="_blank" rel="noopener">PHP数组</a>相关的也都在其中。<br>先说下 <code>rsort, asort, arsort, ksort, krsort</code> 函数内容与 <code>sort</code> 只有细微的差别。<br><code>ksort、krsort</code> 是根据键排序所以排序规则获取排序函数用的是 <code>php_get_key_compare_func</code> 参数与 <code>php_get_data_compare_func</code> 是一样的。<br><code>php_get_data_compare_func、php_get_key_compare_func</code> 函数第二个参数意思是是否降序排列，<code>rsort、arsort、krsort</code> 第二个参数都是1。<br>进行排序时 <code>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</code> 第三个参数意思是是否重新排列索引， <code>sort、rsort</code> 传的都是1。<br>做个表格看下</p><table><thead><tr><th></th><th>获取排序函数</th><th>调用排序</th></tr></thead><tbody><tr><td>sort</td><td>php_get_data_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</td></tr><tr><td>rsort</td><td>php_get_data_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</td></tr><tr><td>asort</td><td>php_get_data_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>arsort</td><td>php_get_data_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>ksort</td><td>php_get_key_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>krsort</td><td>php_get_key_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr></tbody></table><p>其中调用 <code>php_get_data_compare_func</code> 与 <code>php_get_key_compare_func</code> 获取的 <code>cmp</code> 后面再说明。</p><p>继续找 <code>zend_hash_sort</code> ，在 <code>zend_hash.h</code> 中。</p><figure class="hljs highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#define zend<span class="hljs-constructor">_hash_sort(<span class="hljs-params">ht</span>, <span class="hljs-params">compare_func</span>, <span class="hljs-params">renumber</span>)</span> \<br>zend<span class="hljs-constructor">_hash_sort_ex(<span class="hljs-params">ht</span>, <span class="hljs-params">zend_sort</span>, <span class="hljs-params">compare_func</span>, <span class="hljs-params">renumber</span>)</span><br></code></pre></td></tr></table></figure><p>看来 <code>zend_hash_sort</code> 中调用了 <code>zend_hash_sort_ex</code> 。 <code>zend_hash_sort_ex</code> 在 <code>zend_hash.c</code> 中。</p><figure class="hljs highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ZEND_API <span class="hljs-built_in">int</span> ZEND_FASTCALL zend<span class="hljs-constructor">_hash_sort_ex(HashTable <span class="hljs-operator">*</span><span class="hljs-params">ht</span>, <span class="hljs-params">sort_func_t</span> <span class="hljs-params">sort</span>, <span class="hljs-params">compare_func_t</span> <span class="hljs-params">compar</span>, <span class="hljs-params">zend_bool</span> <span class="hljs-params">renumber</span>)</span><br>&#123;<br>Bucket *p;<br>uint32_t i, j;<br><br><span class="hljs-constructor">IS_CONSISTENT(<span class="hljs-params">ht</span>)</span>;<br><span class="hljs-constructor">HT_ASSERT_RC1(<span class="hljs-params">ht</span>)</span>;<br><br><span class="hljs-keyword">if</span> (!(ht-&gt;nNumOfElements&gt;<span class="hljs-number">1</span>)<span class="hljs-operator"> &amp;&amp; </span>!(renumber<span class="hljs-operator"> &amp;&amp; </span>ht-&gt;nNumOfElements&gt;<span class="hljs-number">0</span>)) &#123; <span class="hljs-comment">/* Doesn't require sorting */</span><br>return SUCCESS;<br>&#125;<br><br><span class="hljs-comment">// 这里获取数组元素数，判断hash table是否没有洞，"洞"意思是数组里面元素被unset过，被unset过的val type是IS_UNDEF，不能通过nNumUsed直接获取数组的元素数。</span><br><span class="hljs-keyword">if</span> (<span class="hljs-constructor">HT_IS_WITHOUT_HOLES(<span class="hljs-params">ht</span>)</span>) &#123;<br>i = ht-&gt;nNumUsed;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>for (j = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>; j &lt; ht-&gt;nNumUsed; j++) &#123;<br>p = ht-&gt;arData + j;<br><span class="hljs-keyword">if</span> (<span class="hljs-constructor">UNEXPECTED(Z_TYPE(<span class="hljs-params">p</span>-&gt;<span class="hljs-params">val</span>)</span><span class="hljs-operator"> == </span>IS_UNDEF)) continue;<br><span class="hljs-keyword">if</span> (i != j) &#123;<br>ht-&gt;arData<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = *p;<br>&#125;<br>i++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 这个sort是由上面直接传进来的zend_sort，终于到最重要的排序了</span><br>sort((void *)ht-&gt;arData, i, sizeof(Bucket), compar,<br>(swap_func_t)(renumber? zend_hash_bucket_renum_swap :<br>((<span class="hljs-constructor">HT_FLAGS(<span class="hljs-params">ht</span>)</span> &amp; HASH_FLAG_PACKED) ? zend_hash_bucket_packed_swap : zend_hash_bucket_swap)));<br><br><span class="hljs-comment">// 后面是根据renumber判断是否需要重排索引内存回收等操作先省略了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>zend_sort.c</code> 中找到 <code>zend_sort</code> ，通过备注发现这个排序是源于 <code>LLVM</code> 的 <code>libc++</code> 中的 <code>std::sort</code> 实现的。算是快排的优化版，当元素数小于等于16时有特殊的优化，当元素数小于等于5时直接通过 <code>if else</code> 嵌套判断排序，真是优化的极致。<code>zend_sort_2</code> 、 <code>zend_sort_3</code> 、 <code>zend_sort_4</code> 、 <code>zend_sort_5</code> 中是 <code>if else</code> 嵌套的判断排序就不贴出来了。其中基准点(pivot)计算方式也进行了优化。相比 <code>PHP5</code> 时代的标配快排实现要稳定多了。</p><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs lisp">ZEND_API void zend_sort(<span class="hljs-name">void</span> *base, size_t nmemb, size_t siz, compare_func_t cmp, swap_func_t swp)<br>&#123;<br>while (1) &#123;<br>if (nmemb &lt;= 16) &#123;<br>zend_insert_sort(base, nmemb, siz, cmp, swp);<br>return;<br>&#125; else &#123;<br>char *i, *j;<br>char *start = (<span class="hljs-name">char</span> *)base;<br>char *end = start + (<span class="hljs-name">nmemb</span> * siz);<br>size_t offset = (nmemb &gt;&gt; Z_L(1));<br>char *pivot = start + (<span class="hljs-name">offset</span> * siz);<br><br>if ((nmemb &gt;&gt; Z_L(10))) &#123;<br>size_t delta = (offset &gt;&gt; Z_L(1)) * siz<span class="hljs-comment">;</span><br>zend_sort_5(<span class="hljs-name">start</span>, start + delta, pivot, pivot + delta, end - siz, cmp, swp)<span class="hljs-comment">;</span><br>&#125; else &#123;<br>zend_sort_3(<span class="hljs-name">start</span>, pivot, end - siz, cmp, swp)<span class="hljs-comment">;</span><br>&#125;<br>swp(<span class="hljs-name">start</span> + siz, pivot)<span class="hljs-comment">;</span><br>pivot = start + siz<span class="hljs-comment">;</span><br>i = pivot + siz<span class="hljs-comment">;</span><br>j = end - siz<span class="hljs-comment">;</span><br>while (<span class="hljs-number">1</span>) &#123;<br>while (<span class="hljs-name">cmp</span>(<span class="hljs-name">pivot</span>, i) &gt; <span class="hljs-number">0</span>) &#123;<br>i += siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">i</span> == j)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">j</span> == i)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>while (<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, pivot) &gt; <span class="hljs-number">0</span>) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">j</span> == i)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>swp(<span class="hljs-name">i</span>, j)<span class="hljs-comment">;</span><br>i += siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">i</span> == j)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>done:<br>swp(<span class="hljs-name">pivot</span>, i - siz)<span class="hljs-comment">;</span><br>if ((<span class="hljs-name">i</span> - siz) - start &lt; end - i) &#123;<br>zend_sort(<span class="hljs-name">start</span>, (<span class="hljs-name">i</span> - start)/siz - <span class="hljs-number">1</span>, siz, cmp, swp)<span class="hljs-comment">;</span><br>base = i<span class="hljs-comment">;</span><br>nmemb = (<span class="hljs-name">end</span> - i)/siz<span class="hljs-comment">;</span><br>&#125; else &#123;<br>zend_sort(<span class="hljs-name">i</span>, (<span class="hljs-name">end</span> - i)/siz, siz, cmp, swp)<span class="hljs-comment">;</span><br>nmemb = (<span class="hljs-name">i</span> - start)/siz - <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>ZEND_API void zend_insert_sort(<span class="hljs-name">void</span> *base, size_t nmemb, size_t siz, compare_func_t cmp, swap_func_t swp) &#123;<br>switch (nmemb) &#123;<br>case 0:<br>case 1:<br>break;<br>case 2:<br>zend_sort_2(base, (char *)base + siz, cmp, swp)<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>case <span class="hljs-number">3</span>:<br>zend_sort_3(<span class="hljs-name">base</span>, (<span class="hljs-name">char</span> *)base + siz, (char *)base + siz + siz, cmp, swp)<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>case <span class="hljs-number">4</span>:<br>&#123;<br>size_t siz2 = siz + siz<span class="hljs-comment">;</span><br>zend_sort_4(<span class="hljs-name">base</span>, (<span class="hljs-name">char</span> *)base + siz, (char *)base + siz2, (<span class="hljs-name">char</span> *)base + siz + siz2, cmp, swp);<br>&#125;<br>break;<br>case 5:<br>&#123;<br>size_t siz2 = siz + siz;<br>zend_sort_5(base, (char *)base + siz, (<span class="hljs-name">char</span> *)base + siz2, (char *)base + siz + siz2, (<span class="hljs-name">char</span> *)base + siz2 + siz2, cmp, swp);<br>&#125;<br>break;<br>default:<br>&#123;<br>char *i, *j, *k<span class="hljs-comment">;</span><br>char *start = (char *)base<span class="hljs-comment">;</span><br>char *end = start + (nmemb * siz)<span class="hljs-comment">;</span><br>size_t siz2= siz + siz<span class="hljs-comment">;</span><br>char *sentry = start + (6 * siz)<span class="hljs-comment">;</span><br>for (<span class="hljs-name">i</span> = start + siz<span class="hljs-comment">; i &lt; sentry; i += siz) &#123;</span><br>j = i - siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>continue<span class="hljs-comment">;</span><br>&#125;<br>while (<span class="hljs-name">j</span> != start) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>for (<span class="hljs-name">k</span> = i<span class="hljs-comment">; k &gt; j; k -= siz) &#123;</span><br>swp(<span class="hljs-name">k</span>, k - siz)<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>for (<span class="hljs-name">i</span> = sentry<span class="hljs-comment">; i &lt; end; i += siz) &#123;</span><br>j = i - siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>continue<span class="hljs-comment">;</span><br>&#125;<br>do &#123;<br>j -= siz2<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>if (<span class="hljs-name">j</span> == start) &#123;<br>break<span class="hljs-comment">;</span><br>&#125;<br>if (<span class="hljs-name">j</span> == start + siz) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">cmp</span>(<span class="hljs-name">i</span>, j) &gt; <span class="hljs-number">0</span>) &#123;<br>j += siz<span class="hljs-comment">;</span><br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125; while (<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>for (<span class="hljs-name">k</span> = i<span class="hljs-comment">; k &gt; j; k -= siz) &#123;</span><br>swp(<span class="hljs-name">k</span>, k - siz)<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后来说说 <code>cmp</code> 这个函数，当 <code>sort_flags</code> 为 <code>SORT_REGULAR</code> 时 <code>sort</code> 函数的 <code>cmp</code> 调用的是 <code>array.c</code> 中的下面这个函数，返回值分成 小于0(b&gt;1), 0(b==a), 大于0(a&gt;b)对比失败也是0。</p><figure class="hljs highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static <span class="hljs-built_in">int</span> php<span class="hljs-constructor">_array_data_compare(<span class="hljs-params">const</span> <span class="hljs-params">void</span> <span class="hljs-operator">*</span><span class="hljs-params">a</span>, <span class="hljs-params">const</span> <span class="hljs-params">void</span> <span class="hljs-operator">*</span><span class="hljs-params">b</span>)</span><br>&#123;<br>Bucket *f;<br>Bucket *s;<br>zval result;<br>zval *first;<br>zval *second;<br><br>f = (Bucket *) a;<br>s = (Bucket *) b;<br><br>first = &amp;f-&gt;<span class="hljs-keyword">val</span>;<br>second = &amp;s-&gt;<span class="hljs-keyword">val</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-constructor">UNEXPECTED(Z_TYPE_P(<span class="hljs-params">first</span>)</span><span class="hljs-operator"> == </span>IS_INDIRECT)) &#123;<br>first = <span class="hljs-constructor">Z_INDIRECT_P(<span class="hljs-params">first</span>)</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-constructor">UNEXPECTED(Z_TYPE_P(<span class="hljs-params">second</span>)</span><span class="hljs-operator"> == </span>IS_INDIRECT)) &#123;<br>second = <span class="hljs-constructor">Z_INDIRECT_P(<span class="hljs-params">second</span>)</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (compare<span class="hljs-constructor">_function(&amp;<span class="hljs-params">result</span>, <span class="hljs-params">first</span>, <span class="hljs-params">second</span>)</span><span class="hljs-operator"> == </span>FAILURE) &#123;<br>return <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-constructor">ZEND_ASSERT(Z_TYPE(<span class="hljs-params">result</span>)</span><span class="hljs-operator"> == </span>IS_LONG);<br>return <span class="hljs-constructor">ZEND_NORMALIZE_BOOL(Z_LVAL(<span class="hljs-params">result</span>)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再往下追就是 <code>compare_function</code> 很长我就不贴了，简单说下其中先判断 <code>first</code> 和 <code>second</code> 类型，再进行各种分支比较。比较好奇其中的都是字符串时对比方法，追了下发现底层使用的是C的 <code>memcmp</code> 比较这两个串的前N个字节，这个N是这两个串中较小的那个。</p><p>最后总结下 <code>PHP7</code> 对比 <code>PHP5</code> 时代数组排序调用逻辑相差不大，但是排序算法优化了很多，更不用说底层的hash table了。</p><p>最后的最后文中如有理解错误的点也请指教。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天来看看经常使用的数组排序函数如 &lt;code&gt;sort, rsort, asort, arsort, ksort, krsort&lt;/code&gt; 。话不多说直接找 &lt;code&gt;sort&lt;/code&gt; 函数吧。&lt;/p&gt;&lt;p&gt;在 &lt;code&gt;php7.3&lt;/code&gt; 源码中搜
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ibelieving.io/tags/PHP/"/>
    
      <category term="源码" scheme="https://ibelieving.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains IDE 文件对比功能</title>
    <link href="https://ibelieving.io/2019/05/07/jetbrains_ide_compare_text/"/>
    <id>https://ibelieving.io/2019/05/07/jetbrains_ide_compare_text/</id>
    <published>2019-05-07T05:10:22.000Z</published>
    <updated>2019-05-16T02:05:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前用Beyond Compare对比文件，功能非常强大。但是试用期到了就用不了了，而且授权非常的贵，很多功能一般也用不到。</p><p>一般文件对比直接用系统自带的diff命令就可以了。但是，如果临时复制粘贴不同版本文件对比，又不想为了对比而创建文件，JetBrains家IDE对比功能就派上用场了。</p><p>Mac下按 <code>⇧⌘A</code> ，搜索 <code>open diff</code> ，回车。<br><img src="/images/15572093570374.jpg" alt=""></p><p>左右两边可以随意复制粘贴对比了。<br><img src="/images/15573665970343.jpg" alt=""></p><p><code>⇧⌘A</code>这其实是一个功能搜索快捷键，可以搜索任何功能。也可以快速开关一个功能。<br><img src="/images/15572097029571.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前用Beyond Compare对比文件，功能非常强大。但是试用期到了就用不了了，而且授权非常的贵，很多功能一般也用不到。&lt;/p&gt;&lt;p&gt;一般文件对比直接用系统自带的diff命令就可以了。但是，如果临时复制粘贴不同版本文件对比，又不想为了对比而创建文件，JetBrains家
      
    
    </summary>
    
    
      <category term="IDE" scheme="https://ibelieving.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>编写Go的TCP服务来替代PHP的Swoole</title>
    <link href="https://ibelieving.io/2019/04/30/swoole_to_go_serv/"/>
    <id>https://ibelieving.io/2019/04/30/swoole_to_go_serv/</id>
    <published>2019-04-30T13:22:46.000Z</published>
    <updated>2019-12-24T07:11:52.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>目前公司采用微服务架构，主要开发语言为PHP，通过Swoole开启TCP服务供业务端调用。通过公司内部编写的PHP扩展封装客户端调用逻辑。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>暂定使用Go语言开发新的业务，并提供TCP服务。其中老的PHP项目要通过原有的客户端扩展实现无修改调用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过阅读客户端扩展源码了解调用逻辑。编写简单的测试如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>$_client = <span class="hljs-keyword">new</span> \swoole_client(SWOOLE_SOCK_TCP | SWOOLE_KEEP);<br>$_client-&gt;set([<br>    <span class="hljs-string">'open_length_check'</span> =&gt; <span class="hljs-keyword">true</span>,<br>    <span class="hljs-string">'package_length_type'</span> =&gt; <span class="hljs-string">'N'</span>,<br>    <span class="hljs-string">'package_length_offset'</span> =&gt; <span class="hljs-number">0</span>,<br>    <span class="hljs-string">'package_body_offset'</span> =&gt; <span class="hljs-number">4</span>,<br>    <span class="hljs-string">'package_max_length'</span> =&gt; <span class="hljs-number">24657920</span>,<br>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span> == $_client-&gt;connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">8880</span>)) &#123;<br>    printf(<span class="hljs-string">"err_msg: %s err_code: %s"</span> . PHP_EOL, var_export($_client-&gt;errMsg, <span class="hljs-keyword">true</span>), var_export($_client-&gt;errCode, <span class="hljs-keyword">true</span>));<br>&#125;<br><br><span class="hljs-comment">// 随便测试个请求参数</span><br>$data = [<br>    <span class="hljs-string">'api'</span> =&gt; <span class="hljs-string">'getUserInfo'</span>,<br>    <span class="hljs-string">'params'</span> =&gt; [<br>        <span class="hljs-string">'user_id'</span> =&gt; <span class="hljs-number">123</span><br>    ]<br>];<br>$data = json_encode($data);<br>$data = gzcompress($data, <span class="hljs-number">9</span>);<br>$_client-&gt;send(pack(<span class="hljs-string">"N"</span>, strlen($data)) . $data);<br><br>$res = $_client-&gt;recv();<br>$end = getTime();<br><br>$data = json_decode($res, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>其中前4个字节是head，表示body长度，采用二进制大端字节序编码。body先进行json编码再进行了zlib压缩。这都是编写Go的TCP服务时需要处理的。</p><p>写个简单的Go TCP服务试试，先不考虑过多的错误边界处理。</p><figure class="hljs highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"compress/zlib"</span><br><span class="hljs-string">"encoding/binary"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"io"</span><br><span class="hljs-string">"net"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ln, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":8880"</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := ln.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"accept err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">go</span> handleConnection(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConnection</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">"on conn"</span>)<br><br><span class="hljs-keyword">var</span> err error<br>headLen := <span class="hljs-number">4</span><br>head := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, headLen)<br><span class="hljs-keyword">if</span> _, err = conn.Read(head); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 解码大端字节序获取body长度</span><br>bodyLen := binary.BigEndian.Uint32(head)<br><br>allBody := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">0</span>)<br>readLen := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> bodyLen &gt; <span class="hljs-number">0</span> &#123;<br>body := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, bodyLen)<br>readLen, err = conn.Read(body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br>bodyLen = bodyLen - <span class="hljs-keyword">uint32</span>(readLen)<br>allBody = <span class="hljs-built_in">append</span>(allBody, body[:readLen]...)<br>&#125;<br><br><span class="hljs-comment">// 解压zlib压缩的数据 RFC 1950</span><br>b := bytes.NewReader(allBody)<br>uncompressRead, err := zlib.NewReader(b)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"uncompress data err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">var</span> uncompressData bytes.Buffer<br>io.Copy(&amp;uncompressData, uncompressRead)<br><br><span class="hljs-comment">// 解出的json字符串</span><br>fmt.Printf(<span class="hljs-string">"Received:%s"</span>, uncompressData.Bytes())<br><br><span class="hljs-comment">// 路由调用实际业务逻辑处理 ...</span><br><span class="hljs-comment">// conn.Write()</span><br><br>conn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行Go的TCP服务，跑一个PHP请求测试。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">on conn<br>Received:&#123;"api":"getUserInfo","params":&#123;"user_id":123&#125;&#125;<br></code></pre></td></tr></table></figure><p>经过多次修改测试终于成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景说明&quot;&gt;&lt;a href=&quot;#背景说明&quot; class=&quot;headerlink&quot; title=&quot;背景说明&quot;&gt;&lt;/a&gt;背景说明&lt;/h2&gt;&lt;p&gt;目前公司采用微服务架构，主要开发语言为PHP，通过Swoole开启TCP服务供业务端调用。通过公司内部编写的PHP扩展封装客
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ibelieving.io/tags/PHP/"/>
    
      <category term="Swoole" scheme="https://ibelieving.io/tags/Swoole/"/>
    
      <category term="Go" scheme="https://ibelieving.io/tags/Go/"/>
    
      <category term="TCP" scheme="https://ibelieving.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>PHP5下的Error错误处理及问题定位</title>
    <link href="https://ibelieving.io/2019/01/08/php5_error_handle/"/>
    <id>https://ibelieving.io/2019/01/08/php5_error_handle/</id>
    <published>2019-01-08T06:30:18.000Z</published>
    <updated>2019-05-10T13:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>来说说当PHP出现E_ERROR级别致命的运行时错误的问题定位方法。例如像<code>Fatal error: Allowed memory size of</code>内存溢出这种。当出现这种错误时会导致程序直接退出，PHP的error log中会记录一条错误日志说明报错的具体文件和代码行数，其它的任何信息都没有了。如果是PHP7的话还可以像捕获异常一样捕获错误，PHP5的话就不行了。</p><p>一般想到的方法就是看看报错的具体代码，如果报错文件是<code>CommonReturn.class.php</code>像下面这个样子。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 公共返回封装</span><br><span class="hljs-comment"> * Class CommonReturn</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打包函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>     $params</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int $status</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>json_encode</code>那一行报错了，然后你查了下<code>packData</code>这个方法，有很多项目的类中都有调用，这时要怎么定位问题呢？</p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>好，首先我们复现下场景。假如实际调用的程序<code>bug.php</code>如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">'./CommonReturn.class.php'</span>;<br><br>$res = ini_set(<span class="hljs-string">'memory_limit'</span>, <span class="hljs-string">'1m'</span>);<br><br>$res = [];<br>$char = str_repeat(<span class="hljs-string">'x'</span>, <span class="hljs-number">999</span>);<br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">900</span> ; $i++) &#123;<br>    $res[] = $char;<br>&#125;<br><br>$get_pack = CommonReturn::packData($res);<br><br><span class="hljs-comment">// something else</span><br></code></pre></td></tr></table></figure><p>运行bug.php PHP错误日志中会记录</p><figure class="hljs highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-number">08</span>-Jan<span class="hljs-number">-2019</span> <span class="hljs-number">11</span>:<span class="hljs-number">22</span>:<span class="hljs-number">52</span> Asia/Shanghai] PHP Fatal error:  Allowed memory size of <span class="hljs-number">1048576</span> bytes exhausted (tried to allocate <span class="hljs-number">525177</span> bytes) <span class="hljs-keyword">in</span> /CommonReturn.class.php on line <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>复现成功，错误日志中只是说明了报错的文件和哪行代码，无法知道程序的上下文堆栈信息，不知道具体是哪块业务逻辑调用的，这样一来就无法定位修复错误。如果是偶尔出现，并且没有来自前端业务的反馈要怎么排查呢。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>有人想到了修改<code>memory_limit</code>增加内存分配，但这种方法治标不治本。做开发肯定要找到问题的根源。</li><li>开启<code>core dump</code>，如果生成code文件可以进行调试，但是发现code只有进程异常退出才会生成。像E_ERROR级别的错误不一定会生成code文件，内存溢出这种可能PHP内部自己就处理了。</li><li>使用<code>register_shutdown_function</code>注册一个PHP终止时的回调函数，再调用<code>error_get_last</code>如果获取到了最后发生的错误，就通过<code>debug_print_backtrace</code>获取程序的堆栈信息，我们试试看。</li></ol><p>修改<code>CommonReturn.class.php</code>文件如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 公共返回封装</span><br><span class="hljs-comment"> * Class CommonReturn</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打包函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>     $params</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int $status</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br><br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>]);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 错误处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            ob_start();<br>            debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>            $trace = ob_get_clean();<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">23</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::handleFatal()</span><br></code></pre></td></tr></table></figure><p>回溯信息没有来源，尴尬了。猜测因为backtrace信息保存在内存中，当出现致命错误时会清空。没办法，把backtrace从外面传进来试试。再次修改<code>CommonReturn.class.php</code>。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 公共返回封装</span><br><span class="hljs-comment"> * Class CommonReturn</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打包函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>     $params</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int $status</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br><br>        ob_start();<br>        debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>        $trace = ob_get_clean();<br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>], $trace);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 错误处理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $trace</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">($trace)</span></span><br><span class="hljs-function">    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">26</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::packData() called at [/bug.php:13]</span><br></code></pre></td></tr></table></figure><p>成功定位到了调用来源，在<code>bug.php</code>的13行。将最终的<code>CommonReturn.class.php</code>发布到生产环境，再次出现出现错误时候看日志就可以了。但是这样的话所有调用<code>packData</code>的程序都会执行trace函数，肯定也会影响性能的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对于其中使用到的<code>register_shutdown_function</code>函数需要注意，可以注册多个不同的回调，但是如果某一个回调函数中exit了，那么后面注册的回调函数都不会执行。</li><li><code>debug_print_backtrace</code>这个获取回溯信息函数第一个是否包含请求参数，第二个是回溯记录层数，我们这里是不返回请求参数，可以节省些内存，而且如果请求参数巨大的话调这个函数可能就直接内存溢出了。</li><li>最好的办法就是升级PHP7，可以像异常一样捕获错误。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景说明&quot;&gt;&lt;a href=&quot;#背景说明&quot; class=&quot;headerlink&quot; title=&quot;背景说明&quot;&gt;&lt;/a&gt;背景说明&lt;/h2&gt;&lt;p&gt;来说说当PHP出现E_ERROR级别致命的运行时错误的问题定位方法。例如像&lt;code&gt;Fatal error: Allowe
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ibelieving.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 消息队列：队列的参数与消息的属性</title>
    <link href="https://ibelieving.io/2018/01/31/rabbitmq2/"/>
    <id>https://ibelieving.io/2018/01/31/rabbitmq2/</id>
    <published>2018-01-31T15:18:08.000Z</published>
    <updated>2019-05-10T13:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>队列的参数即声明Queues时的Arguments。<br>消息的属性即向Exchange发布消息时的Properties。</p><h2 id="Queues-Arguments"><a href="#Queues-Arguments" class="headerlink" title="Queues Arguments"></a>Queues Arguments</h2><p>Message TTL<br>消息的存活时间，写入队列后被消费前可以存活的时间单位毫秒，通过<code>x-message-ttl</code>属性设置。</p><p>Auto expire<br>队列的存活时间，指定时间内没有consumer或get方式请求队列消息则会自动删除，通过<code>x-expires</code>属性设置。</p><p>Dead letter exchange<br>死信消息的exchange，通过<code>x-dead-letter-exchange</code>属性设置。</p><p>Dead letter routing key<br>死信消息的路由键，通过<code>x-dead-letter-routing-key</code>属性设置。</p><p>Maximum priority<br>消息支持的最大优先级，可实现优先级消息队列，通过<code>x-max-priority</code>属性设置。</p><p>Max length<br>队列的最大消息数，通过<code>x-max-length</code>属性设置。</p><p>Max length bytes<br>队列的消息的最大字节数，通过<code>x-max-length-bytes</code>属性设置。</p><p>Lazy mode<br>懒惰队列模式，将队列内容移动到磁盘上，当消息者请求时加载入内存，这样可以支持非常长的队列，通过<code>x-queue-mode</code>属性设置。</p><p>Master locator<br>在RabbitMQ的高可用镜像模式中，队列消息首先会写入主节点再依次备份至从节点，通过<code>x-queue-master-locator</code>属性设置队列的主节点选择策略。</p><ul><li>选择承担主节点最少的节点<code>min-masters</code></li><li>选择声明队列客户端连接到的节点<code>client-local</code></li><li>随机挑选一个节点<code>random</code></li></ul><p>死信相关<br>当消息满足以下三种情况之一时会当做死信来处理：</p><ul><li>消息被拒绝 (basic.reject or basic.nack)</li><li>消息未消费超时</li><li>超出队列长度限制</li></ul><p>队列最大长度相关<br>通过<code>x-max-length</code>、<code>x-max-length-bytes</code>来设置队列的最大长度。一个可以控制队列消息的个数，一个可以控制队列占用的空间。如果两个都设置任何一个触发都会执行队列溢出行为，默认的队列溢出后会从队列头开始丢弃消息或进行死信处理。通过<code>x-overflow</code>可以设置队列溢出后的行为，值为<code>drop-head</code>(默认值)或<code>reject-publish</code>(拒绝新消息)。</p><h2 id="Message-Properties"><a href="#Message-Properties" class="headerlink" title="Message Properties"></a>Message Properties</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>content_type</td><td>MIME类型</td></tr><tr><td>content_encoding</td><td>MIME编码</td></tr><tr><td>priority</td><td>消息优先级</td></tr><tr><td>correlation_id</td><td>业务应用关联标识</td></tr><tr><td>reply_to</td><td>回复队列名称</td></tr><tr><td>expiration</td><td>过期时间</td></tr><tr><td>message_id</td><td>业务应用消息标识</td></tr><tr><td>timestamp</td><td>消息写入时间戳</td></tr><tr><td>type</td><td>消息类型</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>app_id</td><td>应用id</td></tr><tr><td>cluster_id</td><td>集群id</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;队列的参数即声明Queues时的Arguments。&lt;br&gt;消息的属性即向Exchange发布消息时的Properties。&lt;/p&gt;&lt;h2 id=&quot;Queues-Arguments&quot;&gt;&lt;a href=&quot;#Queues-Arguments&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="RabbitMQ" scheme="https://ibelieving.io/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
