<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JetBrains IDE 文件对比功能</title>
      <link href="/2019/05/07/jetbrains_ide_compare_text/"/>
      <url>/2019/05/07/jetbrains_ide_compare_text/</url>
      
        <content type="html"><![CDATA[<p>之前用Beyond Compare对比文件，功能非常强大。但是试用期到了就用不了了，而且授权非常的贵，很多功能一般也用不到。</p><p>一般文件对比直接用系统自带的diff命令就可以了。但是，如果临时复制粘贴不同版本文件对比，又不想为了对比而创建文件，JetBrains家IDE对比功能就派上用场了。</p><p>Mac下按 <code>⇧⌘A</code> ，搜索 <code>open diff</code> ，回车。<br><img src="/images/15572093570374.jpg" alt></p><p>左右两边可以随意复制粘贴对比了。<br><img src="/images/15573665970343.jpg" alt></p><p><code>⇧⌘A</code>这其实是一个功能搜索快捷键，可以搜索任何功能。也可以快速开关一个功能。<br><img src="/images/15572097029571.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写Go的TCP服务来替代PHP的Swoole</title>
      <link href="/2019/04/30/swoole_to_go_serv/"/>
      <url>/2019/04/30/swoole_to_go_serv/</url>
      
        <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>目前公司采用微服务架构，主要开发语言为PHP，通过Swoole开启TCP服务供业务端调用。通过公司内部编写的PHP扩展封装客户端调用逻辑。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>暂定使用Go语言开发新的业务，并提供TCP服务。其中老的PHP项目要通过原有的客户端扩展实现无修改调用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过阅读客户端扩展源码了解调用逻辑。编写简单的测试如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>$_client = <span class="hljs-keyword">new</span> \swoole_client(SWOOLE_SOCK_TCP | SWOOLE_KEEP);<br>$_client-&gt;set([<br>    <span class="hljs-string">'open_length_check'</span> =&gt; <span class="hljs-keyword">true</span>,<br>    <span class="hljs-string">'package_length_type'</span> =&gt; <span class="hljs-string">'N'</span>,<br>    <span class="hljs-string">'package_length_offset'</span> =&gt; <span class="hljs-number">0</span>,<br>    <span class="hljs-string">'package_body_offset'</span> =&gt; <span class="hljs-number">4</span>,<br>    <span class="hljs-string">'package_max_length'</span> =&gt; <span class="hljs-number">24657920</span>,<br>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span> == $_client-&gt;connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">8880</span>)) &#123;<br>    printf(<span class="hljs-string">"err_msg: %s err_code: %s"</span> . PHP_EOL, var_export($_client-&gt;errMsg, <span class="hljs-keyword">true</span>), var_export($_client-&gt;errCode, <span class="hljs-keyword">true</span>));<br>&#125;<br><br><span class="hljs-comment">// 随便测试个请求参数</span><br>$data = [<br>    <span class="hljs-string">'api'</span> =&gt; <span class="hljs-string">'getUserInfo'</span>,<br>    <span class="hljs-string">'params'</span> =&gt; [<br>        <span class="hljs-string">'user_id'</span> =&gt; <span class="hljs-number">123</span><br>    ]<br>];<br>$data = json_encode($data);<br>$data = gzcompress($data, <span class="hljs-number">9</span>);<br>$_client-&gt;send(pack(<span class="hljs-string">"N"</span>, strlen($data)) . $data);<br><br>$res = $_client-&gt;recv();<br>$end = getTime();<br><br>$data = json_decode($res, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>其中前4个字节是head，表示body长度，采用二进制大端字节序编码。body先进行json编码再进行了zlib压缩。这都是编写Go的TCP服务时需要处理的。</p><p>写个简单的Go TCP服务试试，先不考虑过多的错误边界处理。</p><figure class="hljs highlight Go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"compress/zlib"</span><br><span class="hljs-string">"encoding/binary"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"io"</span><br><span class="hljs-string">"net"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ln, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":8880"</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := ln.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"accept err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">go</span> handleConnection(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConnection</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">"on conn"</span>)<br><br>head_len := <span class="hljs-number">4</span><br>head := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, head_len)<br>_, err := conn.Read(head)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"head read err:%s"</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 解码大端字节序获取body长度</span><br>body_len := binary.BigEndian.Uint32(head)<br>body_len += <span class="hljs-keyword">uint32</span>(head_len)<br>body := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, body_len)<br>_, err = conn.Read(body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"body read err:%s"</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 解压zlib压缩的数据 RFC 1950</span><br>b := bytes.NewReader(body)<br>uncompress_read, err := zlib.NewReader(b)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"uncompress data err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">var</span> uncompress_data bytes.Buffer<br>io.Copy(&amp;uncompress_data, uncompress_read)<br><br>   <span class="hljs-comment">// 解出的json字符串</span><br>fmt.Printf(<span class="hljs-string">"Received:%s"</span>, uncompress_data.Bytes())<br><br><span class="hljs-comment">// 路由调用实际业务逻辑处理 ...</span><br><span class="hljs-comment">// conn.Write()</span><br><br>conn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行Go的TCP服务，跑一个PHP请求测试。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">on conn<br>Received:&#123;"api":"getUserInfo","params":&#123;"user_id":123&#125;&#125;<br></code></pre></td></tr></table></figure><p>经过多次修改测试终于成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
            <tag> Go </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP5下的Error错误处理及问题定位</title>
      <link href="/2019/01/08/php5_error_handle/"/>
      <url>/2019/01/08/php5_error_handle/</url>
      
        <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>来说说当PHP出现E_ERROR级别致命的运行时错误的问题定位方法。例如像<code>Fatal error: Allowed memory size of</code>内存溢出这种。当出现这种错误时会导致程序直接退出，PHP的error log中会记录一条错误日志说明报错的具体文件和代码行数，其它的任何信息都没有了。如果是PHP7的话还可以像捕获异常一样捕获错误，PHP5的话就不行了。</p><p>一般想到的方法就是看看报错的具体代码，如果报错文件是<code>CommonReturn.class.php</code>像下面这个样子。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>json_encode</code>那一行报错了，然后你查了下<code>packData</code>这个方法，有很多项目的类中都有调用，这时要怎么定位问题呢？</p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>好，首先我们复现下场景。假如实际调用的程序<code>bug.php</code>如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">'./CommonReturn.class.php'</span>;<br><br>$res = ini_set(<span class="hljs-string">'memory_limit'</span>, <span class="hljs-string">'1m'</span>);<br><br>$res = [];<br>$char = str_repeat(<span class="hljs-string">'x'</span>, <span class="hljs-number">999</span>);<br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">900</span> ; $i++) &#123;<br>    $res[] = $char;<br>&#125;<br><br>$get_pack = CommonReturn::packData($res);<br><br><span class="hljs-comment">// something else</span><br></code></pre></td></tr></table></figure><p>运行bug.php PHP错误日志中会记录</p><figure class="hljs highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[<span class="hljs-number">08</span>-Jan<span class="hljs-number">-2019</span> <span class="hljs-number">11</span>:<span class="hljs-number">22</span>:<span class="hljs-number">52</span> Asia/Shanghai] PHP Fatal <span class="hljs-keyword">error</span>:  Allowed memory size <span class="hljs-keyword">of</span> <span class="hljs-number">1048576</span> bytes exhausted (tried <span class="hljs-keyword">to</span> allocate <span class="hljs-number">525177</span> bytes) <span class="hljs-keyword">in</span> /CommonReturn.<span class="hljs-built_in">class</span>.php <span class="hljs-keyword">on</span> line <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>复现成功，错误日志中只是说明了报错的文件和哪行代码，无法知道程序的上下文堆栈信息，不知道具体是哪块业务逻辑调用的，这样一来就无法定位修复错误。如果是偶尔出现，并且没有来自前端业务的反馈要怎么排查呢。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>有人想到了修改<code>memory_limit</code>增加内存分配，但这种方法治标不治本。做开发肯定要找到问题的根源。</li><li>开启<code>core dump</code>，如果生成code文件可以进行调试，但是发现code只有进程异常退出才会生成。像E_ERROR级别的错误不一定会生成code文件，内存溢出这种可能PHP内部自己就处理了。</li><li>使用<code>register_shutdown_function</code>注册一个PHP终止时的回调函数，再调用<code>error_get_last</code>如果获取到了最后发生的错误，就通过<code>debug_print_backtrace</code>获取程序的堆栈信息，我们试试看。</li></ol><p>修改<code>CommonReturn.class.php</code>文件如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br><br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>]);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 错误处理<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">()</span><br>    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            ob_start();<br>            debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>            $trace = ob_get_clean();<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">23</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::handleFatal()</span><br></code></pre></td></tr></table></figure><p>回溯信息没有来源，尴尬了。猜测因为backtrace信息保存在内存中，当出现致命错误时会清空。没办法，把backtrace从外面传进来试试。再次修改<code>CommonReturn.class.php</code>。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br><br>        ob_start();<br>        debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>        $trace = ob_get_clean();<br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>], $trace);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 错误处理<br>     * <span class="hljs-doctag">@param</span> $trace<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">($trace)</span><br>    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">26</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::packData() called at [/bug.php:13]</span><br></code></pre></td></tr></table></figure><p>成功定位到了调用来源，在<code>bug.php</code>的13行。将最终的<code>CommonReturn.class.php</code>发布到生产环境，再次出现出现错误时候看日志就可以了。但是这样的话所有调用<code>packData</code>的程序都会执行trace函数，肯定也会影响性能的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对于其中使用到的<code>register_shutdown_function</code>函数需要注意，可以注册多个不同的回调，但是如果某一个回调函数中exit了，那么后面注册的回调函数都不会执行。</li><li><code>debug_print_backtrace</code>这个获取回溯信息函数第一个是否包含请求参数，第二个是回溯记录层数，我们这里是不返回请求参数，可以节省些内存，而且如果请求参数巨大的话调这个函数可能就直接内存溢出了。</li><li>最好的办法就是升级PHP7，可以像异常一样捕获错误。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 消息队列：队列的参数与消息的属性</title>
      <link href="/2018/01/31/rabbitmq2/"/>
      <url>/2018/01/31/rabbitmq2/</url>
      
        <content type="html"><![CDATA[<p>队列的参数即声明Queues时的Arguments。<br>消息的属性即向Exchange发布消息时的Properties。</p><h2 id="Queues-Arguments"><a href="#Queues-Arguments" class="headerlink" title="Queues Arguments"></a>Queues Arguments</h2><p>Message TTL<br>消息的存活时间，写入队列后被消费前可以存活的时间单位毫秒，通过<code>x-message-ttl</code>属性设置。</p><p>Auto expire<br>队列的存活时间，指定时间内没有consumer或get方式请求队列消息则会自动删除，通过<code>x-expires</code>属性设置。</p><p>Dead letter exchange<br>死信消息的exchange，通过<code>x-dead-letter-exchange</code>属性设置。</p><p>Dead letter routing key<br>死信消息的路由键，通过<code>x-dead-letter-routing-key</code>属性设置。</p><p>Maximum priority<br>消息支持的最大优先级，可实现优先级消息队列，通过<code>x-max-priority</code>属性设置。</p><p>Max length<br>队列的最大消息数，通过<code>x-max-length</code>属性设置。</p><p>Max length bytes<br>队列的消息的最大字节数，通过<code>x-max-length-bytes</code>属性设置。</p><p>Lazy mode<br>懒惰队列模式，将队列内容移动到磁盘上，当消息者请求时加载入内存，这样可以支持非常长的队列，通过<code>x-queue-mode</code>属性设置。</p><p>Master locator<br>在RabbitMQ的高可用镜像模式中，队列消息首先会写入主节点再依次备份至从节点，通过<code>x-queue-master-locator</code>属性设置队列的主节点选择策略。</p><ul><li>选择承担主节点最少的节点<code>min-masters</code></li><li>选择声明队列客户端连接到的节点<code>client-local</code></li><li>随机挑选一个节点<code>random</code></li></ul><p>死信相关<br>当消息满足以下三种情况之一时会当做死信来处理：</p><ul><li>消息被拒绝 (basic.reject or basic.nack)</li><li>消息未消费超时</li><li>超出队列长度限制</li></ul><p>队列最大长度相关<br>通过<code>x-max-length</code>、<code>x-max-length-bytes</code>来设置队列的最大长度。一个可以控制队列消息的个数，一个可以控制队列占用的空间。如果两个都设置任何一个触发都会执行队列溢出行为，默认的队列溢出后会从队列头开始丢弃消息或进行死信处理。通过<code>x-overflow</code>可以设置队列溢出后的行为，值为<code>drop-head</code>(默认值)或<code>reject-publish</code>(拒绝新消息)。</p><h2 id="Message-Properties"><a href="#Message-Properties" class="headerlink" title="Message Properties"></a>Message Properties</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>content_type</td><td>MIME类型</td></tr><tr><td>content_encoding</td><td>MIME编码</td></tr><tr><td>priority</td><td>消息优先级</td></tr><tr><td>correlation_id</td><td>业务应用关联标识</td></tr><tr><td>reply_to</td><td>回复队列名称</td></tr><tr><td>expiration</td><td>过期时间</td></tr><tr><td>message_id</td><td>业务应用消息标识</td></tr><tr><td>timestamp</td><td>消息写入时间戳</td></tr><tr><td>type</td><td>消息类型</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>app_id</td><td>应用id</td></tr><tr><td>cluster_id</td><td>集群id</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 消息队列：浅谈</title>
      <link href="/2017/12/28/rabbitmq1/"/>
      <url>/2017/12/28/rabbitmq1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>消息队列用来解决不同项目间通信、业务解耦。消息队列有很多种比如用Redis实现的轻量级消息队列。RabbitMQ是消息队列的一种，基于AMQP协议，用Erlang语言编写，属于一种消息队列中间件。</p><h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><p><img src="/images/15143024048456.jpg" alt></p><h3 id="Connection-链接"><a href="#Connection-链接" class="headerlink" title="Connection   链接"></a>Connection   链接</h3><p>真实的TCP链接</p><h3 id="Channel-信道"><a href="#Channel-信道" class="headerlink" title="Channel      信道"></a>Channel      信道</h3><p>基于Connection创建的Channel，所有的数据传输都是基于Channel的。大家都知道TCP链接需要三次握手，业务频繁每次开TCP链接对性能也会有不小的损耗，TCP链接数也有限制。Channel的存在主要是为了复用TCP链接。</p><h3 id="Exchange-交换机"><a href="#Exchange-交换机" class="headerlink" title="Exchange     交换机"></a>Exchange     交换机</h3><p>消息生产者生产的所有消息都会先写入Exchange中，再路由到Queues中，如果Exchange没有绑定或未匹配到Queues则消息会被丢弃。</p><h3 id="Queues-队列"><a href="#Queues-队列" class="headerlink" title="Queues       队列"></a>Queues       队列</h3><p>生产者生产的消息会从Exchange中路由到Queues中，消费者从Queues中消费消息。</p><h3 id="Binding-绑定"><a href="#Binding-绑定" class="headerlink" title="Binding      绑定"></a>Binding      绑定</h3><p>Binding将Exchange与Queues关联起来。</p><h3 id="Routing-key-路由键"><a href="#Routing-key-路由键" class="headerlink" title="Routing key  路由键"></a>Routing key  路由键</h3><p>路由键是消息从Exchange进入到某个Queues的规则。<br>在将Queues绑定至Exchange时会设置消息从Exchange路由至Queues的绑定路由键规则。<br>在将消息写入Exchange时会附带消息的路由键。</p><p>Exchange类型为direct或topic时，消息的投递会根据消息的路由键和绑定的路由键进行匹配，Exchange将消息投递给所有匹配上的Queues。</p><h4 id="路由键写法"><a href="#路由键写法" class="headerlink" title="路由键写法"></a>路由键写法</h4><p>路由键可以由<code>.</code> 进行分隔，如<code>computer.mac</code>或<code>computer.win</code>。<br>路由键还支持通配符来模糊匹配，<code>*</code>与<code>#</code><br><code>*</code>匹配一个分隔的单词<br><code>#</code>匹配多个或零个分隔的单词</p><p>应用举例</p><table><thead><tr><th>Exchange</th><th>Routing key</th><th>Queues</th></tr></thead><tbody><tr><td>X</td><td><code>*.*.imac</code></td><td>apple</td></tr><tr><td>X</td><td><code>apple.#</code></td><td>apple</td></tr><tr><td>X</td><td><code>*.phone.*</code></td><td>phone</td></tr></tbody></table><p>此时写入一条消息路由键为<code>apple.phone.iphone4</code>会被投递到队列apple与phone。<br>再写入一条消息路由键为<code>apple.computer.imac</code>仅会被投递到apple，此时apple队列匹配了两个路由键，但是也只会投递到apple一次。<br>再写入一条消息路由键为<code>micro.computer.win</code>因为没有匹配的路由键队列该消息会被丢弃。</p><h3 id="Exchange-Types-交换机类型"><a href="#Exchange-Types-交换机类型" class="headerlink" title="Exchange Types   交换机类型"></a>Exchange Types   交换机类型</h3><h4 id="fanout-广播"><a href="#fanout-广播" class="headerlink" title="fanout 广播"></a>fanout 广播</h4><p>fanout类型的Exchange会无视路由键，将消息投递给所有绑定到该Exchange上的Queues。</p><h4 id="direct-单播"><a href="#direct-单播" class="headerlink" title="direct 单播"></a>direct 单播</h4><p>direct类型的Exchange会将消息投递给路由键完全匹配的Queues中。</p><h4 id="topic-组播"><a href="#topic-组播" class="headerlink" title="topic 组播"></a>topic 组播</h4><p>topic类型的Exchange会将消息投递给路由键模糊匹配的Queues中。</p><h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>headers类型的Exchange也会无视路由键，会根据headers中的属性来进行匹配。该类型应用较少，不过在RabbitMQ内部还是有使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
