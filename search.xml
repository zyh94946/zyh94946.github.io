<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang 生成 O&#39;Reilly 在线学习平台的电子书</title>
      <link href="/2019/10/31/golang_generate_oreilly_kindle_book/"/>
      <url>/2019/10/31/golang_generate_oreilly_kindle_book/</url>
      
        <content type="html"><![CDATA[<p>O’Reilly 是有名的动物书出版公司，当然他们也不仅仅出电子书还有很多别的业务。<a href="https://learning.oreilly.com/home/" target="_blank" rel="noopener">O’Reilly 在线学习平台</a>上有他们所有出版过的图书都是原版的，但是仅提供在线阅读，虽然也有 App，但是想在 kindle 上看提高阅读体验。</p><p>于是抽时间练习练习 Golang 写了个程序，生成 mobi 格式的电子书。Github 地址 <a href="https://github.com/zyh94946/oreilly_kindle_book" target="_blank" rel="noopener">oreilly_kindle_book</a> 。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul><li>目前仅支持 macOS、linux, windows 改改应该也可以，但是我手头没有 windows 测不了，或者编个 Docker image 也 ok。</li><li>需要 O’Reilly 在线学习平台的账号，这是必须的。</li><li>安装 <a href="https://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000765211" target="_blank" rel="noopener">kindlegen</a>，mobi 的生成就靠它。</li></ul><h2 id="oreilly-kindle-book-编译"><a href="#oreilly-kindle-book-编译" class="headerlink" title="oreilly_kindle_book 编译"></a>oreilly_kindle_book 编译</h2><p>基于 golang 1.13 开发，目前没有上传二进制包，自行编译吧。</p><p>推荐 clone 之后直接 <code>make &amp;&amp; make install</code>。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/zyh94946/oreilly_kindle_book.git<br>$ <span class="hljs-built_in">cd</span> oreilly_kindle_book<br>$ make &amp;&amp; make install<br>Building oreilly_kindle_book...<br>Building success...<br>Installing oreilly_kindle_book...<br>Install success to /usr/<span class="hljs-built_in">local</span>/bin/oreilly_kindle_book.<br>Usage of oreilly_kindle_book:<br>  -email string<br>    you login email of https://www.oreilly.com/member/<br>  -<span class="hljs-built_in">help</span><br>    <span class="hljs-built_in">help</span><br>  -n string<br>    the num of https://learning.oreilly.com/library/view/BOOK-NAME/***<br>  -p string<br>    you login password of https://www.oreilly.com/member/<br>  -version<br>    <span class="hljs-built_in">print</span> version and <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>当然 <code>go get</code> 也可以</p><figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ <span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/zyh94946/oreilly_kindle_book<br>$ <span class="hljs-keyword">go</span> install github.<span class="hljs-keyword">com</span>/zyh94946/oreilly_kindle_book<br></code></pre></td></tr></table></figure><h2 id="oreilly-kindle-book-使用"><a href="#oreilly-kindle-book-使用" class="headerlink" title="oreilly_kindle_book 使用"></a>oreilly_kindle_book 使用</h2><p>非常简单</p><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ <span class="hljs-keyword">oreilly_kindle_book </span>-n <span class="hljs-keyword">BOOK_NUM </span>-email YOU_EMAIL -p YOU_PASSWORD<br></code></pre></td></tr></table></figure><p>完成后 mobi 会生成在当前目录下。</p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><p>咱要 kindle 用，首先研究下 mobi 的生成。有两个特定格式的文件，一个 ncx (组织目录)，一个 opf (组织所有文件)，按格式来就能生成。开始梳理需要的资源看看可行性。完事准备写程序都爬下来，生成所需的格式，用 kindlegen 测试生成 mobi，大问题没有小问题不少，挨个解决。最后发现实现登录也不难索性加上了。编写过程中看了很多 go 原生包也使用了不少。</p><p>golang 需要注意的点不完全总结：</p><ul><li><code>go func(){}()</code> 实际执行的时间与其所属语句执行时间是不一样的。</li><li>通过 <code>chan</code> 控制并发。</li><li>大量字符串拼接不要用 <code>+</code> 时间与空间上都复杂。可用使用 <code>strings.Builder{}</code> 字节切片的概念。</li><li><code>os.Exit()</code> 结束程序后，<code>defer</code> 不会执行。</li><li>有问题多看看官方文档比什么都强 :)。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Kindle </tag>
            
            <tag> mobi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器服务化方向的一些探索</title>
      <link href="/2019/08/28/docker_traefik_micro_service/"/>
      <url>/2019/08/28/docker_traefik_micro_service/</url>
      
        <content type="html"><![CDATA[<p>本文参考<a href="https://ronggle.com/2018/cloud-labs/" target="_blank" rel="noopener">使用Docker打造自己的云平台</a>编写</p><p>本文基于 Docker Swarm Mode 实现容器化，虽然目前 k8s 更火一些，但实在是太重了，以后再折腾。<br>使用 traefik 来实现反向代理、负载均衡，traefik 还自带了服务发现、后端断路器、健康检查等，相当于是自带服务发现的 nginx。当然它还支持其他的容器编排工具如，服务发现工具如 Consul。<br>使用 Portainer 来管理 Docker 容器，可以兼容 Docker Swarm 模式。</p><p>Docker 的安装就不说了。装完初始化 Swarm 模式。</p><figure class="hljs highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>docker swarm init<br></code></pre></td></tr></table></figure><p>先设置一下环境变量。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DOCKER_DEV_PATH</span>=/usr/local/src/docker-dev<br></code></pre></td></tr></table></figure><p>日志文件都会统一存到 ${DOCKER_DEV_PATH}/logs。</p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p>新建一个编排文件 traefik.yml。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined">version: <span class="hljs-string">'3.3'</span><br>services:<br>  reverse-proxy:<br>    image: traefik:<span class="hljs-number">1.7</span>-alpine<br>    command: --web --docker --docker.domain=cloud-labs<span class="hljs-selector-class">.io</span> --docker<span class="hljs-selector-class">.watch</span> --docker.swarmmode=true --loglevel=INFO --accesslog --accesslog.filepath=/logs/access<span class="hljs-selector-class">.log</span> --traefiklog --traefiklog.filepath=/logs/traefik<span class="hljs-selector-class">.log</span><br>    deploy:<br>      mode: replicated<br>      replicas: <span class="hljs-number">1</span><br>      labels:<br>        - traefik.enable=true<br>        - traefik.backend=traefik<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:monitor<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik.port=<span class="hljs-number">8080</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>    networks:<br>      - proxy<br>    ports:<br>      - <span class="hljs-number">8081</span>:<span class="hljs-number">80</span><br>    volumes:<br>      - /var/run/docker<span class="hljs-selector-class">.sock</span>:/var/run/docker<span class="hljs-selector-class">.sock</span><br>      - $&#123;DOCKER_DEV_PATH&#125;/logs/traefik:/logs<br>      - /dev/null:/traefik<span class="hljs-selector-class">.toml</span><br>networks:<br>  proxy:<br></code></pre></td></tr></table></figure><p>简单解释下 labels 中配置的含义</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">traefik<span class="hljs-selector-class">.backend</span> 后端<br>traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span> 前端规则，满足此规则转发给后端<br>traefik<span class="hljs-selector-class">.port</span> 后端端口 <span class="hljs-number">8080</span> 是 traefik web 后台端口<br>traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span> 指定网络<br></code></pre></td></tr></table></figure><p>更多可用 labels 可用看该<a href="https://docs.traefik.io/configuration/backends/docker/#on-containers" target="_blank" rel="noopener">Traefik 文档</a></p><p>因为在腾讯云上做的测试没有域名备案，映射了8081端口到80。</p><p>部署traefik</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker stack deploy -c traefik<span class="hljs-selector-class">.yml</span> traefik<br></code></pre></td></tr></table></figure><p>完成后访问 monitor.cloud-labs.io:8081 就可以进入 traefik 的后台界面了（当然这个域名是要绑host的）。</p><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><p>Portainer是一个轻量级的Docker环境管理UI。</p><p>新建一个编排文件 portainer.yml。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">version:</span> <span class="hljs-string">'3.3'</span><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  server:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">portainer/portainer</span><br><span class="hljs-attr">    command:</span> <span class="hljs-bullet">-H</span> <span class="hljs-attr">unix:///var/run/docker.sock</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">traefik_proxy</span><br><span class="hljs-attr">    deploy:</span><br><span class="hljs-attr">      labels:</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.enable=true</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.backend=portainer</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.frontend.rule=Host:console.cloud-labs.io</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.docker.network=traefik_proxy</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.port=9000</span><br><span class="hljs-attr">    volumes:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br><span class="hljs-attr">      - portainer:</span><span class="hljs-string">/data</span><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  traefik_proxy:</span><br><span class="hljs-attr">    external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-attr">  portainer:</span><br></code></pre></td></tr></table></figure><p>部署</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker stack deploy -c portainer<span class="hljs-selector-class">.yml</span> portainer<br></code></pre></td></tr></table></figure><p>访问 console.cloud-labs.io:8081 就可以管理 Docker 了。</p><h2 id="部署一个PHP服务"><a href="#部署一个PHP服务" class="headerlink" title="部署一个PHP服务"></a>部署一个PHP服务</h2><p>php服务部署其实还是有些麻烦的。一般前端起nginx将php请求转发到php-fpm，这个时候用的是FastCGI协议。但是目前traefik不支持FastCGI协议，估计以后也不会支持，所以php和nginx要一块部署。如下配置文件。<br>新建一个编排文件 nginx_php_web.yml，其中包含nginx和php。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs undefined">version: <span class="hljs-string">'3.3'</span><br>services:<br>  nginx:<br>   image: nginx:latest<br>   volumes:<br>     - $&#123;DOCKER_DEV_PATH&#125;/logs/nginx:/data/logs/nginx<br>     - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/<span class="hljs-selector-tag">code</span><br>     - ./site<span class="hljs-selector-class">.conf</span>:/etc/nginx/conf.d/default<span class="hljs-selector-class">.conf</span><br>   depends_on:<br>     - php<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">2</span><br>     labels:<br>        - traefik.backend=nginx<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.passHostHeader</span>=true<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>        - traefik.port=<span class="hljs-number">80</span><br>  php:<br>   image: php:<span class="hljs-number">5.5</span>.<span class="hljs-number">38</span>-fpm<br>   volumes:<br>    - ./php<span class="hljs-selector-class">.ini</span>:/usr/local/etc/php/php<span class="hljs-selector-class">.ini</span><br>    - ./php-fpm<span class="hljs-selector-class">.conf</span>:/usr/local/etc/php-fpm<span class="hljs-selector-class">.conf</span><br>    - ./www<span class="hljs-selector-class">.conf</span>:/usr/local/etc/php-fpm.d/www<span class="hljs-selector-class">.conf</span><br>    - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/<span class="hljs-selector-tag">code</span><br>    - $&#123;DOCKER_DEV_PATH&#125;/logs/php:/data/logs/php<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">3</span><br>     labels:<br>        - traefik.enable=false<br>networks:<br>  traefik_proxy:<br>    external: true<br></code></pre></td></tr></table></figure><p>部署</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker stack deploy -c nginx_php_web<span class="hljs-selector-class">.yml</span> nginx_php_web<br></code></pre></td></tr></table></figure><p>访问 domain.cloud-labs.io:8081 可以看到服务已经起来了。<br>但是这种方式会有问题</p><ul><li>因为请求是从traefik直接到nginx，做健康检查的话只能在nginx上写规则，这样会有问题。除非将nginx和php构建到一个镜像中，但是这又违反了docker的初衷。</li><li>经过traefik-&gt;nginx-&gt;php 性能也会应该有所损耗。</li></ul><p>另一种方式通过php的swoole扩展起一个http服务，直接将请求转发过去。</p><p>建一个Dockerfile，build一个带swoole的php镜像。这里用了最新的php版本。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">FROM</span> php:7.3.8-cli<br><span class="hljs-builtin-name">RUN</span> pecl channel-update pecl.php.net<br><span class="hljs-comment"># 从pecl安装扩展</span><br><span class="hljs-builtin-name">RUN</span> pecl install swoole-4.4.0 \<br>    &amp;&amp; docker-php-ext-<span class="hljs-builtin-name">enable</span> swoole<br></code></pre></td></tr></table></figure><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker build -t php7<span class="hljs-number">.3</span><span class="hljs-number">.8</span>_swoole4<span class="hljs-number">.4</span><span class="hljs-number">.0</span> . &gt; build.log &amp;<br></code></pre></td></tr></table></figure><p>很简单没有遇见任何问题。</p><p>再建一个编排文件 php_web.yml。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined">version: <span class="hljs-string">'3.3'</span><br>services:<br>  swoole_http:<br>   image: php7.<span class="hljs-number">3.8</span>_swoole4.<span class="hljs-number">4.0</span>:latest<br>   command: php /code/httpServ<span class="hljs-selector-class">.php</span> <span class="hljs-number">8888</span><br>   volumes:<br>    - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/<span class="hljs-selector-tag">code</span><br>    - $&#123;DOCKER_DEV_PATH&#125;/logs/swoole:/data/logs/swoole<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">2</span><br>     labels:<br>        - traefik.backend=swoole_http<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.passHostHeader</span>=true<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>        - traefik.port=<span class="hljs-number">8888</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.hostname</span>=domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.port</span>=<span class="hljs-number">8888</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.path</span>=/healthcheck<span class="hljs-selector-class">.php</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.interval</span>=<span class="hljs-number">5s</span><br>networks:<br>  traefik_proxy:<br>    external: true<br></code></pre></td></tr></table></figure><p>其中做了健康检查每五秒一次。httpServ.php的内容整理完发到github上了，文末有说明。<br>部署起来。</p><figure class="hljs highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker <span class="hljs-keyword">stack</span> <span class="hljs-keyword">rm</span> nginx_php_web<br>$ docker <span class="hljs-keyword">stack</span> deploy -c php_web.yml php_web<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>traefik 界面<br><img src="/images/15669802286595.jpg" alt></p><p>Portainer 界面<br><img src="/images/15669806334566.jpg" alt></p><p>跑是跑起来了，但还有些问题。</p><ul><li>docker swarm目前只是单节点</li><li>容器日志、监控处理的不太好</li><li>压力测试也没有做</li><li>没有关联CI/CD</li></ul><p>坑挖的有点多慢慢填吧。。</p><p>文中所有配置文件都整理完发到github上了，地址 <a href="https://github.com/zyh94946/docker-dev" target="_blank" rel="noopener">https://github.com/zyh94946/docker-dev</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP7 数组排序函数源码解析</title>
      <link href="/2019/05/22/php7_function_sort/"/>
      <url>/2019/05/22/php7_function_sort/</url>
      
        <content type="html"><![CDATA[<p>今天来看看经常使用的数组排序函数如 <code>sort, rsort, asort, arsort, ksort, krsort</code> 。话不多说直接找 <code>sort</code> 函数吧。</p><p>在 <code>php7.3</code> 源码中搜索 <code>PHP_FUNCTION(sort)</code> 可以搜到如下</p><p><img src="/images/15584996147536.jpg" alt></p><p>其中 <code>.h</code> 文件是C语言的头文件，直接打开 <code>.c</code> 文件。<br><code>sort</code> 函数如下，其中我加了一点注释。</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined">PHP_FUNCTION(sort)<br>&#123;<br>zval *<span class="hljs-built_in">array</span>;<br>zend_long sort_type = PHP_SORT_REGULAR; <span class="hljs-comment">// 默认的排序规则</span><br><span class="hljs-keyword">compare_func_t</span> cmp;<br><br><span class="hljs-comment">// 这里开始接请求参数</span><br>ZEND_PARSE_PARAMETERS_START(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>Z_PARAM_ARRAY_EX(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-function">Z_PARAM_OPTIONAL<br><span class="hljs-title">Z_PARAM_LONG</span><span class="hljs-params">(sort_type)</span><br><span class="hljs-title">ZEND_PARSE_PARAMETERS_END_EX</span><span class="hljs-params">(RETURN_FALSE)</span></span>;<br><br><span class="hljs-comment">// 根据排序规则获取使用的排序函数</span><br>cmp = php_get_data_compare_func(sort_type, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 进行排序</span><br><span class="hljs-keyword">if</span> (zend_hash_sort(Z_ARRVAL_P(<span class="hljs-built_in">array</span>), cmp, <span class="hljs-number">1</span>) == FAILURE) &#123;<br>RETURN_FALSE;<br>&#125;<br>RETURN_TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>不但 <code>rsort, asort, arsort, ksort, krsort</code> 这些函数在 <code>array.c</code> 文件中，<a href="https://www.php.net/manual/zh/book.array.php" target="_blank" rel="noopener">PHP数组</a>相关的也都在其中。<br>先说下 <code>rsort, asort, arsort, ksort, krsort</code> 函数内容与 <code>sort</code> 只有细微的差别。<br><code>ksort、krsort</code> 是根据键排序所以排序规则获取排序函数用的是 <code>php_get_key_compare_func</code> 参数与 <code>php_get_data_compare_func</code> 是一样的。<br><code>php_get_data_compare_func、php_get_key_compare_func</code> 函数第二个参数意思是是否降序排列，<code>rsort、arsort、krsort</code> 第二个参数都是1。<br>进行排序时 <code>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</code> 第三个参数意思是是否重新排列索引， <code>sort、rsort</code> 传的都是1。<br>做个表格看下</p><table><thead><tr><th></th><th>获取排序函数</th><th>调用排序</th></tr></thead><tbody><tr><td>sort</td><td>php_get_data_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</td></tr><tr><td>rsort</td><td>php_get_data_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</td></tr><tr><td>asort</td><td>php_get_data_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>arsort</td><td>php_get_data_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>ksort</td><td>php_get_key_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>krsort</td><td>php_get_key_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr></tbody></table><p>其中调用 <code>php_get_data_compare_func</code> 与 <code>php_get_key_compare_func</code> 获取的 <code>cmp</code> 后面再说明。</p><p>继续找 <code>zend_hash_sort</code> ，在 <code>zend_hash.h</code> 中。</p><figure class="hljs highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-id">#define</span> <span class="hljs-selector-tag">zend_hash_sort</span>(ht, compare_func, renumber) \<br><span class="hljs-selector-tag">zend_hash_sort_ex</span>(ht, zend_sort, compare_func, renumber)<br></code></pre></td></tr></table></figure><p>看来 <code>zend_hash_sort</code> 中调用了 <code>zend_hash_sort_ex</code> 。 <code>zend_hash_sort_ex</code> 在 <code>zend_hash.c</code> 中。</p><figure class="hljs highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ZEND_API int ZEND_FASTCALL zend_hash_sort_ex(HashTable *ht, sort_func_t sort, compare_func_t compar, zend_bool renumber)<br>&#123;<br>Bucket *p;<br>uint32_t i, j;<br><br>IS_CONSISTENT(ht);<br>HT_ASSERT_RC1(ht);<br><br><span class="hljs-function"><span class="hljs-title">if</span> (!(ht-&gt;</span><span class="hljs-function"><span class="hljs-title">nNumOfElements</span>&gt;1) &amp;&amp; !(renumber &amp;&amp; ht-&gt;</span>nNumOfElements&gt;<span class="hljs-number">0</span>)) &#123; <span class="hljs-comment">/* Doesn't require sorting */</span><br>return SUCCESS;<br>&#125;<br><br><span class="hljs-comment">// 这里获取数组元素数，判断hash table是否没有洞，"洞"意思是数组里面元素被unset过，被unset过的val type是IS_UNDEF，不能通过nNumUsed直接获取数组的元素数。</span><br><span class="hljs-keyword">if</span> (HT_IS_WITHOUT_HOLES(ht)) &#123;<br><span class="hljs-function"><span class="hljs-title">i</span> = ht-&gt;</span>nNumUsed;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-function"><span class="hljs-title">for</span> (j = 0, i = 0; j &lt; ht-&gt;</span>nNumUsed; j++) &#123;<br><span class="hljs-function"><span class="hljs-title">p</span> = ht-&gt;</span>arData + j;<br><span class="hljs-function"><span class="hljs-title">if</span> (UNEXPECTED(Z_TYPE(p-&gt;</span>val) == IS_UNDEF)) continue;<br><span class="hljs-keyword">if</span> (i != j) &#123;<br><span class="hljs-function"><span class="hljs-title">ht</span>-&gt;</span>arData[i] = *p;<br>&#125;<br>i++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 这个sort是由上面直接传进来的zend_sort，终于到最重要的排序了</span><br><span class="hljs-function"><span class="hljs-title">sort</span>((void *)ht-&gt;</span>arData, i, sizeof(Bucket), compar,<br>(swap_func_t)(renumber? zend_hash_bucket_renum_swap :<br>((HT_FLAGS(ht) &amp; HASH_FLAG_PACKED) ? zend_hash_bucket_packed_swap : zend_hash_bucket_swap)));<br><br><span class="hljs-comment">// 后面是根据renumber判断是否需要重排索引内存回收等操作先省略了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>zend_sort.c</code> 中找到 <code>zend_sort</code> ，通过备注发现这个排序是源于 <code>LLVM</code> 的 <code>libc++</code> 中的 <code>std::sort</code> 实现的。算是快排的优化版，当元素数小于等于16时有特殊的优化，当元素数小于等于5时直接通过 <code>if else</code> 嵌套判断排序，真是优化的极致。<code>zend_sort_2</code> 、 <code>zend_sort_3</code> 、 <code>zend_sort_4</code> 、 <code>zend_sort_5</code> 中是 <code>if else</code> 嵌套的判断排序就不贴出来了。其中基准点(pivot)计算方式也进行了优化。相比 <code>PHP5</code> 时代的标配快排实现要稳定多了。</p><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ZEND_API void zend_sort(<span class="hljs-name">void</span> *base, size_t nmemb, size_t siz, compare_func_t cmp, swap_func_t swp)<br>&#123;<br>while (1) &#123;<br>if (nmemb &lt;= 16) &#123;<br>zend_insert_sort(base, nmemb, siz, cmp, swp);<br>return;<br>&#125; else &#123;<br>char *i, *j;<br>char *start = (<span class="hljs-name">char</span> *)base;<br>char *end = start + (<span class="hljs-name">nmemb</span> * siz);<br>size_t offset = (nmemb &gt;&gt; Z_L(1));<br>char *pivot = start + (<span class="hljs-name">offset</span> * siz);<br><br>if ((nmemb &gt;&gt; Z_L(10))) &#123;<br>size_t delta = (offset &gt;&gt; Z_L(1)) * siz<span class="hljs-comment">;</span><br>zend_sort_5(<span class="hljs-name">start</span>, start + delta, pivot, pivot + delta, end - siz, cmp, swp)<span class="hljs-comment">;</span><br>&#125; else &#123;<br>zend_sort_3(<span class="hljs-name">start</span>, pivot, end - siz, cmp, swp)<span class="hljs-comment">;</span><br>&#125;<br>swp(<span class="hljs-name">start</span> + siz, pivot)<span class="hljs-comment">;</span><br>pivot = start + siz<span class="hljs-comment">;</span><br>i = pivot + siz<span class="hljs-comment">;</span><br>j = end - siz<span class="hljs-comment">;</span><br>while (<span class="hljs-number">1</span>) &#123;<br>while (<span class="hljs-name">cmp</span>(<span class="hljs-name">pivot</span>, i) &gt; <span class="hljs-number">0</span>) &#123;<br>i += siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">i</span> == j)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">j</span> == i)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>while (<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, pivot) &gt; <span class="hljs-number">0</span>) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">j</span> == i)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>swp(<span class="hljs-name">i</span>, j)<span class="hljs-comment">;</span><br>i += siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">i</span> == j)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>done:<br>swp(<span class="hljs-name">pivot</span>, i - siz)<span class="hljs-comment">;</span><br>if ((<span class="hljs-name">i</span> - siz) - start &lt; end - i) &#123;<br>zend_sort(<span class="hljs-name">start</span>, (<span class="hljs-name">i</span> - start)/siz - <span class="hljs-number">1</span>, siz, cmp, swp)<span class="hljs-comment">;</span><br>base = i<span class="hljs-comment">;</span><br>nmemb = (<span class="hljs-name">end</span> - i)/siz<span class="hljs-comment">;</span><br>&#125; else &#123;<br>zend_sort(<span class="hljs-name">i</span>, (<span class="hljs-name">end</span> - i)/siz, siz, cmp, swp)<span class="hljs-comment">;</span><br>nmemb = (<span class="hljs-name">i</span> - start)/siz - <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>ZEND_API void zend_insert_sort(<span class="hljs-name">void</span> *base, size_t nmemb, size_t siz, compare_func_t cmp, swap_func_t swp) &#123;<br>switch (nmemb) &#123;<br>case 0:<br>case 1:<br>break;<br>case 2:<br>zend_sort_2(base, (char *)base + siz, cmp, swp)<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>case <span class="hljs-number">3</span>:<br>zend_sort_3(<span class="hljs-name">base</span>, (<span class="hljs-name">char</span> *)base + siz, (char *)base + siz + siz, cmp, swp)<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>case <span class="hljs-number">4</span>:<br>&#123;<br>size_t siz2 = siz + siz<span class="hljs-comment">;</span><br>zend_sort_4(<span class="hljs-name">base</span>, (<span class="hljs-name">char</span> *)base + siz, (char *)base + siz2, (<span class="hljs-name">char</span> *)base + siz + siz2, cmp, swp);<br>&#125;<br>break;<br>case 5:<br>&#123;<br>size_t siz2 = siz + siz;<br>zend_sort_5(base, (char *)base + siz, (<span class="hljs-name">char</span> *)base + siz2, (char *)base + siz + siz2, (<span class="hljs-name">char</span> *)base + siz2 + siz2, cmp, swp);<br>&#125;<br>break;<br>default:<br>&#123;<br>char *i, *j, *k<span class="hljs-comment">;</span><br>char *start = (char *)base<span class="hljs-comment">;</span><br>char *end = start + (nmemb * siz)<span class="hljs-comment">;</span><br>size_t siz2= siz + siz<span class="hljs-comment">;</span><br>char *sentry = start + (6 * siz)<span class="hljs-comment">;</span><br>for (<span class="hljs-name">i</span> = start + siz<span class="hljs-comment">; i &lt; sentry; i += siz) &#123;</span><br>j = i - siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>continue<span class="hljs-comment">;</span><br>&#125;<br>while (<span class="hljs-name">j</span> != start) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>for (<span class="hljs-name">k</span> = i<span class="hljs-comment">; k &gt; j; k -= siz) &#123;</span><br>swp(<span class="hljs-name">k</span>, k - siz)<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>for (<span class="hljs-name">i</span> = sentry<span class="hljs-comment">; i &lt; end; i += siz) &#123;</span><br>j = i - siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>continue<span class="hljs-comment">;</span><br>&#125;<br>do &#123;<br>j -= siz2<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>if (<span class="hljs-name">j</span> == start) &#123;<br>break<span class="hljs-comment">;</span><br>&#125;<br>if (<span class="hljs-name">j</span> == start + siz) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">cmp</span>(<span class="hljs-name">i</span>, j) &gt; <span class="hljs-number">0</span>) &#123;<br>j += siz<span class="hljs-comment">;</span><br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125; while (<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>for (<span class="hljs-name">k</span> = i<span class="hljs-comment">; k &gt; j; k -= siz) &#123;</span><br>swp(<span class="hljs-name">k</span>, k - siz)<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后来说说 <code>cmp</code> 这个函数，当 <code>sort_flags</code> 为 <code>SORT_REGULAR</code> 时 <code>sort</code> 函数的 <code>cmp</code> 调用的是 <code>array.c</code> 中的下面这个函数，返回值分成 小于0(b&gt;1), 0(b==a), 大于0(a&gt;b)对比失败也是0。</p><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined">static int php_array_data_compare(const void *a, const void *<span class="hljs-keyword">b)<br></span>&#123;<br><span class="hljs-keyword">Bucket </span>*f<span class="hljs-comment">;</span><br><span class="hljs-keyword">Bucket </span>*s<span class="hljs-comment">;</span><br>zval result<span class="hljs-comment">;</span><br>zval *first<span class="hljs-comment">;</span><br>zval *second<span class="hljs-comment">;</span><br><br>f = (<span class="hljs-keyword">Bucket </span>*) a<span class="hljs-comment">;</span><br>s = (<span class="hljs-keyword">Bucket </span>*) <span class="hljs-keyword">b;<br></span><br>first = &amp;f-&gt;val<span class="hljs-comment">;</span><br>second = &amp;s-&gt;val<span class="hljs-comment">;</span><br><br>if (UNEXPECTED(Z_TYPE_P(first) == IS_INDIRECT)) &#123;<br>first = Z_INDIRECT_P(first)<span class="hljs-comment">;</span><br>&#125;<br>if (UNEXPECTED(Z_TYPE_P(second) == IS_INDIRECT)) &#123;<br>second = Z_INDIRECT_P(second)<span class="hljs-comment">;</span><br>&#125;<br>if (compare_function(&amp;result, first, second) == FAILURE) &#123;<br>return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br><br>ZEND_ASSERT(Z_TYPE(result) == IS_LONG)<span class="hljs-comment">;</span><br>return ZEND_NORMALIZE_BOOL(Z_LVAL(result))<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再往下追就是 <code>compare_function</code> 很长我就不贴了，简单说下其中先判断 <code>first</code> 和 <code>second</code> 类型，再进行各种分支比较。比较好奇其中的都是字符串时对比方法，追了下发现底层使用的是C的 <code>memcmp</code> 比较这两个串的前N个字节，这个N是这两个串中较小的那个。</p><p>最后总结下 <code>PHP7</code> 对比 <code>PHP5</code> 时代数组排序调用逻辑相差不大，但是排序算法优化了很多，更不用说底层的hash table了。</p><p>最后的最后文中如有理解错误的点也请指教。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains IDE 文件对比功能</title>
      <link href="/2019/05/07/jetbrains_ide_compare_text/"/>
      <url>/2019/05/07/jetbrains_ide_compare_text/</url>
      
        <content type="html"><![CDATA[<p>之前用Beyond Compare对比文件，功能非常强大。但是试用期到了就用不了了，而且授权非常的贵，很多功能一般也用不到。</p><p>一般文件对比直接用系统自带的diff命令就可以了。但是，如果临时复制粘贴不同版本文件对比，又不想为了对比而创建文件，JetBrains家IDE对比功能就派上用场了。</p><p>Mac下按 <code>⇧⌘A</code> ，搜索 <code>open diff</code> ，回车。<br><img src="/images/15572093570374.jpg" alt></p><p>左右两边可以随意复制粘贴对比了。<br><img src="/images/15573665970343.jpg" alt></p><p><code>⇧⌘A</code>这其实是一个功能搜索快捷键，可以搜索任何功能。也可以快速开关一个功能。<br><img src="/images/15572097029571.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写Go的TCP服务来替代PHP的Swoole</title>
      <link href="/2019/04/30/swoole_to_go_serv/"/>
      <url>/2019/04/30/swoole_to_go_serv/</url>
      
        <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>目前公司采用微服务架构，主要开发语言为PHP，通过Swoole开启TCP服务供业务端调用。通过公司内部编写的PHP扩展封装客户端调用逻辑。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>暂定使用Go语言开发新的业务，并提供TCP服务。其中老的PHP项目要通过原有的客户端扩展实现无修改调用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过阅读客户端扩展源码了解调用逻辑。编写简单的测试如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>$_client = <span class="hljs-keyword">new</span> \swoole_client(SWOOLE_SOCK_TCP | SWOOLE_KEEP);<br>$_client-&gt;set([<br>    <span class="hljs-string">'open_length_check'</span> =&gt; <span class="hljs-keyword">true</span>,<br>    <span class="hljs-string">'package_length_type'</span> =&gt; <span class="hljs-string">'N'</span>,<br>    <span class="hljs-string">'package_length_offset'</span> =&gt; <span class="hljs-number">0</span>,<br>    <span class="hljs-string">'package_body_offset'</span> =&gt; <span class="hljs-number">4</span>,<br>    <span class="hljs-string">'package_max_length'</span> =&gt; <span class="hljs-number">24657920</span>,<br>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span> == $_client-&gt;connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">8880</span>)) &#123;<br>    printf(<span class="hljs-string">"err_msg: %s err_code: %s"</span> . PHP_EOL, var_export($_client-&gt;errMsg, <span class="hljs-keyword">true</span>), var_export($_client-&gt;errCode, <span class="hljs-keyword">true</span>));<br>&#125;<br><br><span class="hljs-comment">// 随便测试个请求参数</span><br>$data = [<br>    <span class="hljs-string">'api'</span> =&gt; <span class="hljs-string">'getUserInfo'</span>,<br>    <span class="hljs-string">'params'</span> =&gt; [<br>        <span class="hljs-string">'user_id'</span> =&gt; <span class="hljs-number">123</span><br>    ]<br>];<br>$data = json_encode($data);<br>$data = gzcompress($data, <span class="hljs-number">9</span>);<br>$_client-&gt;send(pack(<span class="hljs-string">"N"</span>, strlen($data)) . $data);<br><br>$res = $_client-&gt;recv();<br>$end = getTime();<br><br>$data = json_decode($res, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>其中前4个字节是head，表示body长度，采用二进制大端字节序编码。body先进行json编码再进行了zlib压缩。这都是编写Go的TCP服务时需要处理的。</p><p>写个简单的Go TCP服务试试，先不考虑过多的错误边界处理。</p><figure class="hljs highlight Go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"compress/zlib"</span><br><span class="hljs-string">"encoding/binary"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"io"</span><br><span class="hljs-string">"net"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ln, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":8880"</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := ln.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"accept err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">go</span> handleConnection(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConnection</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">"on conn"</span>)<br><br>head_len := <span class="hljs-number">4</span><br>head := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, head_len)<br>_, err := conn.Read(head)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"head read err:%s"</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 解码大端字节序获取body长度</span><br>body_len := binary.BigEndian.Uint32(head)<br>body_len += <span class="hljs-keyword">uint32</span>(head_len)<br>body := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, body_len)<br>_, err = conn.Read(body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"body read err:%s"</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 解压zlib压缩的数据 RFC 1950</span><br>b := bytes.NewReader(body)<br>uncompress_read, err := zlib.NewReader(b)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"uncompress data err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">var</span> uncompress_data bytes.Buffer<br>io.Copy(&amp;uncompress_data, uncompress_read)<br><br>   <span class="hljs-comment">// 解出的json字符串</span><br>fmt.Printf(<span class="hljs-string">"Received:%s"</span>, uncompress_data.Bytes())<br><br><span class="hljs-comment">// 路由调用实际业务逻辑处理 ...</span><br><span class="hljs-comment">// conn.Write()</span><br><br>conn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行Go的TCP服务，跑一个PHP请求测试。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">on conn<br>Received:&#123;"api":"getUserInfo","params":&#123;"user_id":123&#125;&#125;<br></code></pre></td></tr></table></figure><p>经过多次修改测试终于成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
            <tag> Go </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP5下的Error错误处理及问题定位</title>
      <link href="/2019/01/08/php5_error_handle/"/>
      <url>/2019/01/08/php5_error_handle/</url>
      
        <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>来说说当PHP出现E_ERROR级别致命的运行时错误的问题定位方法。例如像<code>Fatal error: Allowed memory size of</code>内存溢出这种。当出现这种错误时会导致程序直接退出，PHP的error log中会记录一条错误日志说明报错的具体文件和代码行数，其它的任何信息都没有了。如果是PHP7的话还可以像捕获异常一样捕获错误，PHP5的话就不行了。</p><p>一般想到的方法就是看看报错的具体代码，如果报错文件是<code>CommonReturn.class.php</code>像下面这个样子。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>json_encode</code>那一行报错了，然后你查了下<code>packData</code>这个方法，有很多项目的类中都有调用，这时要怎么定位问题呢？</p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>好，首先我们复现下场景。假如实际调用的程序<code>bug.php</code>如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">'./CommonReturn.class.php'</span>;<br><br>$res = ini_set(<span class="hljs-string">'memory_limit'</span>, <span class="hljs-string">'1m'</span>);<br><br>$res = [];<br>$char = str_repeat(<span class="hljs-string">'x'</span>, <span class="hljs-number">999</span>);<br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">900</span> ; $i++) &#123;<br>    $res[] = $char;<br>&#125;<br><br>$get_pack = CommonReturn::packData($res);<br><br><span class="hljs-comment">// something else</span><br></code></pre></td></tr></table></figure><p>运行bug.php PHP错误日志中会记录</p><figure class="hljs highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[<span class="hljs-number">08</span>-Jan<span class="hljs-number">-2019</span> <span class="hljs-number">11</span>:<span class="hljs-number">22</span>:<span class="hljs-number">52</span> Asia/Shanghai] PHP Fatal <span class="hljs-keyword">error</span>:  Allowed memory size <span class="hljs-keyword">of</span> <span class="hljs-number">1048576</span> bytes exhausted (tried <span class="hljs-keyword">to</span> allocate <span class="hljs-number">525177</span> bytes) <span class="hljs-keyword">in</span> /CommonReturn.<span class="hljs-built_in">class</span>.php <span class="hljs-keyword">on</span> line <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>复现成功，错误日志中只是说明了报错的文件和哪行代码，无法知道程序的上下文堆栈信息，不知道具体是哪块业务逻辑调用的，这样一来就无法定位修复错误。如果是偶尔出现，并且没有来自前端业务的反馈要怎么排查呢。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>有人想到了修改<code>memory_limit</code>增加内存分配，但这种方法治标不治本。做开发肯定要找到问题的根源。</li><li>开启<code>core dump</code>，如果生成code文件可以进行调试，但是发现code只有进程异常退出才会生成。像E_ERROR级别的错误不一定会生成code文件，内存溢出这种可能PHP内部自己就处理了。</li><li>使用<code>register_shutdown_function</code>注册一个PHP终止时的回调函数，再调用<code>error_get_last</code>如果获取到了最后发生的错误，就通过<code>debug_print_backtrace</code>获取程序的堆栈信息，我们试试看。</li></ol><p>修改<code>CommonReturn.class.php</code>文件如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br><br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>]);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 错误处理<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">()</span><br>    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            ob_start();<br>            debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>            $trace = ob_get_clean();<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">23</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::handleFatal()</span><br></code></pre></td></tr></table></figure><p>回溯信息没有来源，尴尬了。猜测因为backtrace信息保存在内存中，当出现致命错误时会清空。没办法，把backtrace从外面传进来试试。再次修改<code>CommonReturn.class.php</code>。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br><br>        ob_start();<br>        debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>        $trace = ob_get_clean();<br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>], $trace);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 错误处理<br>     * <span class="hljs-doctag">@param</span> $trace<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">($trace)</span><br>    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">26</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::packData() called at [/bug.php:13]</span><br></code></pre></td></tr></table></figure><p>成功定位到了调用来源，在<code>bug.php</code>的13行。将最终的<code>CommonReturn.class.php</code>发布到生产环境，再次出现出现错误时候看日志就可以了。但是这样的话所有调用<code>packData</code>的程序都会执行trace函数，肯定也会影响性能的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对于其中使用到的<code>register_shutdown_function</code>函数需要注意，可以注册多个不同的回调，但是如果某一个回调函数中exit了，那么后面注册的回调函数都不会执行。</li><li><code>debug_print_backtrace</code>这个获取回溯信息函数第一个是否包含请求参数，第二个是回溯记录层数，我们这里是不返回请求参数，可以节省些内存，而且如果请求参数巨大的话调这个函数可能就直接内存溢出了。</li><li>最好的办法就是升级PHP7，可以像异常一样捕获错误。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 消息队列：队列的参数与消息的属性</title>
      <link href="/2018/01/31/rabbitmq2/"/>
      <url>/2018/01/31/rabbitmq2/</url>
      
        <content type="html"><![CDATA[<p>队列的参数即声明Queues时的Arguments。<br>消息的属性即向Exchange发布消息时的Properties。</p><h2 id="Queues-Arguments"><a href="#Queues-Arguments" class="headerlink" title="Queues Arguments"></a>Queues Arguments</h2><p>Message TTL<br>消息的存活时间，写入队列后被消费前可以存活的时间单位毫秒，通过<code>x-message-ttl</code>属性设置。</p><p>Auto expire<br>队列的存活时间，指定时间内没有consumer或get方式请求队列消息则会自动删除，通过<code>x-expires</code>属性设置。</p><p>Dead letter exchange<br>死信消息的exchange，通过<code>x-dead-letter-exchange</code>属性设置。</p><p>Dead letter routing key<br>死信消息的路由键，通过<code>x-dead-letter-routing-key</code>属性设置。</p><p>Maximum priority<br>消息支持的最大优先级，可实现优先级消息队列，通过<code>x-max-priority</code>属性设置。</p><p>Max length<br>队列的最大消息数，通过<code>x-max-length</code>属性设置。</p><p>Max length bytes<br>队列的消息的最大字节数，通过<code>x-max-length-bytes</code>属性设置。</p><p>Lazy mode<br>懒惰队列模式，将队列内容移动到磁盘上，当消息者请求时加载入内存，这样可以支持非常长的队列，通过<code>x-queue-mode</code>属性设置。</p><p>Master locator<br>在RabbitMQ的高可用镜像模式中，队列消息首先会写入主节点再依次备份至从节点，通过<code>x-queue-master-locator</code>属性设置队列的主节点选择策略。</p><ul><li>选择承担主节点最少的节点<code>min-masters</code></li><li>选择声明队列客户端连接到的节点<code>client-local</code></li><li>随机挑选一个节点<code>random</code></li></ul><p>死信相关<br>当消息满足以下三种情况之一时会当做死信来处理：</p><ul><li>消息被拒绝 (basic.reject or basic.nack)</li><li>消息未消费超时</li><li>超出队列长度限制</li></ul><p>队列最大长度相关<br>通过<code>x-max-length</code>、<code>x-max-length-bytes</code>来设置队列的最大长度。一个可以控制队列消息的个数，一个可以控制队列占用的空间。如果两个都设置任何一个触发都会执行队列溢出行为，默认的队列溢出后会从队列头开始丢弃消息或进行死信处理。通过<code>x-overflow</code>可以设置队列溢出后的行为，值为<code>drop-head</code>(默认值)或<code>reject-publish</code>(拒绝新消息)。</p><h2 id="Message-Properties"><a href="#Message-Properties" class="headerlink" title="Message Properties"></a>Message Properties</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>content_type</td><td>MIME类型</td></tr><tr><td>content_encoding</td><td>MIME编码</td></tr><tr><td>priority</td><td>消息优先级</td></tr><tr><td>correlation_id</td><td>业务应用关联标识</td></tr><tr><td>reply_to</td><td>回复队列名称</td></tr><tr><td>expiration</td><td>过期时间</td></tr><tr><td>message_id</td><td>业务应用消息标识</td></tr><tr><td>timestamp</td><td>消息写入时间戳</td></tr><tr><td>type</td><td>消息类型</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>app_id</td><td>应用id</td></tr><tr><td>cluster_id</td><td>集群id</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 消息队列：浅谈</title>
      <link href="/2017/12/28/rabbitmq1/"/>
      <url>/2017/12/28/rabbitmq1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>消息队列用来解决不同项目间通信、业务解耦。消息队列有很多种比如用Redis实现的轻量级消息队列。RabbitMQ是消息队列的一种，基于AMQP协议，用Erlang语言编写，属于一种消息队列中间件。</p><h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><p><img src="/images/15143024048456.jpg" alt></p><h3 id="Connection-链接"><a href="#Connection-链接" class="headerlink" title="Connection   链接"></a>Connection   链接</h3><p>真实的TCP链接</p><h3 id="Channel-信道"><a href="#Channel-信道" class="headerlink" title="Channel      信道"></a>Channel      信道</h3><p>基于Connection创建的Channel，所有的数据传输都是基于Channel的。大家都知道TCP链接需要三次握手，业务频繁每次开TCP链接对性能也会有不小的损耗，TCP链接数也有限制。Channel的存在主要是为了复用TCP链接。</p><h3 id="Exchange-交换机"><a href="#Exchange-交换机" class="headerlink" title="Exchange     交换机"></a>Exchange     交换机</h3><p>消息生产者生产的所有消息都会先写入Exchange中，再路由到Queues中，如果Exchange没有绑定或未匹配到Queues则消息会被丢弃。</p><h3 id="Queues-队列"><a href="#Queues-队列" class="headerlink" title="Queues       队列"></a>Queues       队列</h3><p>生产者生产的消息会从Exchange中路由到Queues中，消费者从Queues中消费消息。</p><h3 id="Binding-绑定"><a href="#Binding-绑定" class="headerlink" title="Binding      绑定"></a>Binding      绑定</h3><p>Binding将Exchange与Queues关联起来。</p><h3 id="Routing-key-路由键"><a href="#Routing-key-路由键" class="headerlink" title="Routing key  路由键"></a>Routing key  路由键</h3><p>路由键是消息从Exchange进入到某个Queues的规则。<br>在将Queues绑定至Exchange时会设置消息从Exchange路由至Queues的绑定路由键规则。<br>在将消息写入Exchange时会附带消息的路由键。</p><p>Exchange类型为direct或topic时，消息的投递会根据消息的路由键和绑定的路由键进行匹配，Exchange将消息投递给所有匹配上的Queues。</p><h4 id="路由键写法"><a href="#路由键写法" class="headerlink" title="路由键写法"></a>路由键写法</h4><p>路由键可以由<code>.</code> 进行分隔，如<code>computer.mac</code>或<code>computer.win</code>。<br>路由键还支持通配符来模糊匹配，<code>*</code>与<code>#</code><br><code>*</code>匹配一个分隔的单词<br><code>#</code>匹配多个或零个分隔的单词</p><p>应用举例</p><table><thead><tr><th>Exchange</th><th>Routing key</th><th>Queues</th></tr></thead><tbody><tr><td>X</td><td><code>*.*.imac</code></td><td>apple</td></tr><tr><td>X</td><td><code>apple.#</code></td><td>apple</td></tr><tr><td>X</td><td><code>*.phone.*</code></td><td>phone</td></tr></tbody></table><p>此时写入一条消息路由键为<code>apple.phone.iphone4</code>会被投递到队列apple与phone。<br>再写入一条消息路由键为<code>apple.computer.imac</code>仅会被投递到apple，此时apple队列匹配了两个路由键，但是也只会投递到apple一次。<br>再写入一条消息路由键为<code>micro.computer.win</code>因为没有匹配的路由键队列该消息会被丢弃。</p><h3 id="Exchange-Types-交换机类型"><a href="#Exchange-Types-交换机类型" class="headerlink" title="Exchange Types   交换机类型"></a>Exchange Types   交换机类型</h3><h4 id="fanout-广播"><a href="#fanout-广播" class="headerlink" title="fanout 广播"></a>fanout 广播</h4><p>fanout类型的Exchange会无视路由键，将消息投递给所有绑定到该Exchange上的Queues。</p><h4 id="direct-单播"><a href="#direct-单播" class="headerlink" title="direct 单播"></a>direct 单播</h4><p>direct类型的Exchange会将消息投递给路由键完全匹配的Queues中。</p><h4 id="topic-组播"><a href="#topic-组播" class="headerlink" title="topic 组播"></a>topic 组播</h4><p>topic类型的Exchange会将消息投递给路由键模糊匹配的Queues中。</p><h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>headers类型的Exchange也会无视路由键，会根据headers中的属性来进行匹配。该类型应用较少，不过在RabbitMQ内部还是有使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
