<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Swoole slowlog 乱码修复</title>
      <link href="/2020/05/11/swoole_slowlog/"/>
      <url>/2020/05/11/swoole_slowlog/</url>
      
        <content type="html"><![CDATA[<p>先说结果：fork 了 swoole 的源码，修复之后打了个 <a href="https://github.com/zyh94946/swoole-src/releases/tag/v1.10.7" target="_blank" rel="noopener">v1.10.7</a> 的版本。</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>由于各种原因项目在使用 <code>swoole</code> 的 v1.x 远古版本跑 TCP 服务，基础环境如下。</p><ul><li>CentOS 6.9</li><li>PHP 5.5.38</li></ul><p>然后遇到了程序偶发性超时情况严重。怀疑是版本bug，首先将 <code>swoole</code> 升级到了当前环境可用的最高版本 <code>v1.10.6</code>，问题依然没有解决。但是这个版本已经有了慢日志功能，将慢日志功能开起来，模拟程序阻塞超时，试试看功能可用否。</p><p>tcp_server.php</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tcpTest</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aa</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">self</span>::bb();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bb</span><span class="hljs-params">()</span> </span>&#123;<br>        sleep(<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Server</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> $serv = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>&#123;<br>        $serv = <span class="hljs-keyword">new</span> \swoole_server(<span class="hljs-string">"0.0.0.0"</span>, <span class="hljs-number">9577</span>);<br>        $serv-&gt;set([<br>            <span class="hljs-string">'reactor_num'</span> =&gt; <span class="hljs-number">2</span>,<br>            <span class="hljs-string">'worker_num'</span> =&gt; <span class="hljs-number">8</span>,<br>            <span class="hljs-string">'task_worker_num'</span> =&gt; <span class="hljs-number">0</span>,<br>            <span class="hljs-string">'dispatch_mode'</span> =&gt; <span class="hljs-number">2</span>,<br>            <span class="hljs-string">'daemonize'</span> =&gt; <span class="hljs-keyword">false</span>,<br>            <span class="hljs-string">'tcp_fastopen'</span> =&gt; <span class="hljs-keyword">true</span>,<br>            <span class="hljs-string">'request_slowlog_timeout'</span> =&gt; <span class="hljs-number">2</span>,<br>            <span class="hljs-string">'request_slowlog_file'</span> =&gt; <span class="hljs-string">'/tmp/swoole_slow.log'</span>,<br>            <span class="hljs-string">'trace_event_worker'</span> =&gt; <span class="hljs-keyword">true</span>,<br>        ]);<br><br>        $serv-&gt;on(<span class="hljs-string">'Start'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onStart'</span>));<br>        $serv-&gt;on(<span class="hljs-string">'Connect'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onConnect'</span>));<br>        $serv-&gt;on(<span class="hljs-string">'Receive'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onReceive'</span>));<br>        $serv-&gt;on(<span class="hljs-string">'Close'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">'onClose'</span>));<br>        $serv-&gt;start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onStart</span><span class="hljs-params">($serv)</span> </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . PHP_EOL;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onConnect</span><span class="hljs-params">($serv, $fd, $from_id)</span> </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">" worker_id:&#123;$serv-&gt;worker_id&#125; work_pid:&#123;$serv-&gt;worker_pid&#125; fd:&#123;$fd&#125; from_id:&#123;$from_id&#125;"</span> . PHP_EOL;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onReceive</span><span class="hljs-params">($serv, $fd, $from_id, $data)</span> </span>&#123;<br>        $fdinfo = $serv-&gt;connection_info($fd,$from_id,<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">" ip:&#123;$fdinfo['remote_ip']&#125; worker_id:&#123;$serv-&gt;worker_id&#125; work_pid:&#123;$serv-&gt;worker_pid&#125; fd:&#123;$fd&#125; from_id:&#123;$from_id&#125; data:&#123;$data&#125;"</span> . PHP_EOL;<br><br>        \tcpTest::aa();<br>        $res_data = [<span class="hljs-string">'time'</span> =&gt; date(<span class="hljs-string">'Y-m-d H:i:s'</span>)];<br>        $serv-&gt;send($fd, json_encode($res_data));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onClose</span><span class="hljs-params">($serv, $fd, $from_id)</span> </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">" worker_id:&#123;$serv-&gt;worker_id&#125; work_pid:&#123;$serv-&gt;worker_pid&#125; fd:&#123;$fd&#125; from_id:&#123;$from_id&#125;"</span> . PHP_EOL . PHP_EOL;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">self</span>::$serv <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">self</span>)) &#123;<br>            <span class="hljs-keyword">self</span>::$serv = <span class="hljs-keyword">new</span> <span class="hljs-keyword">self</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>::$serv;<br>    &#125;<br><br>&#125;<br>$res = \Server::inst();<br></code></pre></td></tr></table></figure><p>tcp_client.php</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTime</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">list</span>($micro, $time) = explode(<span class="hljs-string">' '</span>, microtime());<br>    <span class="hljs-keyword">return</span> $time + $micro;<br>&#125;<br><br>$begin = getTime();<br>$_client = <span class="hljs-keyword">new</span> \swoole_client(SWOOLE_SOCK_TCP | SWOOLE_KEEP);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span> == $_client-&gt;connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">9577</span>, <span class="hljs-number">10</span>)) &#123;<br>    printf(<span class="hljs-string">"err_msg: %s err_code: %s"</span> . PHP_EOL, var_export($_client-&gt;errMsg, <span class="hljs-keyword">true</span>), var_export($_client-&gt;errCode, <span class="hljs-keyword">true</span>));<br>&#125;<br><br>$_client-&gt;send(<span class="hljs-string">'hello'</span>);<br><br>$res = $_client-&gt;recv();<br>$end = getTime();<br><br>$data = json_decode($res, <span class="hljs-keyword">true</span>);<br>printf(<span class="hljs-string">"res: %s"</span> . PHP_EOL, var_export($data, <span class="hljs-keyword">true</span>));<br><span class="hljs-keyword">echo</span> $end - $begin . PHP_EOL;<br></code></pre></td></tr></table></figure><p>分别运行服务端和客户端，<code>slowlog</code>内容出现乱码。<br><img src="/images/15891279424241.jpg" alt></p><p>怎么会乱码了，太诡异了。vim 打开各种调编码没用，而且只是一部分乱码，可以猜出每行最后的是行号。<br>谷歌下好像也没有人遇到这问题，看下<code>github issues</code>发现这个功能后续版本都砍掉了，真是令人痛心。<br>编译个 PHP 5.6 的试下如果没问题，升级个小版本的 PHP 还是可以接受的，但结果依然是乱码。<br>这上古版本的扩展，可如何是好，天塌了有高个子顶着，没办法咱就的是那个高个子，下个扩展源码看看到底哪出问题了。</p><h2 id="逻辑梳理与修复"><a href="#逻辑梳理与修复" class="headerlink" title="逻辑梳理与修复"></a>逻辑梳理与修复</h2><p>结合<code>swoole slowlog</code>的文档与源码，梳理了<code>slowlog</code>执行逻辑：</p><ul><li>首先在服务端 start 的方法中增加了一个<code>MANAGER_TIMER</code>类型的 hook，通过双向链表存储。在服务端启动后 manage 进程开始事件循环，调用<code>alarm(request_slowlog_timeout)</code>，在 <code>request_slowlog_timeout</code> 秒之后向当前进程发送<code>SIGALRM</code>信号，当 manage 进程收到<code>SIGALRM</code>信号后，会设置一个<code>alarm()</code>，再回调所有<code>MANAGER_TIMER</code>类型的 hook。</li><li>在回调函数中，会遍历所有 Work/Task 进程，检查是否超时，如果超时则调用 <code>ptrace</code> 开启跟踪，同时进程进入中止状态。</li><li>现在开始<code>slowlog</code>逻辑，使用<code>ptrace</code>通过<code>current_execute_data</code>加上结构体属性的偏移量后的内存地址获取函数名、文件与行号后写入日志文件。</li><li><code>slowlog</code>记录完成再次调用<code>ptrace</code>结束跟踪，进程继续执行。</li></ul><p>当获取函数、文件时相当于从一段内存连续的读取然后拼接。而行号一次就行。这块逻辑简单，但是需要对内部结构体指针和内存非常熟悉才行，真是触及到了我的知识盲区。各种尝试修改后发现先获取下一个地址再进行后续处理就可以取到正确的字符串。</p><p><code>swoole_trace.c</code>中</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trace_get_strz</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> traced_pid, <span class="hljs-keyword">char</span> *buf, <span class="hljs-keyword">size_t</span> sz, <span class="hljs-keyword">long</span> addr)</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">long</span> l = addr;<br>    <span class="hljs-keyword">char</span> *lc = (<span class="hljs-keyword">char</span> *) &amp;l;<br><br>    <span class="hljs-comment">// 添加这个代码块，先获取下一个地址，再进行处理</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; trace_get_long(traced_pid, addr, &amp;l)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    i = l % SIZEOF_LONG;<br>    l -= i;<br>    <span class="hljs-keyword">for</span> (addr = l;; addr += SIZEOF_LONG)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; trace_get_long(traced_pid, addr, &amp;l))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (; i &lt; SIZEOF_LONG; i++)<br>        &#123;<br>            --sz;<br>            <span class="hljs-keyword">if</span> (sz &amp;&amp; lc[i])<br>            &#123;<br>                *buf++ = lc[i];<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            *buf = <span class="hljs-string">'\0'</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        i = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trace_get_long</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> traced_pid, <span class="hljs-keyword">long</span> addr, <span class="hljs-keyword">long</span> *data)</span><br></span>&#123;<br>    errno = <span class="hljs-number">0</span>;<br>    *data = ptrace(PTRACE_PEEKDATA, traced_pid, (<span class="hljs-keyword">void</span> *) addr, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (*data &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新编译后再运行测试，一切正常了。</p><p><img src="/images/15891288984203.jpg" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，乱码修复了，但可真是没少调试。明白了实现逻辑也就明白了为何后续版本这个功能被砍掉了。</p><ul><li>完全依赖 alarm 所以最小粒度是秒。</li><li>循环检测所以跨两个时间窗口的超时是无法记录的。</li><li>通过内存地址结构体偏移获取函数、文件，当数据结构变动相当于重新写。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Consul 和 Traefik 实现 Docker 容器的服务注册与发现</title>
      <link href="/2020/02/06/consul_and_traefik_micro_service/"/>
      <url>/2020/02/06/consul_and_traefik_micro_service/</url>
      
        <content type="html"><![CDATA[<p>docker 实现应用的容器化<br>consul 集群实现服务的注册、发现<br>traefik 处理外部流量的负载均衡与路由</p><h2 id="启动-consul-集群与-docker"><a href="#启动-consul-集群与-docker" class="headerlink" title="启动 consul 集群与 docker"></a>启动 consul 集群与 docker</h2><p>通过 vagrant 起三台虚拟机实现基本的 consul 集群环境（为了节约资源把 docker 也运行在这上面了）。<br>consul 的 vagrant 配置文件如下：</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># -*- mode: ruby -*-</span><br><span class="hljs-comment"># vi: set ft=ruby :</span><br><br><span class="hljs-comment"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span><br><span class="hljs-comment"># configures the configuration version (we support older styles for</span><br><span class="hljs-comment"># backwards compatibility). Please don't change it unless you know what</span><br><span class="hljs-comment"># you're doing.</span><br>Vagrant.configure("2") <span class="hljs-keyword">do</span> |config|<br><br>$script = &lt;&lt;SCRIPT<br><br>echo <span class="hljs-string">"Installing"</span><br><br>yum <span class="hljs-keyword">install</span> -y wget<br>wget -O /etc/yum.repos.d/CentOS-Base.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/Centos<span class="hljs-number">-7.</span>repo<br>wget -O /etc/yum.repos.d/epel.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/epel<span class="hljs-number">-7.</span>repo<br>yum clean <span class="hljs-keyword">all</span><br>yum makecache<br><br>yum <span class="hljs-keyword">install</span> -y jq unzip vim wget net-tools bind-utils dnsmasq<br><br>sudo cp /vagrant/consul /usr/<span class="hljs-keyword">bin</span>/consul<br><br>echo <span class="hljs-string">"Installing docker.."</span> <br>sudo yum <span class="hljs-keyword">install</span> -y yum-utils device-mapper-persistent-<span class="hljs-keyword">data</span> lvm2<br>sudo yum-config-manager <span class="hljs-comment">--add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br>sudo yum <span class="hljs-keyword">install</span> -y docker-ce docker-ce-cli containerd.io<br>sudo systemctl <span class="hljs-keyword">start</span> docker<br><br>echo <span class="hljs-string">"success"</span> <br><br>SCRIPT<br>  <span class="hljs-comment"># The most common configuration options are documented and commented below.</span><br>  <span class="hljs-comment"># For a complete reference, please see the online documentation at</span><br>  <span class="hljs-comment"># https://docs.vagrantup.com.</span><br><br>  <span class="hljs-comment"># Every Vagrant development environment requires a box. You can search for</span><br>  <span class="hljs-comment"># boxes at https://vagrantcloud.com/search.</span><br>  config.vm.box = <span class="hljs-string">"centos/7"</span><br>  config.vm.provision <span class="hljs-string">"shell"</span>, inline: $script<br><br>  config.vm.define <span class="hljs-string">"node1"</span> <span class="hljs-keyword">do</span> |node1|<br>    node1.vm.hostname = <span class="hljs-string">"node1"</span><br>    node1.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.11"</span><br><br>  <span class="hljs-keyword">end</span><br><br>  config.vm.define <span class="hljs-string">"node2"</span> <span class="hljs-keyword">do</span> |node2|<br>    node2.vm.hostname = <span class="hljs-string">"node2"</span><br>    node2.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.12"</span><br>  <span class="hljs-keyword">end</span><br><br>  config.vm.define <span class="hljs-string">"node3"</span> <span class="hljs-keyword">do</span> |node3|<br>    node3.vm.hostname = <span class="hljs-string">"node3"</span><br>    node3.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.13"</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-comment"># Disable automatic box update checking. If you disable this, then</span><br>  <span class="hljs-comment"># boxes will only be checked for updates when the user runs</span><br>  <span class="hljs-comment"># `vagrant box outdated`. This is not recommended.</span><br>  config.vm.box_check_update = <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine. In the example below,</span><br>  <span class="hljs-comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span><br>  <span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> This will enable public access to the opened port</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine and only allow access</span><br>  <span class="hljs-comment"># via 127.0.0.1 to disable public access</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span><br><br>  <span class="hljs-comment"># Create a private network, which allows host-only access to the machine</span><br>  <span class="hljs-comment"># using a specific IP.</span><br>  <span class="hljs-comment"># config.vm.network "private_network", ip: "192.168.33.10"</span><br><br>  <span class="hljs-comment"># Create a public network, which generally matched to bridged network.</span><br>  <span class="hljs-comment"># Bridged networks make the machine appear as another physical device on</span><br>  <span class="hljs-comment"># your network.</span><br>  <span class="hljs-comment"># config.vm.network "public_network"</span><br><br>  <span class="hljs-comment"># Share an additional folder to the guest VM. The first argument is</span><br>  <span class="hljs-comment"># the path on the host to the actual folder. The second argument is</span><br>  <span class="hljs-comment"># the path on the guest to mount the folder. And the optional third</span><br>  <span class="hljs-comment"># argument is a set of non-required options.</span><br>  <span class="hljs-comment"># config.vm.synced_folder "../data", "/vagrant_data"</span><br><br>  <span class="hljs-comment"># Provider-specific configuration so you can fine-tune various</span><br>  <span class="hljs-comment"># backing providers for Vagrant. These expose provider-specific options.</span><br>  <span class="hljs-comment"># Example for VirtualBox:</span><br>  <span class="hljs-comment">#</span><br>   config.vm.provider <span class="hljs-string">"virtualbox"</span> <span class="hljs-keyword">do</span> |vb|<br>  <span class="hljs-comment">#   # Display the VirtualBox GUI when booting the machine</span><br>  <span class="hljs-comment">#   vb.gui = true</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment">#   # Customize the amount of memory on the VM:</span><br>     vb.memory = <span class="hljs-string">"1024"</span><br>   <span class="hljs-keyword">end</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># View the documentation for the provider you are using for more</span><br>  <span class="hljs-comment"># information on available options.</span><br><br>  <span class="hljs-comment"># Enable provisioning with a shell script. Additional provisioners such as</span><br>  <span class="hljs-comment"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span><br>  <span class="hljs-comment"># documentation for more information about their specific syntax and use.</span><br>  <span class="hljs-comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span><br>  <span class="hljs-comment">#   apt-get update</span><br>  <span class="hljs-comment">#   apt-get install -y apache2</span><br>  <span class="hljs-comment"># SHELL</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>为了节省时间我直接下载好了 consul 的可执行文件放到了 vagrant 配置文件同目录下，vagrant 会把当前目录下的文件都复制进虚拟机的 <code>/vagrant</code> 目录下，还有三个节点的 consul 配置文件。</p><p>node1</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"primary_datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"bootstrap_expect"</span>:<span class="hljs-number">3</span>,<br>    <span class="hljs-attr">"advertise_addr"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>    <span class="hljs-attr">"bind_addr"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>    <span class="hljs-attr">"client_addr"</span>:<span class="hljs-string">"0.0.0.0"</span>,<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"node_name"</span>:<span class="hljs-string">"node1"</span>,<br>    <span class="hljs-attr">"ui"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"data_dir"</span>:<span class="hljs-string">"/opt/consul"</span>,<br>    <span class="hljs-attr">"enable_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"enable_local_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"log_file"</span>:<span class="hljs-string">"/opt/consul/"</span>,<br>    <span class="hljs-attr">"log_level"</span>:<span class="hljs-string">"info"</span>,<br>    <span class="hljs-attr">"log_rotate_duration"</span>:<span class="hljs-string">"24h"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>node2</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"primary_datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"advertise_addr"</span>: <span class="hljs-string">"172.17.17.12"</span>,<br>    <span class="hljs-attr">"bind_addr"</span>: <span class="hljs-string">"172.17.17.12"</span>,<br>    <span class="hljs-attr">"client_addr"</span>:<span class="hljs-string">"0.0.0.0"</span>,<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"node_name"</span>:<span class="hljs-string">"node2"</span>,<br>    <span class="hljs-attr">"ui"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"data_dir"</span>:<span class="hljs-string">"/opt/consul"</span>,<br>    <span class="hljs-attr">"enable_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"enable_local_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"log_file"</span>:<span class="hljs-string">"/opt/consul/"</span>,<br>    <span class="hljs-attr">"log_level"</span>:<span class="hljs-string">"info"</span>,<br>    <span class="hljs-attr">"log_rotate_duration"</span>:<span class="hljs-string">"24h"</span>,<br>    <span class="hljs-attr">"start_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ],<br>    <span class="hljs-attr">"retry_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>node3</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"primary_datacenter"</span>:<span class="hljs-string">"dc1"</span>,<br>    <span class="hljs-attr">"advertise_addr"</span>: <span class="hljs-string">"172.17.17.13"</span>,<br>    <span class="hljs-attr">"bind_addr"</span>: <span class="hljs-string">"172.17.17.13"</span>,<br>    <span class="hljs-attr">"client_addr"</span>:<span class="hljs-string">"0.0.0.0"</span>,<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"node_name"</span>:<span class="hljs-string">"node3"</span>,<br>    <span class="hljs-attr">"ui"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"data_dir"</span>:<span class="hljs-string">"/opt/consul"</span>,<br>    <span class="hljs-attr">"enable_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"enable_local_script_checks"</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">"log_file"</span>:<span class="hljs-string">"/opt/consul/"</span>,<br>    <span class="hljs-attr">"log_level"</span>:<span class="hljs-string">"info"</span>,<br>    <span class="hljs-attr">"log_rotate_duration"</span>:<span class="hljs-string">"24h"</span>,<br>    <span class="hljs-attr">"start_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ],<br>    <span class="hljs-attr">"retry_join"</span>:[<br>        <span class="hljs-string">"172.17.17.11"</span><br>    ]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>三个节点分别是</p><ul><li>node1 172.17.17.11</li><li>node2 172.17.17.12</li><li>node3 172.17.17.13</li></ul><p>运行 <code>vagrant up --provider=virtualbox</code> 把三个节点启动。</p><p>分别进入三个节点先 <code>sudo su -</code> 切换成 root 用户，然后把 consul 起来，再 exit 退出就会后台运行了。</p><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[root<span class="hljs-symbol">@node1</span> ~]<span class="hljs-meta"># consul agent -config-file /vagrant/node1.json &amp;</span><br>[root<span class="hljs-symbol">@node2</span> ~]<span class="hljs-meta"># consul agent -config-file /vagrant/node2.json &amp;</span><br>[root<span class="hljs-symbol">@node3</span> ~]<span class="hljs-meta"># consul agent -config-file /vagrant/node3.json &amp;</span><br></code></pre></td></tr></table></figure><p>在三个节点上分别通过 docker 运行 web 服务，对外端口是 32768</p><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[root<span class="hljs-symbol">@node1</span> ~]<span class="hljs-meta"># docker run -d -p 32768:80 --name test containous/whoami</span><br></code></pre></td></tr></table></figure><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>在三个节点上分别把刚才的 web 服务注册到 consul，这一步在实际项目中可以写到 docker image build 中，然后在容器启动的时候就注册到 consul。</p><figure class="hljs highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[<span class="hljs-symbol">root@</span>node1 ~]# curl --request PUT --<span class="hljs-keyword">data</span> <span class="hljs-meta">@web</span>.json http:<span class="hljs-comment">//127.0.0.1:8500/v1/agent/service/register?replace-existing-checks=true</span><br></code></pre></td></tr></table></figure><p>web.json 内容如下</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"ID"</span>: <span class="hljs-string">"web"</span>,<br>  <span class="hljs-attr">"Name"</span>: <span class="hljs-string">"consul_web"</span>,<br>  <span class="hljs-attr">"Tags"</span>: [<br>    <span class="hljs-string">"whoami"</span><br>  ],<br>  <span class="hljs-attr">"Check"</span>: &#123;<br>    <span class="hljs-attr">"Args"</span>: [<span class="hljs-string">"curl"</span>, <span class="hljs-string">"172.17.17.11:32768"</span>],<br>    <span class="hljs-attr">"Interval"</span>: <span class="hljs-string">"10s"</span>,<br>    <span class="hljs-attr">"Timeout"</span>: <span class="hljs-string">"3s"</span><br>  &#125;,<br>  <span class="hljs-attr">"Address"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>  <span class="hljs-attr">"Port"</span>: <span class="hljs-number">32768</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中增加了简单的健康检查, ip 部分每个节点修改成自己的。</p><p>现在通过访问 <code>http://172.17.17.11:8500/</code> 可以看到如下的信息</p><p><img src="/images/15809958438706.jpg" alt></p><p>随便找一个节点通过 consul 自带的 dns 查询下服务，可以看到返回了所有健康的服务节点。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">[root@node1</span> <span class="hljs-string">~]#</span> <span class="hljs-string">dig</span> <span class="hljs-string">@127.0.0.1</span> <span class="hljs-bullet">-p</span> <span class="hljs-number">8600</span> <span class="hljs-string">consul_web.service.consul</span><br><br><span class="hljs-string">;</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">DiG</span> <span class="hljs-number">9.11</span><span class="hljs-number">.4</span><span class="hljs-bullet">-P2-RedHat-9.11.4-9.P2.el7</span> <span class="hljs-string">&lt;&lt;&gt;&gt;</span> <span class="hljs-string">@127.0.0.1</span> <span class="hljs-bullet">-p</span> <span class="hljs-number">8600</span> <span class="hljs-string">consul_web.service.consul</span><br><span class="hljs-string">;</span> <span class="hljs-string">(1</span> <span class="hljs-string">server</span> <span class="hljs-string">found)</span><br><span class="hljs-string">;;</span> <span class="hljs-string">global</span> <span class="hljs-attr">options:</span> <span class="hljs-string">+cmd</span><br><span class="hljs-string">;;</span> <span class="hljs-string">Got</span> <span class="hljs-attr">answer:</span><br><span class="hljs-string">;;</span> <span class="hljs-bullet">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="hljs-attr">opcode:</span> <span class="hljs-string">QUERY,</span> <span class="hljs-attr">status:</span> <span class="hljs-string">NOERROR,</span> <span class="hljs-attr">id:</span> <span class="hljs-number">11034</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">flags:</span> <span class="hljs-string">qr</span> <span class="hljs-string">aa</span> <span class="hljs-string">rd;</span> <span class="hljs-attr">QUERY:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">ANSWER:</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-attr">AUTHORITY:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">ADDITIONAL:</span> <span class="hljs-number">4</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WARNING:</span> <span class="hljs-string">recursion</span> <span class="hljs-string">requested</span> <span class="hljs-string">but</span> <span class="hljs-string">not</span> <span class="hljs-string">available</span><br><br><span class="hljs-string">;;</span> <span class="hljs-string">OPT</span> <span class="hljs-attr">PSEUDOSECTION:</span><br><span class="hljs-string">;</span> <span class="hljs-attr">EDNS:</span> <span class="hljs-attr">version:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">flags:;</span> <span class="hljs-attr">udp:</span> <span class="hljs-number">4096</span><br><span class="hljs-string">;;</span> <span class="hljs-string">QUESTION</span> <span class="hljs-attr">SECTION:</span><br><span class="hljs-string">;consul_web.service.consul.</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><br><br><span class="hljs-string">;;</span> <span class="hljs-string">ANSWER</span> <span class="hljs-attr">SECTION:</span><br><span class="hljs-string">consul_web.service.consul.</span> <span class="hljs-number">0</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.11</span><br><span class="hljs-string">consul_web.service.consul.</span> <span class="hljs-number">0</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.13</span><br><span class="hljs-string">consul_web.service.consul.</span> <span class="hljs-number">0</span><span class="hljs-string">IN</span><span class="hljs-string">A</span><span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.12</span><br><br><span class="hljs-string">;;</span> <span class="hljs-string">ADDITIONAL</span> <span class="hljs-attr">SECTION:</span><br><span class="hljs-string">consul_web.service.consul.</span> <span class="hljs-number">0</span><span class="hljs-string">IN</span><span class="hljs-string">TXT</span><span class="hljs-string">"consul-network-segment="</span><br><span class="hljs-string">consul_web.service.consul.</span> <span class="hljs-number">0</span><span class="hljs-string">IN</span><span class="hljs-string">TXT</span><span class="hljs-string">"consul-network-segment="</span><br><span class="hljs-string">consul_web.service.consul.</span> <span class="hljs-number">0</span><span class="hljs-string">IN</span><span class="hljs-string">TXT</span><span class="hljs-string">"consul-network-segment="</span><br><br><span class="hljs-string">;;</span> <span class="hljs-string">Query</span> <span class="hljs-attr">time:</span> <span class="hljs-number">0</span> <span class="hljs-string">msec</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">SERVER:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-comment">#8600(127.0.0.1)</span><br><span class="hljs-string">;;</span> <span class="hljs-attr">WHEN:</span> <span class="hljs-string">Thu</span> <span class="hljs-string">Feb</span> <span class="hljs-number">06</span> <span class="hljs-number">13</span><span class="hljs-string">:10:12</span> <span class="hljs-string">UTC</span> <span class="hljs-number">2020</span><br><span class="hljs-string">;;</span> <span class="hljs-string">MSG</span> <span class="hljs-string">SIZE</span>  <span class="hljs-attr">rcvd:</span> <span class="hljs-number">210</span><br></code></pre></td></tr></table></figure><h2 id="服务发现-dns"><a href="#服务发现-dns" class="headerlink" title="服务发现 dns"></a>服务发现 dns</h2><p>通过 dnsmasq 将节点的 dns 修改为 consul 的，先创建配置文件 <code>/etc/dnsmasq.d/10-consul</code> 内容为</p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">server=/consul/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>#<span class="hljs-number">8600</span><br>server=<span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span><br></code></pre></td></tr></table></figure><p>然后运行 <code>systemctl start dnsmasq</code> 启动 dnsmasq，再把 <code>/etc/resolv.conf</code> dns 服务器地址改成 <code>127.0.0.1</code>。</p><p>通过 curl 访问</p><figure class="hljs highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[root@node1 ~]<span class="hljs-comment"># curl http://consul_web.service.consul:32768 -i</span><br><span class="hljs-attribute">HTTP/1.1 200 OK<br>Date</span>: Thu, 06 Feb 2020 13:19:43 GMT<br><span class="hljs-attribute">Content-Length</span>: 178<br><span class="hljs-attribute">Content-Type</span>: text/plain; charset=utf-8<br><br><span class="hljs-attribute">Hostname</span>: 2cc06cae3b6e<br><span class="hljs-attribute">IP</span>: 127.0.0.1<br><span class="hljs-attribute">IP</span>: 172.18.0.2<br><span class="hljs-attribute">RemoteAddr</span>: 172.17.17.11:54108<br><span class="hljs-attribute">GET / HTTP/1.1<br>Host</span>: consul_web.service.consul:32768<br><span class="hljs-attribute">User-Agent</span>: curl/7.29.0<br><span class="hljs-attribute">Accept</span>: */*<br></code></pre></td></tr></table></figure><p>把 docker 中 dns 配置修改为当前节点的，配置文件 <code>/etc/docker/daemon.json</code></p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"dns"</span>: [<span class="hljs-string">"172.17.17.11"</span>],<br>    <span class="hljs-attr">"dns-search"</span>: [<span class="hljs-string">"service.consul"</span>],<br>&#125;<br></code></pre></td></tr></table></figure><p>这样在 docker 容器内部就可以通过 consul 的 dns 来进行服务发现了。现在服务的注册与内部的服务发现都已经完成了。</p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p>对于外部流量的进入与路由使用 Traefik 来管理。</p><p>起一台跑 traefik 的 vagrant 配置文件如下，同样下载了 traefik 的可执行文件到当前目录。</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># -*- mode: ruby -*-</span><br><span class="hljs-comment"># vi: set ft=ruby :</span><br><br><span class="hljs-comment"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span><br><span class="hljs-comment"># configures the configuration version (we support older styles for</span><br><span class="hljs-comment"># backwards compatibility). Please don't change it unless you know what</span><br><span class="hljs-comment"># you're doing.</span><br>Vagrant.configure("2") <span class="hljs-keyword">do</span> |config|<br><br>$script = &lt;&lt;SCRIPT<br><br>yum <span class="hljs-keyword">install</span> -y wget<br>wget -O /etc/yum.repos.d/CentOS-Base.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/Centos<span class="hljs-number">-7.</span>repo<br>wget -O /etc/yum.repos.d/epel.repo <span class="hljs-keyword">http</span>://mirrors.aliyun.com/repo/epel<span class="hljs-number">-7.</span>repo<br>yum clean <span class="hljs-keyword">all</span><br>yum makecache<br><br>yum <span class="hljs-keyword">install</span> -y jq unzip vim wget net-tools bind-utils dnsmasq<br><br>sudo cp /vagrant/consul /usr/<span class="hljs-keyword">bin</span>/consul<br>sudo cp /vagrant/traefik /usr/<span class="hljs-keyword">bin</span>/traefik<br><br>echo <span class="hljs-string">"success"</span><br><br>SCRIPT<br>  <span class="hljs-comment"># The most common configuration options are documented and commented below.</span><br>  <span class="hljs-comment"># For a complete reference, please see the online documentation at</span><br>  <span class="hljs-comment"># https://docs.vagrantup.com.</span><br><br>  <span class="hljs-comment"># Every Vagrant development environment requires a box. You can search for</span><br>  <span class="hljs-comment"># boxes at https://vagrantcloud.com/search.</span><br>  config.vm.box = <span class="hljs-string">"centos/7"</span><br>  config.vm.provision <span class="hljs-string">"shell"</span>, inline: $script<br><br>  config.vm.define <span class="hljs-string">"traefik"</span> <span class="hljs-keyword">do</span> |traefik|<br>      traefik.vm.hostname = <span class="hljs-string">"traefik"</span><br>      traefik.vm.network <span class="hljs-string">"private_network"</span>, ip: <span class="hljs-string">"172.17.17.21"</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-comment"># Disable automatic box update checking. If you disable this, then</span><br>  <span class="hljs-comment"># boxes will only be checked for updates when the user runs</span><br>  <span class="hljs-comment"># `vagrant box outdated`. This is not recommended.</span><br>  config.vm.box_check_update = <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine. In the example below,</span><br>  <span class="hljs-comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span><br>  <span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> This will enable public access to the opened port</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080</span><br><br>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span><br>  <span class="hljs-comment"># within the machine from a port on the host machine and only allow access</span><br>  <span class="hljs-comment"># via 127.0.0.1 to disable public access</span><br>  <span class="hljs-comment"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span><br><br>  <span class="hljs-comment"># Create a private network, which allows host-only access to the machine</span><br>  <span class="hljs-comment"># using a specific IP.</span><br>  <span class="hljs-comment"># config.vm.network "private_network", ip: "192.168.33.10"</span><br><br>  <span class="hljs-comment"># Create a public network, which generally matched to bridged network.</span><br>  <span class="hljs-comment"># Bridged networks make the machine appear as another physical device on</span><br>  <span class="hljs-comment"># your network.</span><br>  <span class="hljs-comment"># config.vm.network "public_network"</span><br><br>  <span class="hljs-comment"># Share an additional folder to the guest VM. The first argument is</span><br>  <span class="hljs-comment"># the path on the host to the actual folder. The second argument is</span><br>  <span class="hljs-comment"># the path on the guest to mount the folder. And the optional third</span><br>  <span class="hljs-comment"># argument is a set of non-required options.</span><br>  <span class="hljs-comment"># config.vm.synced_folder "../data", "/vagrant_data"</span><br><br>  <span class="hljs-comment"># Provider-specific configuration so you can fine-tune various</span><br>  <span class="hljs-comment"># backing providers for Vagrant. These expose provider-specific options.</span><br>  <span class="hljs-comment"># Example for VirtualBox:</span><br>  <span class="hljs-comment">#</span><br>   config.vm.provider <span class="hljs-string">"virtualbox"</span> <span class="hljs-keyword">do</span> |vb|<br>  <span class="hljs-comment">#   # Display the VirtualBox GUI when booting the machine</span><br>  <span class="hljs-comment">#   vb.gui = true</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment">#   # Customize the amount of memory on the VM:</span><br>     vb.memory = <span class="hljs-string">"1024"</span><br>   <span class="hljs-keyword">end</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment"># View the documentation for the provider you are using for more</span><br>  <span class="hljs-comment"># information on available options.</span><br><br>  <span class="hljs-comment"># Enable provisioning with a shell script. Additional provisioners such as</span><br>  <span class="hljs-comment"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span><br>  <span class="hljs-comment"># documentation for more information about their specific syntax and use.</span><br>  <span class="hljs-comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span><br>  <span class="hljs-comment">#   apt-get update</span><br>  <span class="hljs-comment">#   apt-get install -y apache2</span><br>  <span class="hljs-comment"># SHELL</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>节点为</p><ul><li>traefik 172.17.17.21</li></ul><p>在 traefik 上运行一个 client 模式的 consul 的 agent，加入 consul 的集群</p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[root@traefik ~]# consul agent -data-dir /opt/consul -node=agent_traefik -bind=<span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.21</span> -join <span class="hljs-number">172.17</span><span class="hljs-number">.17</span><span class="hljs-number">.11</span> &amp;<br></code></pre></td></tr></table></figure><p>然后运行 traefik</p><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[root<span class="hljs-symbol">@traefik</span> ~]<span class="hljs-meta"># traefik --configFile=/vagrant/config/traefik.toml</span><br></code></pre></td></tr></table></figure><p>配置文件 <code>/vagrant/config/traefik.toml</code> 内容</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs toml">[global]<br>  checkNewVersion = true<br>  sendAnonymousUsage = false<br><br>[api]<br>  insecure = true<br>  debug = true<br>  dashboard = true<br><br>[log]<br>  filePath = "/vagrant/logs/traefik.log"<br>  level = "DEBUG"<br>#  format = "json"<br>[accessLog]<br>  filePath = "/vagrant/logs/access.log"<br><br>[entryPoints]<br>  [entryPoints.web]<br>    address = ":80"<br>  [entryPoints.web-secure]<br>    address = ":443"<br><br>#[certificatesResolvers.sample.acme]<br>#  email = ""<br>#  storage = "acme.json"<br>#  [certificatesResolvers.sample.acme.httpChallenge]<br>#    entryPoint = "web"<br>#  caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"<br>#  [certificatesResolvers.sample.acme.tlsChallenge]<br><br>[providers]<br>  [providers.consulCatalog]<br>    exposedByDefault = false<br>    refreshInterval = "5s"<br>  [providers.file]<br>    filename = "/vagrant/config/static.toml"<br>    watch = true<br></code></pre></td></tr></table></figure><p>配置文件 <code>/vagrant/config/static.toml</code></p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs toml"># 强制所有 http 请求转 https<br>#[http.routers.http-catchall]<br>#  rule = "hostregexp(`&#123;host:.+&#125;`)"<br>#  entrypoints = ["web"]<br>#  service = "api@internal"<br>#  middlewares = ["toHttps"]<br><br># https 路由<br>#[http.routers.my-api]<br>#  rule = "Host(`traefik.haozy.com`)"<br>#  service = "api@internal"<br>#  middlewares = ["auth"]<br>#  [http.routers.my-api.tls]<br>#    certResolver = "sample"<br>#    [[http.routers.my-api.tls.domains]]<br>#      main = "traefik.haozy.com"<br><br>#[http.middlewares.toHttps.redirectScheme]<br>#    scheme = "https"<br><br># http 路由<br>[http.routers.my-api-http]<br>  rule = "Host(`traefik.haozy.com`)"<br>  entrypoints = ["web"]<br>  service = "api@internal"<br>  middlewares = ["auth"]<br><br>[http.middlewares.auth.basicAuth]<br>  # 密码生成 echo $(htpasswd -nb haozy 123456)<br>  users = [<br>    "haozy:$$apr1$$pfkpgu.w$$jHQtt8T96PdvyojTBgh5E/",<br>  ]<br></code></pre></td></tr></table></figure><p>将域名 <code>traefik.haozy.com</code> host 指到 <code>172.17.17.21</code> ，访问 <code>traefik.haozy.com</code> 因为配了 auth 验证，输入用户名密码后就可以看到管理界面了。https 也很简单，因为本地测试先注释了对应的配置。</p><p>现在将 node1、node2、node3 节点上注册的 web 服务删除，在 web.json 中增加 traefik 相关的 tag，再重新注册。</p><p>web.json</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"ID"</span>: <span class="hljs-string">"web"</span>,<br>  <span class="hljs-attr">"Name"</span>: <span class="hljs-string">"consul_web"</span>,<br>  <span class="hljs-attr">"Tags"</span>: [<br>    <span class="hljs-string">"whoami"</span>,<br>    <span class="hljs-string">"traefik.enable=true"</span>,<br>    <span class="hljs-string">"traefik.http.routers.consul_web.rule=Host(`web.haozy.com`)"</span>,<br>    <span class="hljs-string">"traefik.http.routers.consul_web.entrypoints=web"</span>,<br>    <span class="hljs-string">"traefik.http.services.consul_web.loadbalancer.passhostheader=true"</span><br>  ],<br>  <span class="hljs-attr">"Check"</span>: &#123;<br>    <span class="hljs-attr">"Args"</span>: [<span class="hljs-string">"curl"</span>, <span class="hljs-string">"172.17.17.11:32768"</span>],<br>    <span class="hljs-attr">"Interval"</span>: <span class="hljs-string">"10s"</span>,<br>    <span class="hljs-attr">"Timeout"</span>: <span class="hljs-string">"3s"</span><br>  &#125;,<br>  <span class="hljs-attr">"Address"</span>: <span class="hljs-string">"172.17.17.11"</span>,<br>  <span class="hljs-attr">"Port"</span>: <span class="hljs-number">32768</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[<span class="hljs-symbol">root@</span>node1 ~]# curl --request PUT http:<span class="hljs-comment">//127.0.0.1:8500/v1/agent/service/deregister/web</span><br>[<span class="hljs-symbol">root@</span>node1 ~]# curl --request PUT --<span class="hljs-keyword">data</span> <span class="hljs-meta">@web</span>.json http:<span class="hljs-comment">//127.0.0.1:8500/v1/agent/service/register?replace-existing-checks=true</span><br></code></pre></td></tr></table></figure><p>现在通过 traefik 管理界面可以看到 <code>web.consul.com</code> 的路由信息，以及对应的后端服务。</p><p><img src="/images/15809977638894.jpg" alt><br><img src="/images/15809978310478.jpg" alt><br><img src="/images/15809978767331.jpg" alt></p><p>将域名 <code>web.haozy.com</code> 指向 <code>172.17.17.21</code>，请求会轮训请求所有后端服务。至此外部流量的负载均衡与路由就完成了，当然 traefik 中的 Routers 和 Middlewares 还可以实现很多复杂的处理。</p><p>再多说一点，traefik 2.0 开始分成静态配置文件和动态配置，在静态文件中配置的 Routers、Middlewares 之类的是可以在动态配置中调用的，省去了很多定义，比如调用静态配置文件中的 auth。<br><code>traefik.http.routers.consul_web.middlewares=auth@file</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Consul </tag>
            
            <tag> Traefik </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年前线上问题总结</title>
      <link href="/2020/01/30/last_bug_for_2019/"/>
      <url>/2020/01/30/last_bug_for_2019/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>在家中除了带娃、看书也无事可做。把节前值班遇到的问题总结下。</p><p>除夕那天我们公司依然正常上班，很多同事都已经提前回家了，在的人也不多，中午吃完饭没什么事就都走了。突然领导发来贺电以为什么好事，居然线上出问题了。前端同事反馈后端无响应，这个反馈也是没谁了，问了下具体调用的后端url，某个同事的 php 项目，没辙硬上吧。找运维查了下对应的机器有四台，先上 kibana 看下 nginx access 日志有大量请求404，error 日志没问题。再看 php error 日志有响应很慢的请求，应该是进来了，再看下 php 慢日志看调用栈应该是走到了一个 redis 类。这时候运维还在先让运维看下 redis 有问题没。我接着追代码，看代码发现这老哥没用框架定义的 redis 实例化类，自己整了个，真难受啊，一行行看 redis 配置从哪取的八成是这 redis 的问题。这时候运维反馈线上 redis 没问题。我接着撸代码，终于看到调的配置名了，去项目下 grep 下。这一搜发现这个配置有测试环境的，有预发环境的，还有个默认的配置，线上配置文件没有，不用说线上环境肯定用的默认的配置，默认的配的是测试环境的 redis。然而测试环境因为春节放假都关机了。</p><p>问题查清楚了，加上了线上环境的 redis 配置。</p><p>但是这个 bug 太tm智障了，全是问题。</p><h3 id="生产环境-调-测试环境"><a href="#生产环境-调-测试环境" class="headerlink" title="生产环境 调 测试环境"></a>生产环境 调 测试环境</h3><p>生产环境和测试环境要实现网络隔离，配置文件方式还是有点老，整个配置中心。</p><h3 id="自行实现-redis-类"><a href="#自行实现-redis-类" class="headerlink" title="自行实现 redis 类"></a>自行实现 redis 类</h3><p>框架已经提供了 redis 类，还要自行实现，直接影响排查效率。屏蔽了 redis 链接不上，然后给前端扔了个 404。没有规矩不成方圆要多 code review 啊。</p><h2 id="另"><a href="#另" class="headerlink" title="另"></a>另</h2><p>最近新型冠状病毒肆虐异常，各地陆续启动公共卫生事件一级响应，春节假期国家也延长到了正月初十。北京这边有的村不让从外回京的人进村，要外隔离，也是没谁了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 与 PHP 的 json 序列化问题</title>
      <link href="/2019/12/23/golang_and_php_json/"/>
      <url>/2019/12/23/golang_and_php_json/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>最近在做 Golang 与 PHP 的 RPC 实现。因 PHP 业务端已上线稳定，Golang 方面则需要完全兼容。其中使用了 json 序列化，发现区别还是很大的，见下面代码。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php -a<br>php &gt; <span class="hljs-built_in">echo</span> json_encode(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>);<br><span class="hljs-string">"&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := <span class="hljs-string">"&lt;test我爱中国&gt;"</span><br>res, err := json.Marshal(st)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, <span class="hljs-keyword">string</span>(res)) <span class="hljs-comment">//  json is: "\u003ctest我爱中国\u003e"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>PHP 默认的 <code>json_encode()</code> 函数会把多字节字符转成 <code>\uXXXX</code> 当然通过设置 <code>JSON_UNESCAPED_UNICODE</code> 可以解决这个问题。这里不动 PHP 代码。<br>Golang 这里用 json 包的 Marshal 方法实现序列化，对多字节字符是不进行处理的。但是这个方法出于安全考虑会将”&lt;”, “&gt;”, “&amp;”这三个字符转成 <code>\uXXXX</code> 形式。这还不是最魔幻的，这个方法没有可选参数进行设置。</p><h1 id="取消转义特殊字符"><a href="#取消转义特殊字符" class="headerlink" title="取消转义特殊字符"></a>取消转义特殊字符</h1><p>看官网包说明通过 <code>json.NewEncoder()</code> 可以关闭转义。</p><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := <span class="hljs-string">"&lt;test我爱中国&gt;"</span><br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, jsonBuf.String()) <span class="hljs-comment">// json is: "&lt;test我爱中国&gt;"</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义序列化方法"><a href="#自定义序列化方法" class="headerlink" title="自定义序列化方法"></a>自定义序列化方法</h1><p>对多字节字符转义，只能通过自定义序列化方法，官网也有包说明非常人性化。</p><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"strconv"</span><br>)<br><br><span class="hljs-keyword">type</span> cusString <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs cusString)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">byte</span>(strconv.QuoteToASCII(<span class="hljs-keyword">string</span>(cs))), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := cusString(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>)<br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, jsonBuf.String()) <span class="hljs-comment">// json is: "&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样 json 序列化后的结果就和 PHP 下的一样了。分别计算下 MD5 。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ php -a<br>Interactive shell<br><br>php &gt; <span class="hljs-built_in">echo</span> json_encode(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>);<br><span class="hljs-string">"&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br>php &gt; <span class="hljs-built_in">echo</span> md5(json_encode(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>));<br>5ec1bfc0a2db38f985cdae47b2012ca5<br>php &gt;<br>php &gt;<br></code></pre></td></tr></table></figure><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"strconv"</span><br><span class="hljs-string">"crypto/md5"</span><br>)<br><br><span class="hljs-keyword">type</span> cusString <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs cusString)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">byte</span>(strconv.QuoteToASCII(<span class="hljs-keyword">string</span>(cs))), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := cusString(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>)<br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"json is: %s"</span>, jsonBuf.String()) <span class="hljs-comment">// json is: "&lt;test\u6211\u7231\u4e2d\u56fd&gt;"</span><br>fmt.Printf(<span class="hljs-string">"md5 is: %x"</span>, md5.Sum(jsonBuf.Bytes())) <span class="hljs-comment">// md5 is: 5543e9185c4bde6311dc9c7605ca92b8</span><br>&#125;<br></code></pre></td></tr></table></figure><p>MD5 值不一样，这就很魔幻了。开始大胆假设，小心求证。</p><h1 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h1><p>MD5 算法有问题，太扯了这是不可能的，试了别的 hash 算法也是一样。<br>json 序列化有问题，转 string 后确实没看出问题，直接输出 bytes 格式。发现是这样的。</p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-number">34</span> <span class="hljs-number">60</span> <span class="hljs-number">116</span> <span class="hljs-number">101</span> <span class="hljs-number">115</span> <span class="hljs-number">116</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">54</span> <span class="hljs-number">50</span> <span class="hljs-number">49</span> <span class="hljs-number">49</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">55</span> <span class="hljs-number">50</span> <span class="hljs-number">51</span> <span class="hljs-number">49</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">52</span> <span class="hljs-number">101</span> <span class="hljs-number">50</span> <span class="hljs-number">100</span> <span class="hljs-number">92</span> <span class="hljs-number">117</span> <span class="hljs-number">53</span> <span class="hljs-number">54</span> <span class="hljs-number">102</span> <span class="hljs-number">100</span> <span class="hljs-number">62</span> <span class="hljs-number">34</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>最后面是个10，10在 Ascii 表里是 LR new line 换行符。看来这个 json 序列化果然有问题啊，看看序列化源码怎么写的：</p><p>源码在这里 <a href="https://sourcegraph.com/github.com/golang/go@go1.13/-/blob/src/encoding/json/stream.go?utm_source=share#L213" target="_blank" rel="noopener">json stream</a></p><p>至于为什么会添加一个换行符，注释是这么说的:</p><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Terminate <span class="hljs-keyword">each</span> <span class="hljs-built_in">value</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> newline.<br>This makes <span class="hljs-keyword">the</span> output look <span class="hljs-keyword">a</span> little nicer<br>when debugging, <span class="hljs-keyword">and</span> some kind <span class="hljs-keyword">of</span> <span class="hljs-literal">space</span><br>is required <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> encoded <span class="hljs-built_in">value</span> was <span class="hljs-keyword">a</span> <span class="hljs-built_in">number</span>,<br>so that <span class="hljs-keyword">the</span> reader knows there aren<span class="hljs-string">'t more</span><br></code></pre></td></tr></table></figure><p>说白了 <code>json.NewEncoder()</code> 处理的是流式数据，多个数据间为了分隔加了 <code>\n</code>。</p><p>最终代码如下，<a href="https://play.golang.org/p/XUrUiLBsoAQ" target="_blank" rel="noopener">Go Playground</a>。</p><p>如果你看到这里说明你可能遇到了相似的问题，如果没有解决你的问题，从文档或源码中找找答案吧。</p><figure class="hljs highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"encoding/json"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"strconv"</span><br><span class="hljs-string">"crypto/md5"</span><br>)<br><br><span class="hljs-keyword">type</span> cusString <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs cusString)</span> <span class="hljs-title">MarshalJSON</span><span class="hljs-params">()</span> <span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span> &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">byte</span>(strconv.QuoteToASCII(<span class="hljs-keyword">string</span>(cs))), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>st := cusString(<span class="hljs-string">"&lt;test我爱中国&gt;"</span>)<br>jsonBuf := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>jsonEncode := json.NewEncoder(jsonBuf)<br>jsonEncode.SetEscapeHTML(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err := jsonEncode.Encode(st); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">"json err:"</span>, err.Error())<br>&#125;<br><br>jsonBytes := jsonBuf.Bytes()<br>resultJson := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> jsonBytes[<span class="hljs-built_in">len</span>(jsonBytes)<span class="hljs-number">-1</span>] == <span class="hljs-string">'\n'</span> &#123;<br>resultJson = jsonBytes[:<span class="hljs-built_in">len</span>(jsonBytes)<span class="hljs-number">-1</span>]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>resultJson = jsonBytes<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">"json is: %s \r\n"</span>, <span class="hljs-keyword">string</span>(resultJson)) <span class="hljs-comment">// json is: "&lt;test\u6211\u7231\u4e2d\u56fd&gt;" </span><br>fmt.Printf(<span class="hljs-string">"md5 is: %x \r\n"</span>, md5.Sum(resultJson)) <span class="hljs-comment">// md5 is: 5ec1bfc0a2db38f985cdae47b2012ca5 </span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Go </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 生成 O&#39;Reilly 在线学习平台的电子书</title>
      <link href="/2019/10/31/golang_generate_oreilly_kindle_book/"/>
      <url>/2019/10/31/golang_generate_oreilly_kindle_book/</url>
      
        <content type="html"><![CDATA[<p>O’Reilly 是有名的动物书出版公司，当然他们也不仅仅出电子书还有很多别的业务。<a href="https://learning.oreilly.com/home/" target="_blank" rel="noopener">O’Reilly 在线学习平台</a>上有他们所有出版过的图书都是原版的，但是仅提供在线阅读，虽然也有 App，但是想在 kindle 上看提高阅读体验。</p><p>于是抽时间练习练习 Golang 写了个程序，生成 mobi 格式的电子书。Github 地址 <a href="https://github.com/zyh94946/oreilly_kindle_book" target="_blank" rel="noopener">oreilly_kindle_book</a> 。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul><li>目前仅支持 macOS、linux, windows 改改应该也可以，但是我手头没有 windows 测不了，或者编个 Docker image 也 ok。</li><li>需要 O’Reilly 在线学习平台的账号，这是必须的。</li><li>安装 <a href="https://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000765211" target="_blank" rel="noopener">kindlegen</a>，mobi 的生成就靠它。</li></ul><h2 id="oreilly-kindle-book-编译"><a href="#oreilly-kindle-book-编译" class="headerlink" title="oreilly_kindle_book 编译"></a>oreilly_kindle_book 编译</h2><p>基于 golang 1.13 开发，目前没有上传二进制包，自行编译吧。</p><p>推荐 clone 之后直接 <code>make &amp;&amp; make install</code>。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/zyh94946/oreilly_kindle_book.git<br>$ <span class="hljs-built_in">cd</span> oreilly_kindle_book<br>$ make &amp;&amp; make install<br>Building oreilly_kindle_book...<br>Building success...<br>Installing oreilly_kindle_book...<br>Install success to /usr/<span class="hljs-built_in">local</span>/bin/oreilly_kindle_book.<br>Usage of oreilly_kindle_book:<br>  -email string<br>    you login email of https://www.oreilly.com/member/<br>  -<span class="hljs-built_in">help</span><br>    <span class="hljs-built_in">help</span><br>  -n string<br>    the num of https://learning.oreilly.com/library/view/BOOK-NAME/***<br>  -p string<br>    you login password of https://www.oreilly.com/member/<br>  -version<br>    <span class="hljs-built_in">print</span> version and <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>当然 <code>go get</code> 也可以</p><figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ <span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/zyh94946/oreilly_kindle_book<br>$ <span class="hljs-keyword">go</span> install github.<span class="hljs-keyword">com</span>/zyh94946/oreilly_kindle_book<br></code></pre></td></tr></table></figure><h2 id="oreilly-kindle-book-使用"><a href="#oreilly-kindle-book-使用" class="headerlink" title="oreilly_kindle_book 使用"></a>oreilly_kindle_book 使用</h2><p>非常简单</p><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ <span class="hljs-keyword">oreilly_kindle_book </span>-n <span class="hljs-keyword">BOOK_NUM </span>-email YOU_EMAIL -p YOU_PASSWORD<br></code></pre></td></tr></table></figure><p>完成后 mobi 会生成在当前目录下。</p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><p>咱要 kindle 用，首先研究下 mobi 的生成。有两个特定格式的文件，一个 ncx (组织目录)，一个 opf (组织所有文件)，按格式来就能生成。开始梳理需要的资源看看可行性。完事准备写程序都爬下来，生成所需的格式，用 kindlegen 测试生成 mobi，大问题没有小问题不少，挨个解决。最后发现实现登录也不难索性加上了。编写过程中看了很多 go 原生包也使用了不少。</p><p>golang 需要注意的点不完全总结：</p><ul><li><code>go func(){}()</code> 实际执行的时间与其所属语句执行时间是不一样的。</li><li>通过 <code>chan</code> 控制并发。</li><li>大量字符串拼接不要用 <code>+</code> 时间与空间上都复杂。可用使用 <code>strings.Builder{}</code> 字节切片的概念。</li><li><code>os.Exit()</code> 结束程序后，<code>defer</code> 不会执行。</li><li>有问题多看看官方文档比什么都强 :)。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Kindle </tag>
            
            <tag> mobi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器服务化方向的一些探索</title>
      <link href="/2019/08/28/docker_traefik_micro_service/"/>
      <url>/2019/08/28/docker_traefik_micro_service/</url>
      
        <content type="html"><![CDATA[<p>本文参考<a href="https://ronggle.com/2018/cloud-labs/" target="_blank" rel="noopener">使用Docker打造自己的云平台</a>编写</p><p>本文基于 Docker Swarm Mode 实现容器化，虽然目前 k8s 更火一些，但实在是太重了，以后再折腾。<br>使用 traefik 来实现反向代理、负载均衡，traefik 还自带了服务发现、后端断路器、健康检查等，相当于是自带服务发现的 nginx。当然它还支持其他的容器编排工具如，服务发现工具如 Consul。<br>使用 Portainer 来管理 Docker 容器，可以兼容 Docker Swarm 模式。</p><p>Docker 的安装就不说了。装完初始化 Swarm 模式。</p><figure class="hljs highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>docker swarm init<br></code></pre></td></tr></table></figure><p>先设置一下环境变量。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DOCKER_DEV_PATH</span>=/usr/local/src/docker-dev<br></code></pre></td></tr></table></figure><p>日志文件都会统一存到 ${DOCKER_DEV_PATH}/logs。</p><h2 id="traefik"><a href="#traefik" class="headerlink" title="traefik"></a>traefik</h2><p>新建一个编排文件 traefik.yml。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined">version: <span class="hljs-string">'3.3'</span><br>services:<br>  reverse-proxy:<br>    image: traefik:<span class="hljs-number">1.7</span>-alpine<br>    command: --web --docker --docker.domain=cloud-labs<span class="hljs-selector-class">.io</span> --docker<span class="hljs-selector-class">.watch</span> --docker.swarmmode=true --loglevel=INFO --accesslog --accesslog.filepath=/logs/access<span class="hljs-selector-class">.log</span> --traefiklog --traefiklog.filepath=/logs/traefik<span class="hljs-selector-class">.log</span><br>    deploy:<br>      mode: replicated<br>      replicas: <span class="hljs-number">1</span><br>      labels:<br>        - traefik.enable=true<br>        - traefik.backend=traefik<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:monitor<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik.port=<span class="hljs-number">8080</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>    networks:<br>      - proxy<br>    ports:<br>      - <span class="hljs-number">8081</span>:<span class="hljs-number">80</span><br>    volumes:<br>      - /var/run/docker<span class="hljs-selector-class">.sock</span>:/var/run/docker<span class="hljs-selector-class">.sock</span><br>      - $&#123;DOCKER_DEV_PATH&#125;/logs/traefik:/logs<br>      - /dev/null:/traefik<span class="hljs-selector-class">.toml</span><br>networks:<br>  proxy:<br></code></pre></td></tr></table></figure><p>简单解释下 labels 中配置的含义</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">traefik<span class="hljs-selector-class">.backend</span> 后端<br>traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span> 前端规则，满足此规则转发给后端<br>traefik<span class="hljs-selector-class">.port</span> 后端端口 <span class="hljs-number">8080</span> 是 traefik web 后台端口<br>traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span> 指定网络<br></code></pre></td></tr></table></figure><p>更多可用 labels 可用看该<a href="https://docs.traefik.io/configuration/backends/docker/#on-containers" target="_blank" rel="noopener">Traefik 文档</a></p><p>因为在腾讯云上做的测试没有域名备案，映射了8081端口到80。</p><p>部署traefik</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker stack deploy -c traefik<span class="hljs-selector-class">.yml</span> traefik<br></code></pre></td></tr></table></figure><p>完成后访问 monitor.cloud-labs.io:8081 就可以进入 traefik 的后台界面了（当然这个域名是要绑host的）。</p><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><p>Portainer是一个轻量级的Docker环境管理UI。</p><p>新建一个编排文件 portainer.yml。</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">version:</span> <span class="hljs-string">'3.3'</span><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  server:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">portainer/portainer</span><br><span class="hljs-attr">    command:</span> <span class="hljs-bullet">-H</span> <span class="hljs-attr">unix:///var/run/docker.sock</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">traefik_proxy</span><br><span class="hljs-attr">    deploy:</span><br><span class="hljs-attr">      labels:</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.enable=true</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.backend=portainer</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.frontend.rule=Host:console.cloud-labs.io</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.docker.network=traefik_proxy</span><br><span class="hljs-bullet">        -</span> <span class="hljs-string">traefik.port=9000</span><br><span class="hljs-attr">    volumes:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br><span class="hljs-attr">      - portainer:</span><span class="hljs-string">/data</span><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  traefik_proxy:</span><br><span class="hljs-attr">    external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br><span class="hljs-attr">  portainer:</span><br></code></pre></td></tr></table></figure><p>部署</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker stack deploy -c portainer<span class="hljs-selector-class">.yml</span> portainer<br></code></pre></td></tr></table></figure><p>访问 console.cloud-labs.io:8081 就可以管理 Docker 了。</p><h2 id="部署一个PHP服务"><a href="#部署一个PHP服务" class="headerlink" title="部署一个PHP服务"></a>部署一个PHP服务</h2><p>php服务部署其实还是有些麻烦的。一般前端起nginx将php请求转发到php-fpm，这个时候用的是FastCGI协议。但是目前traefik不支持FastCGI协议，估计以后也不会支持，所以php和nginx要一块部署。如下配置文件。<br>新建一个编排文件 nginx_php_web.yml，其中包含nginx和php。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs undefined">version: <span class="hljs-string">'3.3'</span><br>services:<br>  nginx:<br>   image: nginx:latest<br>   volumes:<br>     - $&#123;DOCKER_DEV_PATH&#125;/logs/nginx:/data/logs/nginx<br>     - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/<span class="hljs-selector-tag">code</span><br>     - ./site<span class="hljs-selector-class">.conf</span>:/etc/nginx/conf.d/default<span class="hljs-selector-class">.conf</span><br>   depends_on:<br>     - php<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">2</span><br>     labels:<br>        - traefik.backend=nginx<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.passHostHeader</span>=true<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>        - traefik.port=<span class="hljs-number">80</span><br>  php:<br>   image: php:<span class="hljs-number">5.5</span>.<span class="hljs-number">38</span>-fpm<br>   volumes:<br>    - ./php<span class="hljs-selector-class">.ini</span>:/usr/local/etc/php/php<span class="hljs-selector-class">.ini</span><br>    - ./php-fpm<span class="hljs-selector-class">.conf</span>:/usr/local/etc/php-fpm<span class="hljs-selector-class">.conf</span><br>    - ./www<span class="hljs-selector-class">.conf</span>:/usr/local/etc/php-fpm.d/www<span class="hljs-selector-class">.conf</span><br>    - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/<span class="hljs-selector-tag">code</span><br>    - $&#123;DOCKER_DEV_PATH&#125;/logs/php:/data/logs/php<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">3</span><br>     labels:<br>        - traefik.enable=false<br>networks:<br>  traefik_proxy:<br>    external: true<br></code></pre></td></tr></table></figure><p>部署</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker stack deploy -c nginx_php_web<span class="hljs-selector-class">.yml</span> nginx_php_web<br></code></pre></td></tr></table></figure><p>访问 domain.cloud-labs.io:8081 可以看到服务已经起来了。<br>但是这种方式会有问题</p><ul><li>因为请求是从traefik直接到nginx，做健康检查的话只能在nginx上写规则，这样会有问题。除非将nginx和php构建到一个镜像中，但是这又违反了docker的初衷。</li><li>经过traefik-&gt;nginx-&gt;php 性能也会应该有所损耗。</li></ul><p>另一种方式通过php的swoole扩展起一个http服务，直接将请求转发过去。</p><p>建一个Dockerfile，build一个带swoole的php镜像。这里用了最新的php版本。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">FROM</span> php:7.3.8-cli<br><span class="hljs-builtin-name">RUN</span> pecl channel-update pecl.php.net<br><span class="hljs-comment"># 从pecl安装扩展</span><br><span class="hljs-builtin-name">RUN</span> pecl install swoole-4.4.0 \<br>    &amp;&amp; docker-php-ext-<span class="hljs-builtin-name">enable</span> swoole<br></code></pre></td></tr></table></figure><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker build -t php7<span class="hljs-number">.3</span><span class="hljs-number">.8</span>_swoole4<span class="hljs-number">.4</span><span class="hljs-number">.0</span> . &gt; build.log &amp;<br></code></pre></td></tr></table></figure><p>很简单没有遇见任何问题。</p><p>再建一个编排文件 php_web.yml。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined">version: <span class="hljs-string">'3.3'</span><br>services:<br>  swoole_http:<br>   image: php7.<span class="hljs-number">3.8</span>_swoole4.<span class="hljs-number">4.0</span>:latest<br>   command: php /code/httpServ<span class="hljs-selector-class">.php</span> <span class="hljs-number">8888</span><br>   volumes:<br>    - $&#123;DOCKER_DEV_PATH&#125;/test_code/php:/<span class="hljs-selector-tag">code</span><br>    - $&#123;DOCKER_DEV_PATH&#125;/logs/swoole:/data/logs/swoole<br>   networks:<br>     - traefik_proxy<br>   deploy:<br>     mode: replicated<br>     replicas: <span class="hljs-number">2</span><br>     labels:<br>        - traefik.backend=swoole_http<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.passHostHeader</span>=true<br>        - traefik<span class="hljs-selector-class">.frontend</span><span class="hljs-selector-class">.rule</span>=Host:domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.network</span>=traefik_proxy<br>        - traefik.port=<span class="hljs-number">8888</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.hostname</span>=domain<span class="hljs-selector-class">.cloud-labs</span><span class="hljs-selector-class">.io</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.port</span>=<span class="hljs-number">8888</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.path</span>=/healthcheck<span class="hljs-selector-class">.php</span><br>        - traefik<span class="hljs-selector-class">.backend</span><span class="hljs-selector-class">.healthcheck</span><span class="hljs-selector-class">.interval</span>=<span class="hljs-number">5s</span><br>networks:<br>  traefik_proxy:<br>    external: true<br></code></pre></td></tr></table></figure><p>其中做了健康检查每五秒一次。httpServ.php的内容整理完发到github上了，文末有说明。<br>部署起来。</p><figure class="hljs highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ docker <span class="hljs-keyword">stack</span> <span class="hljs-keyword">rm</span> nginx_php_web<br>$ docker <span class="hljs-keyword">stack</span> deploy -c php_web.yml php_web<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>traefik 界面<br><img src="/images/15669802286595.jpg" alt></p><p>Portainer 界面<br><img src="/images/15669806334566.jpg" alt></p><p>跑是跑起来了，但还有些问题。</p><ul><li>docker swarm目前只是单节点</li><li>容器日志、监控处理的不太好</li><li>压力测试也没有做</li><li>没有关联CI/CD</li></ul><p>坑挖的有点多慢慢填吧。。</p><p>文中所有配置文件都整理完发到github上了，地址 <a href="https://github.com/zyh94946/docker-dev" target="_blank" rel="noopener">https://github.com/zyh94946/docker-dev</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP7 数组排序函数源码解析</title>
      <link href="/2019/05/22/php7_function_sort/"/>
      <url>/2019/05/22/php7_function_sort/</url>
      
        <content type="html"><![CDATA[<p>今天来看看经常使用的数组排序函数如 <code>sort, rsort, asort, arsort, ksort, krsort</code> 。话不多说直接找 <code>sort</code> 函数吧。</p><p>在 <code>php7.3</code> 源码中搜索 <code>PHP_FUNCTION(sort)</code> 可以搜到如下</p><p><img src="/images/15584996147536.jpg" alt></p><p>其中 <code>.h</code> 文件是C语言的头文件，直接打开 <code>.c</code> 文件。<br><code>sort</code> 函数如下，其中我加了一点注释。</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined">PHP_FUNCTION(sort)<br>&#123;<br>zval *<span class="hljs-built_in">array</span>;<br>zend_long sort_type = PHP_SORT_REGULAR; <span class="hljs-comment">// 默认的排序规则</span><br><span class="hljs-keyword">compare_func_t</span> cmp;<br><br><span class="hljs-comment">// 这里开始接请求参数</span><br>ZEND_PARSE_PARAMETERS_START(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>Z_PARAM_ARRAY_EX(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-function">Z_PARAM_OPTIONAL<br><span class="hljs-title">Z_PARAM_LONG</span><span class="hljs-params">(sort_type)</span><br><span class="hljs-title">ZEND_PARSE_PARAMETERS_END_EX</span><span class="hljs-params">(RETURN_FALSE)</span></span>;<br><br><span class="hljs-comment">// 根据排序规则获取使用的排序函数</span><br>cmp = php_get_data_compare_func(sort_type, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 进行排序</span><br><span class="hljs-keyword">if</span> (zend_hash_sort(Z_ARRVAL_P(<span class="hljs-built_in">array</span>), cmp, <span class="hljs-number">1</span>) == FAILURE) &#123;<br>RETURN_FALSE;<br>&#125;<br>RETURN_TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>不但 <code>rsort, asort, arsort, ksort, krsort</code> 这些函数在 <code>array.c</code> 文件中，<a href="https://www.php.net/manual/zh/book.array.php" target="_blank" rel="noopener">PHP数组</a>相关的也都在其中。<br>先说下 <code>rsort, asort, arsort, ksort, krsort</code> 函数内容与 <code>sort</code> 只有细微的差别。<br><code>ksort、krsort</code> 是根据键排序所以排序规则获取排序函数用的是 <code>php_get_key_compare_func</code> 参数与 <code>php_get_data_compare_func</code> 是一样的。<br><code>php_get_data_compare_func、php_get_key_compare_func</code> 函数第二个参数意思是是否降序排列，<code>rsort、arsort、krsort</code> 第二个参数都是1。<br>进行排序时 <code>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</code> 第三个参数意思是是否重新排列索引， <code>sort、rsort</code> 传的都是1。<br>做个表格看下</p><table><thead><tr><th></th><th>获取排序函数</th><th>调用排序</th></tr></thead><tbody><tr><td>sort</td><td>php_get_data_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</td></tr><tr><td>rsort</td><td>php_get_data_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 1)</td></tr><tr><td>asort</td><td>php_get_data_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>arsort</td><td>php_get_data_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>ksort</td><td>php_get_key_compare_func(sort_type, 0)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr><tr><td>krsort</td><td>php_get_key_compare_func(sort_type, 1)</td><td>zend_hash_sort(Z_ARRVAL_P(array), cmp, 0)</td></tr></tbody></table><p>其中调用 <code>php_get_data_compare_func</code> 与 <code>php_get_key_compare_func</code> 获取的 <code>cmp</code> 后面再说明。</p><p>继续找 <code>zend_hash_sort</code> ，在 <code>zend_hash.h</code> 中。</p><figure class="hljs highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-id">#define</span> <span class="hljs-selector-tag">zend_hash_sort</span>(ht, compare_func, renumber) \<br><span class="hljs-selector-tag">zend_hash_sort_ex</span>(ht, zend_sort, compare_func, renumber)<br></code></pre></td></tr></table></figure><p>看来 <code>zend_hash_sort</code> 中调用了 <code>zend_hash_sort_ex</code> 。 <code>zend_hash_sort_ex</code> 在 <code>zend_hash.c</code> 中。</p><figure class="hljs highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ZEND_API int ZEND_FASTCALL zend_hash_sort_ex(HashTable *ht, sort_func_t sort, compare_func_t compar, zend_bool renumber)<br>&#123;<br>Bucket *p;<br>uint32_t i, j;<br><br>IS_CONSISTENT(ht);<br>HT_ASSERT_RC1(ht);<br><br><span class="hljs-function"><span class="hljs-title">if</span> (!(ht-&gt;</span><span class="hljs-function"><span class="hljs-title">nNumOfElements</span>&gt;1) &amp;&amp; !(renumber &amp;&amp; ht-&gt;</span>nNumOfElements&gt;<span class="hljs-number">0</span>)) &#123; <span class="hljs-comment">/* Doesn't require sorting */</span><br>return SUCCESS;<br>&#125;<br><br><span class="hljs-comment">// 这里获取数组元素数，判断hash table是否没有洞，"洞"意思是数组里面元素被unset过，被unset过的val type是IS_UNDEF，不能通过nNumUsed直接获取数组的元素数。</span><br><span class="hljs-keyword">if</span> (HT_IS_WITHOUT_HOLES(ht)) &#123;<br><span class="hljs-function"><span class="hljs-title">i</span> = ht-&gt;</span>nNumUsed;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-function"><span class="hljs-title">for</span> (j = 0, i = 0; j &lt; ht-&gt;</span>nNumUsed; j++) &#123;<br><span class="hljs-function"><span class="hljs-title">p</span> = ht-&gt;</span>arData + j;<br><span class="hljs-function"><span class="hljs-title">if</span> (UNEXPECTED(Z_TYPE(p-&gt;</span>val) == IS_UNDEF)) continue;<br><span class="hljs-keyword">if</span> (i != j) &#123;<br><span class="hljs-function"><span class="hljs-title">ht</span>-&gt;</span>arData[i] = *p;<br>&#125;<br>i++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 这个sort是由上面直接传进来的zend_sort，终于到最重要的排序了</span><br><span class="hljs-function"><span class="hljs-title">sort</span>((void *)ht-&gt;</span>arData, i, sizeof(Bucket), compar,<br>(swap_func_t)(renumber? zend_hash_bucket_renum_swap :<br>((HT_FLAGS(ht) &amp; HASH_FLAG_PACKED) ? zend_hash_bucket_packed_swap : zend_hash_bucket_swap)));<br><br><span class="hljs-comment">// 后面是根据renumber判断是否需要重排索引内存回收等操作先省略了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>zend_sort.c</code> 中找到 <code>zend_sort</code> ，通过备注发现这个排序是源于 <code>LLVM</code> 的 <code>libc++</code> 中的 <code>std::sort</code> 实现的。算是快排的优化版，当元素数小于等于16时有特殊的优化，当元素数小于等于5时直接通过 <code>if else</code> 嵌套判断排序，真是优化的极致。<code>zend_sort_2</code> 、 <code>zend_sort_3</code> 、 <code>zend_sort_4</code> 、 <code>zend_sort_5</code> 中是 <code>if else</code> 嵌套的判断排序就不贴出来了。其中基准点(pivot)计算方式也进行了优化。相比 <code>PHP5</code> 时代的标配快排实现要稳定多了。</p><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ZEND_API void zend_sort(<span class="hljs-name">void</span> *base, size_t nmemb, size_t siz, compare_func_t cmp, swap_func_t swp)<br>&#123;<br>while (1) &#123;<br>if (nmemb &lt;= 16) &#123;<br>zend_insert_sort(base, nmemb, siz, cmp, swp);<br>return;<br>&#125; else &#123;<br>char *i, *j;<br>char *start = (<span class="hljs-name">char</span> *)base;<br>char *end = start + (<span class="hljs-name">nmemb</span> * siz);<br>size_t offset = (nmemb &gt;&gt; Z_L(1));<br>char *pivot = start + (<span class="hljs-name">offset</span> * siz);<br><br>if ((nmemb &gt;&gt; Z_L(10))) &#123;<br>size_t delta = (offset &gt;&gt; Z_L(1)) * siz<span class="hljs-comment">;</span><br>zend_sort_5(<span class="hljs-name">start</span>, start + delta, pivot, pivot + delta, end - siz, cmp, swp)<span class="hljs-comment">;</span><br>&#125; else &#123;<br>zend_sort_3(<span class="hljs-name">start</span>, pivot, end - siz, cmp, swp)<span class="hljs-comment">;</span><br>&#125;<br>swp(<span class="hljs-name">start</span> + siz, pivot)<span class="hljs-comment">;</span><br>pivot = start + siz<span class="hljs-comment">;</span><br>i = pivot + siz<span class="hljs-comment">;</span><br>j = end - siz<span class="hljs-comment">;</span><br>while (<span class="hljs-number">1</span>) &#123;<br>while (<span class="hljs-name">cmp</span>(<span class="hljs-name">pivot</span>, i) &gt; <span class="hljs-number">0</span>) &#123;<br>i += siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">i</span> == j)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">j</span> == i)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>while (<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, pivot) &gt; <span class="hljs-number">0</span>) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">j</span> == i)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>swp(<span class="hljs-name">i</span>, j)<span class="hljs-comment">;</span><br>i += siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">UNEXPECTED</span>(<span class="hljs-name">i</span> == j)) &#123;<br>goto done<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>done:<br>swp(<span class="hljs-name">pivot</span>, i - siz)<span class="hljs-comment">;</span><br>if ((<span class="hljs-name">i</span> - siz) - start &lt; end - i) &#123;<br>zend_sort(<span class="hljs-name">start</span>, (<span class="hljs-name">i</span> - start)/siz - <span class="hljs-number">1</span>, siz, cmp, swp)<span class="hljs-comment">;</span><br>base = i<span class="hljs-comment">;</span><br>nmemb = (<span class="hljs-name">end</span> - i)/siz<span class="hljs-comment">;</span><br>&#125; else &#123;<br>zend_sort(<span class="hljs-name">i</span>, (<span class="hljs-name">end</span> - i)/siz, siz, cmp, swp)<span class="hljs-comment">;</span><br>nmemb = (<span class="hljs-name">i</span> - start)/siz - <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>ZEND_API void zend_insert_sort(<span class="hljs-name">void</span> *base, size_t nmemb, size_t siz, compare_func_t cmp, swap_func_t swp) &#123;<br>switch (nmemb) &#123;<br>case 0:<br>case 1:<br>break;<br>case 2:<br>zend_sort_2(base, (char *)base + siz, cmp, swp)<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>case <span class="hljs-number">3</span>:<br>zend_sort_3(<span class="hljs-name">base</span>, (<span class="hljs-name">char</span> *)base + siz, (char *)base + siz + siz, cmp, swp)<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>case <span class="hljs-number">4</span>:<br>&#123;<br>size_t siz2 = siz + siz<span class="hljs-comment">;</span><br>zend_sort_4(<span class="hljs-name">base</span>, (<span class="hljs-name">char</span> *)base + siz, (char *)base + siz2, (<span class="hljs-name">char</span> *)base + siz + siz2, cmp, swp);<br>&#125;<br>break;<br>case 5:<br>&#123;<br>size_t siz2 = siz + siz;<br>zend_sort_5(base, (char *)base + siz, (<span class="hljs-name">char</span> *)base + siz2, (char *)base + siz + siz2, (<span class="hljs-name">char</span> *)base + siz2 + siz2, cmp, swp);<br>&#125;<br>break;<br>default:<br>&#123;<br>char *i, *j, *k<span class="hljs-comment">;</span><br>char *start = (char *)base<span class="hljs-comment">;</span><br>char *end = start + (nmemb * siz)<span class="hljs-comment">;</span><br>size_t siz2= siz + siz<span class="hljs-comment">;</span><br>char *sentry = start + (6 * siz)<span class="hljs-comment">;</span><br>for (<span class="hljs-name">i</span> = start + siz<span class="hljs-comment">; i &lt; sentry; i += siz) &#123;</span><br>j = i - siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>continue<span class="hljs-comment">;</span><br>&#125;<br>while (<span class="hljs-name">j</span> != start) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>for (<span class="hljs-name">k</span> = i<span class="hljs-comment">; k &gt; j; k -= siz) &#123;</span><br>swp(<span class="hljs-name">k</span>, k - siz)<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>for (<span class="hljs-name">i</span> = sentry<span class="hljs-comment">; i &lt; end; i += siz) &#123;</span><br>j = i - siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>continue<span class="hljs-comment">;</span><br>&#125;<br>do &#123;<br>j -= siz2<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>if (!(<span class="hljs-name">cmp</span>(<span class="hljs-name">j</span>, i) &gt; <span class="hljs-number">0</span>)) &#123;<br>j += siz<span class="hljs-comment">;</span><br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>if (<span class="hljs-name">j</span> == start) &#123;<br>break<span class="hljs-comment">;</span><br>&#125;<br>if (<span class="hljs-name">j</span> == start + siz) &#123;<br>j -= siz<span class="hljs-comment">;</span><br>if (<span class="hljs-name">cmp</span>(<span class="hljs-name">i</span>, j) &gt; <span class="hljs-number">0</span>) &#123;<br>j += siz<span class="hljs-comment">;</span><br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125; while (<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>for (<span class="hljs-name">k</span> = i<span class="hljs-comment">; k &gt; j; k -= siz) &#123;</span><br>swp(<span class="hljs-name">k</span>, k - siz)<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>&#125;<br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后来说说 <code>cmp</code> 这个函数，当 <code>sort_flags</code> 为 <code>SORT_REGULAR</code> 时 <code>sort</code> 函数的 <code>cmp</code> 调用的是 <code>array.c</code> 中的下面这个函数，返回值分成 小于0(b&gt;1), 0(b==a), 大于0(a&gt;b)对比失败也是0。</p><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined">static int php_array_data_compare(const void *a, const void *<span class="hljs-keyword">b)<br></span>&#123;<br><span class="hljs-keyword">Bucket </span>*f<span class="hljs-comment">;</span><br><span class="hljs-keyword">Bucket </span>*s<span class="hljs-comment">;</span><br>zval result<span class="hljs-comment">;</span><br>zval *first<span class="hljs-comment">;</span><br>zval *second<span class="hljs-comment">;</span><br><br>f = (<span class="hljs-keyword">Bucket </span>*) a<span class="hljs-comment">;</span><br>s = (<span class="hljs-keyword">Bucket </span>*) <span class="hljs-keyword">b;<br></span><br>first = &amp;f-&gt;val<span class="hljs-comment">;</span><br>second = &amp;s-&gt;val<span class="hljs-comment">;</span><br><br>if (UNEXPECTED(Z_TYPE_P(first) == IS_INDIRECT)) &#123;<br>first = Z_INDIRECT_P(first)<span class="hljs-comment">;</span><br>&#125;<br>if (UNEXPECTED(Z_TYPE_P(second) == IS_INDIRECT)) &#123;<br>second = Z_INDIRECT_P(second)<span class="hljs-comment">;</span><br>&#125;<br>if (compare_function(&amp;result, first, second) == FAILURE) &#123;<br>return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br><br>ZEND_ASSERT(Z_TYPE(result) == IS_LONG)<span class="hljs-comment">;</span><br>return ZEND_NORMALIZE_BOOL(Z_LVAL(result))<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再往下追就是 <code>compare_function</code> 很长我就不贴了，简单说下其中先判断 <code>first</code> 和 <code>second</code> 类型，再进行各种分支比较。比较好奇其中的都是字符串时对比方法，追了下发现底层使用的是C的 <code>memcmp</code> 比较这两个串的前N个字节，这个N是这两个串中较小的那个。</p><p>最后总结下 <code>PHP7</code> 对比 <code>PHP5</code> 时代数组排序调用逻辑相差不大，但是排序算法优化了很多，更不用说底层的hash table了。</p><p>最后的最后文中如有理解错误的点也请指教。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains IDE 文件对比功能</title>
      <link href="/2019/05/07/jetbrains_ide_compare_text/"/>
      <url>/2019/05/07/jetbrains_ide_compare_text/</url>
      
        <content type="html"><![CDATA[<p>之前用Beyond Compare对比文件，功能非常强大。但是试用期到了就用不了了，而且授权非常的贵，很多功能一般也用不到。</p><p>一般文件对比直接用系统自带的diff命令就可以了。但是，如果临时复制粘贴不同版本文件对比，又不想为了对比而创建文件，JetBrains家IDE对比功能就派上用场了。</p><p>Mac下按 <code>⇧⌘A</code> ，搜索 <code>open diff</code> ，回车。<br><img src="/images/15572093570374.jpg" alt></p><p>左右两边可以随意复制粘贴对比了。<br><img src="/images/15573665970343.jpg" alt></p><p><code>⇧⌘A</code>这其实是一个功能搜索快捷键，可以搜索任何功能。也可以快速开关一个功能。<br><img src="/images/15572097029571.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写Go的TCP服务来替代PHP的Swoole</title>
      <link href="/2019/04/30/swoole_to_go_serv/"/>
      <url>/2019/04/30/swoole_to_go_serv/</url>
      
        <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>目前公司采用微服务架构，主要开发语言为PHP，通过Swoole开启TCP服务供业务端调用。通过公司内部编写的PHP扩展封装客户端调用逻辑。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>暂定使用Go语言开发新的业务，并提供TCP服务。其中老的PHP项目要通过原有的客户端扩展实现无修改调用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过阅读客户端扩展源码了解调用逻辑。编写简单的测试如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>$_client = <span class="hljs-keyword">new</span> \swoole_client(SWOOLE_SOCK_TCP | SWOOLE_KEEP);<br>$_client-&gt;set([<br>    <span class="hljs-string">'open_length_check'</span> =&gt; <span class="hljs-keyword">true</span>,<br>    <span class="hljs-string">'package_length_type'</span> =&gt; <span class="hljs-string">'N'</span>,<br>    <span class="hljs-string">'package_length_offset'</span> =&gt; <span class="hljs-number">0</span>,<br>    <span class="hljs-string">'package_body_offset'</span> =&gt; <span class="hljs-number">4</span>,<br>    <span class="hljs-string">'package_max_length'</span> =&gt; <span class="hljs-number">24657920</span>,<br>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">false</span> == $_client-&gt;connect(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">8880</span>)) &#123;<br>    printf(<span class="hljs-string">"err_msg: %s err_code: %s"</span> . PHP_EOL, var_export($_client-&gt;errMsg, <span class="hljs-keyword">true</span>), var_export($_client-&gt;errCode, <span class="hljs-keyword">true</span>));<br>&#125;<br><br><span class="hljs-comment">// 随便测试个请求参数</span><br>$data = [<br>    <span class="hljs-string">'api'</span> =&gt; <span class="hljs-string">'getUserInfo'</span>,<br>    <span class="hljs-string">'params'</span> =&gt; [<br>        <span class="hljs-string">'user_id'</span> =&gt; <span class="hljs-number">123</span><br>    ]<br>];<br>$data = json_encode($data);<br>$data = gzcompress($data, <span class="hljs-number">9</span>);<br>$_client-&gt;send(pack(<span class="hljs-string">"N"</span>, strlen($data)) . $data);<br><br>$res = $_client-&gt;recv();<br>$end = getTime();<br><br>$data = json_decode($res, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>其中前4个字节是head，表示body长度，采用二进制大端字节序编码。body先进行json编码再进行了zlib压缩。这都是编写Go的TCP服务时需要处理的。</p><p>写个简单的Go TCP服务试试，先不考虑过多的错误边界处理。</p><figure class="hljs highlight Go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"compress/zlib"</span><br><span class="hljs-string">"encoding/binary"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"io"</span><br><span class="hljs-string">"net"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ln, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":8880"</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>conn, err := ln.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"accept err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">go</span> handleConnection(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleConnection</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">"on conn"</span>)<br><br><span class="hljs-keyword">var</span> err error<br>headLen := <span class="hljs-number">4</span><br>head := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, headLen)<br><span class="hljs-keyword">if</span> _, err = conn.Read(head); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 解码大端字节序获取body长度</span><br>bodyLen := binary.BigEndian.Uint32(head)<br><br>allBody := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">0</span>)<br>readLen := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> bodyLen &gt; <span class="hljs-number">0</span> &#123;<br>body := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, bodyLen)<br>readLen, err = conn.Read(body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><br>bodyLen = bodyLen - <span class="hljs-keyword">uint32</span>(readLen)<br>allBody = <span class="hljs-built_in">append</span>(allBody, body[:readLen]...)<br>&#125;<br><br><span class="hljs-comment">// 解压zlib压缩的数据 RFC 1950</span><br>b := bytes.NewReader(allBody)<br>uncompressRead, err := zlib.NewReader(b)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">"uncompress data err:%s"</span>, err)<br>&#125;<br><span class="hljs-keyword">var</span> uncompressData bytes.Buffer<br>io.Copy(&amp;uncompressData, uncompressRead)<br><br><span class="hljs-comment">// 解出的json字符串</span><br>fmt.Printf(<span class="hljs-string">"Received:%s"</span>, uncompressData.Bytes())<br><br><span class="hljs-comment">// 路由调用实际业务逻辑处理 ...</span><br><span class="hljs-comment">// conn.Write()</span><br><br>conn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行Go的TCP服务，跑一个PHP请求测试。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">on conn<br>Received:&#123;"api":"getUserInfo","params":&#123;"user_id":123&#125;&#125;<br></code></pre></td></tr></table></figure><p>经过多次修改测试终于成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
            <tag> Go </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP5下的Error错误处理及问题定位</title>
      <link href="/2019/01/08/php5_error_handle/"/>
      <url>/2019/01/08/php5_error_handle/</url>
      
        <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>来说说当PHP出现E_ERROR级别致命的运行时错误的问题定位方法。例如像<code>Fatal error: Allowed memory size of</code>内存溢出这种。当出现这种错误时会导致程序直接退出，PHP的error log中会记录一条错误日志说明报错的具体文件和代码行数，其它的任何信息都没有了。如果是PHP7的话还可以像捕获异常一样捕获错误，PHP5的话就不行了。</p><p>一般想到的方法就是看看报错的具体代码，如果报错文件是<code>CommonReturn.class.php</code>像下面这个样子。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>json_encode</code>那一行报错了，然后你查了下<code>packData</code>这个方法，有很多项目的类中都有调用，这时要怎么定位问题呢？</p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>好，首先我们复现下场景。假如实际调用的程序<code>bug.php</code>如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">'./CommonReturn.class.php'</span>;<br><br>$res = ini_set(<span class="hljs-string">'memory_limit'</span>, <span class="hljs-string">'1m'</span>);<br><br>$res = [];<br>$char = str_repeat(<span class="hljs-string">'x'</span>, <span class="hljs-number">999</span>);<br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">900</span> ; $i++) &#123;<br>    $res[] = $char;<br>&#125;<br><br>$get_pack = CommonReturn::packData($res);<br><br><span class="hljs-comment">// something else</span><br></code></pre></td></tr></table></figure><p>运行bug.php PHP错误日志中会记录</p><figure class="hljs highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[<span class="hljs-number">08</span>-Jan<span class="hljs-number">-2019</span> <span class="hljs-number">11</span>:<span class="hljs-number">22</span>:<span class="hljs-number">52</span> Asia/Shanghai] PHP Fatal <span class="hljs-keyword">error</span>:  Allowed memory size <span class="hljs-keyword">of</span> <span class="hljs-number">1048576</span> bytes exhausted (tried <span class="hljs-keyword">to</span> allocate <span class="hljs-number">525177</span> bytes) <span class="hljs-keyword">in</span> /CommonReturn.<span class="hljs-built_in">class</span>.php <span class="hljs-keyword">on</span> line <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>复现成功，错误日志中只是说明了报错的文件和哪行代码，无法知道程序的上下文堆栈信息，不知道具体是哪块业务逻辑调用的，这样一来就无法定位修复错误。如果是偶尔出现，并且没有来自前端业务的反馈要怎么排查呢。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>有人想到了修改<code>memory_limit</code>增加内存分配，但这种方法治标不治本。做开发肯定要找到问题的根源。</li><li>开启<code>core dump</code>，如果生成code文件可以进行调试，但是发现code只有进程异常退出才会生成。像E_ERROR级别的错误不一定会生成code文件，内存溢出这种可能PHP内部自己就处理了。</li><li>使用<code>register_shutdown_function</code>注册一个PHP终止时的回调函数，再调用<code>error_get_last</code>如果获取到了最后发生的错误，就通过<code>debug_print_backtrace</code>获取程序的堆栈信息，我们试试看。</li></ol><p>修改<code>CommonReturn.class.php</code>文件如下</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br><br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>]);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 错误处理<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">()</span><br>    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            ob_start();<br>            debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>            $trace = ob_get_clean();<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">23</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::handleFatal()</span><br></code></pre></td></tr></table></figure><p>回溯信息没有来源，尴尬了。猜测因为backtrace信息保存在内存中，当出现致命错误时会清空。没办法，把backtrace从外面传进来试试。再次修改<code>CommonReturn.class.php</code>。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/**<br> * 公共返回封装<br> * Class CommonReturn<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonReturn</span><br></span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 打包函数<br>     * <span class="hljs-doctag">@param</span>     $params<br>     * <span class="hljs-doctag">@param</span> int $status<br>     *<br>     * <span class="hljs-doctag">@return</span> mixed<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">packData</span><span class="hljs-params">($params, $status = <span class="hljs-number">0</span>)</span><br>    </span>&#123;<br><br>        ob_start();<br>        debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, <span class="hljs-number">5</span>);<br>        $trace = ob_get_clean();<br>        register_shutdown_function([<span class="hljs-string">'CommonReturn'</span>, <span class="hljs-string">'handleFatal'</span>], $trace);<br><br>        $res[<span class="hljs-string">'status'</span>] = $status;<br>        $res[<span class="hljs-string">'data'</span>] = json_encode($params);<br>        <span class="hljs-keyword">return</span> $res;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 错误处理<br>     * <span class="hljs-doctag">@param</span> $trace<br>     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleFatal</span><span class="hljs-params">($trace)</span><br>    </span>&#123;<br>        $err = error_get_last();<br>        <span class="hljs-keyword">if</span> ($err[<span class="hljs-string">'type'</span>]) &#123;<br>            $log_cont = <span class="hljs-string">'time=%s'</span> . PHP_EOL . <span class="hljs-string">'error_get_last:%s'</span> . PHP_EOL . <span class="hljs-string">'trace:%s'</span> . PHP_EOL;<br>            @file_put_contents(<span class="hljs-string">'/tmp/debug_'</span> . <span class="hljs-keyword">__FUNCTION__</span> . <span class="hljs-string">'.log'</span>, sprintf($log_cont, date(<span class="hljs-string">'Y-m-d H:i:s'</span>), var_export($err, <span class="hljs-number">1</span>), $trace), FILE_APPEND);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>bug.php</code>，日志如下。</p><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">error_get_last:<span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">'type'</span> =&gt; <span class="hljs-number">1</span>,<br>  <span class="hljs-string">'message'</span> =&gt; <span class="hljs-string">'Allowed memory size of 1048576 bytes exhausted (tried to allocate 525177 bytes)'</span>,<br>  <span class="hljs-string">'file'</span> =&gt; <span class="hljs-string">'/CommonReturn.class.php'</span>,<br>  <span class="hljs-string">'line'</span> =&gt; <span class="hljs-number">26</span>,<br>)<br>trace:<span class="hljs-comment">#0  CommonReturn::packData() called at [/bug.php:13]</span><br></code></pre></td></tr></table></figure><p>成功定位到了调用来源，在<code>bug.php</code>的13行。将最终的<code>CommonReturn.class.php</code>发布到生产环境，再次出现出现错误时候看日志就可以了。但是这样的话所有调用<code>packData</code>的程序都会执行trace函数，肯定也会影响性能的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对于其中使用到的<code>register_shutdown_function</code>函数需要注意，可以注册多个不同的回调，但是如果某一个回调函数中exit了，那么后面注册的回调函数都不会执行。</li><li><code>debug_print_backtrace</code>这个获取回溯信息函数第一个是否包含请求参数，第二个是回溯记录层数，我们这里是不返回请求参数，可以节省些内存，而且如果请求参数巨大的话调这个函数可能就直接内存溢出了。</li><li>最好的办法就是升级PHP7，可以像异常一样捕获错误。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 消息队列：队列的参数与消息的属性</title>
      <link href="/2018/01/31/rabbitmq2/"/>
      <url>/2018/01/31/rabbitmq2/</url>
      
        <content type="html"><![CDATA[<p>队列的参数即声明Queues时的Arguments。<br>消息的属性即向Exchange发布消息时的Properties。</p><h2 id="Queues-Arguments"><a href="#Queues-Arguments" class="headerlink" title="Queues Arguments"></a>Queues Arguments</h2><p>Message TTL<br>消息的存活时间，写入队列后被消费前可以存活的时间单位毫秒，通过<code>x-message-ttl</code>属性设置。</p><p>Auto expire<br>队列的存活时间，指定时间内没有consumer或get方式请求队列消息则会自动删除，通过<code>x-expires</code>属性设置。</p><p>Dead letter exchange<br>死信消息的exchange，通过<code>x-dead-letter-exchange</code>属性设置。</p><p>Dead letter routing key<br>死信消息的路由键，通过<code>x-dead-letter-routing-key</code>属性设置。</p><p>Maximum priority<br>消息支持的最大优先级，可实现优先级消息队列，通过<code>x-max-priority</code>属性设置。</p><p>Max length<br>队列的最大消息数，通过<code>x-max-length</code>属性设置。</p><p>Max length bytes<br>队列的消息的最大字节数，通过<code>x-max-length-bytes</code>属性设置。</p><p>Lazy mode<br>懒惰队列模式，将队列内容移动到磁盘上，当消息者请求时加载入内存，这样可以支持非常长的队列，通过<code>x-queue-mode</code>属性设置。</p><p>Master locator<br>在RabbitMQ的高可用镜像模式中，队列消息首先会写入主节点再依次备份至从节点，通过<code>x-queue-master-locator</code>属性设置队列的主节点选择策略。</p><ul><li>选择承担主节点最少的节点<code>min-masters</code></li><li>选择声明队列客户端连接到的节点<code>client-local</code></li><li>随机挑选一个节点<code>random</code></li></ul><p>死信相关<br>当消息满足以下三种情况之一时会当做死信来处理：</p><ul><li>消息被拒绝 (basic.reject or basic.nack)</li><li>消息未消费超时</li><li>超出队列长度限制</li></ul><p>队列最大长度相关<br>通过<code>x-max-length</code>、<code>x-max-length-bytes</code>来设置队列的最大长度。一个可以控制队列消息的个数，一个可以控制队列占用的空间。如果两个都设置任何一个触发都会执行队列溢出行为，默认的队列溢出后会从队列头开始丢弃消息或进行死信处理。通过<code>x-overflow</code>可以设置队列溢出后的行为，值为<code>drop-head</code>(默认值)或<code>reject-publish</code>(拒绝新消息)。</p><h2 id="Message-Properties"><a href="#Message-Properties" class="headerlink" title="Message Properties"></a>Message Properties</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>content_type</td><td>MIME类型</td></tr><tr><td>content_encoding</td><td>MIME编码</td></tr><tr><td>priority</td><td>消息优先级</td></tr><tr><td>correlation_id</td><td>业务应用关联标识</td></tr><tr><td>reply_to</td><td>回复队列名称</td></tr><tr><td>expiration</td><td>过期时间</td></tr><tr><td>message_id</td><td>业务应用消息标识</td></tr><tr><td>timestamp</td><td>消息写入时间戳</td></tr><tr><td>type</td><td>消息类型</td></tr><tr><td>user_id</td><td>用户id</td></tr><tr><td>app_id</td><td>应用id</td></tr><tr><td>cluster_id</td><td>集群id</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 消息队列：浅谈</title>
      <link href="/2017/12/28/rabbitmq1/"/>
      <url>/2017/12/28/rabbitmq1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>消息队列用来解决不同项目间通信、业务解耦。消息队列有很多种比如用Redis实现的轻量级消息队列。RabbitMQ是消息队列的一种，基于AMQP协议，用Erlang语言编写，属于一种消息队列中间件。</p><h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><p><img src="/images/15143024048456.jpg" alt></p><h3 id="Connection-链接"><a href="#Connection-链接" class="headerlink" title="Connection   链接"></a>Connection   链接</h3><p>真实的TCP链接</p><h3 id="Channel-信道"><a href="#Channel-信道" class="headerlink" title="Channel      信道"></a>Channel      信道</h3><p>基于Connection创建的Channel，所有的数据传输都是基于Channel的。大家都知道TCP链接需要三次握手，业务频繁每次开TCP链接对性能也会有不小的损耗，TCP链接数也有限制。Channel的存在主要是为了复用TCP链接。</p><h3 id="Exchange-交换机"><a href="#Exchange-交换机" class="headerlink" title="Exchange     交换机"></a>Exchange     交换机</h3><p>消息生产者生产的所有消息都会先写入Exchange中，再路由到Queues中，如果Exchange没有绑定或未匹配到Queues则消息会被丢弃。</p><h3 id="Queues-队列"><a href="#Queues-队列" class="headerlink" title="Queues       队列"></a>Queues       队列</h3><p>生产者生产的消息会从Exchange中路由到Queues中，消费者从Queues中消费消息。</p><h3 id="Binding-绑定"><a href="#Binding-绑定" class="headerlink" title="Binding      绑定"></a>Binding      绑定</h3><p>Binding将Exchange与Queues关联起来。</p><h3 id="Routing-key-路由键"><a href="#Routing-key-路由键" class="headerlink" title="Routing key  路由键"></a>Routing key  路由键</h3><p>路由键是消息从Exchange进入到某个Queues的规则。<br>在将Queues绑定至Exchange时会设置消息从Exchange路由至Queues的绑定路由键规则。<br>在将消息写入Exchange时会附带消息的路由键。</p><p>Exchange类型为direct或topic时，消息的投递会根据消息的路由键和绑定的路由键进行匹配，Exchange将消息投递给所有匹配上的Queues。</p><h4 id="路由键写法"><a href="#路由键写法" class="headerlink" title="路由键写法"></a>路由键写法</h4><p>路由键可以由<code>.</code> 进行分隔，如<code>computer.mac</code>或<code>computer.win</code>。<br>路由键还支持通配符来模糊匹配，<code>*</code>与<code>#</code><br><code>*</code>匹配一个分隔的单词<br><code>#</code>匹配多个或零个分隔的单词</p><p>应用举例</p><table><thead><tr><th>Exchange</th><th>Routing key</th><th>Queues</th></tr></thead><tbody><tr><td>X</td><td><code>*.*.imac</code></td><td>apple</td></tr><tr><td>X</td><td><code>apple.#</code></td><td>apple</td></tr><tr><td>X</td><td><code>*.phone.*</code></td><td>phone</td></tr></tbody></table><p>此时写入一条消息路由键为<code>apple.phone.iphone4</code>会被投递到队列apple与phone。<br>再写入一条消息路由键为<code>apple.computer.imac</code>仅会被投递到apple，此时apple队列匹配了两个路由键，但是也只会投递到apple一次。<br>再写入一条消息路由键为<code>micro.computer.win</code>因为没有匹配的路由键队列该消息会被丢弃。</p><h3 id="Exchange-Types-交换机类型"><a href="#Exchange-Types-交换机类型" class="headerlink" title="Exchange Types   交换机类型"></a>Exchange Types   交换机类型</h3><h4 id="fanout-广播"><a href="#fanout-广播" class="headerlink" title="fanout 广播"></a>fanout 广播</h4><p>fanout类型的Exchange会无视路由键，将消息投递给所有绑定到该Exchange上的Queues。</p><h4 id="direct-单播"><a href="#direct-单播" class="headerlink" title="direct 单播"></a>direct 单播</h4><p>direct类型的Exchange会将消息投递给路由键完全匹配的Queues中。</p><h4 id="topic-组播"><a href="#topic-组播" class="headerlink" title="topic 组播"></a>topic 组播</h4><p>topic类型的Exchange会将消息投递给路由键模糊匹配的Queues中。</p><h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>headers类型的Exchange也会无视路由键，会根据headers中的属性来进行匹配。该类型应用较少，不过在RabbitMQ内部还是有使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
